<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lemir3&#39;s blog</title>
  
  
  <link href="https://www.lemir3.red/atom.xml" rel="self"/>
  
  <link href="https://www.lemir3.red/"/>
  <updated>2020-09-20T13:00:49.892Z</updated>
  <id>https://www.lemir3.red/</id>
  
  <author>
    <name>lemir3</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「解题报告」[NOI Online #1 入门组]魔法</title>
    <link href="https://www.lemir3.red/2020/09/20/jie-ti-bao-gao-noi-online-1-ru-men-zu-mo-fa/"/>
    <id>https://www.lemir3.red/2020/09/20/jie-ti-bao-gao-noi-online-1-ru-men-zu-mo-fa/</id>
    <published>2020-09-20T12:13:01.000Z</published>
    <updated>2020-09-20T13:00:49.892Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:矩阵优化dp转移</p><a id="more"></a><h1 id="NOI-Online-1-入门组-魔法"><a href="#NOI-Online-1-入门组-魔法" class="headerlink" title="[NOI Online #1 入门组]魔法"></a>[NOI Online #1 入门组]魔法</h1><p><a href="https://www.luogu.com.cn/problem/P6190" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>如果不考虑$k$的存在,那么就可以直接跑floyd算法求出最短路.<br>先设$k$为1,求出最短路后,枚举一条边$(u,v,w)$,将每个状态$f_{i,j}$用$f_{i,u}+f_{v,j}-w$更新即可.</p><p>设$k$为2,设状态$f_{0/1/2,i,j}$为点$i$到$j$使用了至多$k$次魔法的最短路,容易发现一个更新$f_{2,i,j}$的方法:</p><script type="math/tex; mode=display">f_{2,i,j}=\min_{1 \leq x \leq n}\{f_{0/1,i,x}+f_{0/1,x,j}\}</script><p>发现这个形式类似矩阵乘法:</p><script type="math/tex; mode=display">C_{i,j}=\sum_{k=1}^{n}A_{i,k}B_{k,j}</script><p>所以将可以用矩阵乘法来进行上述dp的转移,但问题是$k\leq {10}^6$,需要用矩阵快速幂来加速.</p><p>因此该运算应该满足结合律,证明如下:</p><blockquote><p>令$A$为$m \times n$的矩阵,$B$为$n \times r$的矩阵,$C$为$r \times s$的矩阵,设$D=AB$,$E=BC$,现需要证明$DC=AE$:</p><p>$DC$的元素$(i,j)$为:</p><script type="math/tex; mode=display">\min_{1\leq x\leq r}\{d_{i,x},c_{x,j}\}=\min_{1\leq x \leq r}\{\min_{1\leq y \leq n}\{a_{i,y},b_{y,x}\},c_{x,j}\}</script><p>$AE$的元素$(i,j)$为:</p><script type="math/tex; mode=display">\min_{1\leq x \leq n}\{a_{i,x},e_{x,j}\}=\min_{1 \leq x \leq n}\{a_{i,x}\min_{1\leq y\leq r}\{b_{x,y},c_{y,j}\}\}</script><p>观察发现两式中包含元素相同,因此$(AB)C=DC=AE=A(BC)$.</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="　代码"></a>　代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">101</span>,large=<span class="number">2510</span>;</span><br><span class="line">lxl n,m,k;</span><br><span class="line">lxl edge[big][big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl u,v,w;</span><br><span class="line">&#125;e[large];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl a[big][big];</span><br><span class="line">_Matrix()&#123;<span class="built_in">memset</span>(a,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> a);&#125;</span><br><span class="line"><span class="keyword">inline</span> _Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> _Matrix &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">_Matrix b;</span><br><span class="line">R <span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=n;++k)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">b.a[i][j]=<span class="built_in">std</span>::min(b.a[i][j],a[i][k]+another.a[k][j]);</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125; </span><br><span class="line">&#125;A;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="function">lxl <span class="title">x</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=x*<span class="number">10</span>+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> _<span class="function">Matrix <span class="title">FastPow</span><span class="params">(_Matrix A,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_Matrix I;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;n;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;n;++j)</span><br><span class="line">I.a[i][j]=edge[i][j];</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,A=A*A)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)I=I*A;</span><br><span class="line"><span class="keyword">return</span> I;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(edge,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> edge);</span><br><span class="line">n=read(),m=read(),k=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)e[i].u=read(),e[i].v=read(),e[i].w=read(),edge[e[i].u][e[i].v]=e[i].w;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)edge[i][i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(<span class="number">1</span>);k&lt;=n;++k)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=n;++j)</span><br><span class="line">edge[i][j]=<span class="built_in">std</span>::min(edge[i][j],edge[i][k]+edge[k][j]);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(<span class="number">1</span>);k&lt;=m;++k)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=e[k].u,v=e[k].v,w=e[k].w;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=n;++j)</span><br><span class="line">A.a[i][j]=<span class="built_in">std</span>::min(A.a[i][j],<span class="built_in">std</span>::min(edge[i][u]+edge[v][j]-w,edge[i][j]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!k)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,edge[<span class="number">1</span>][n]);</span><br><span class="line"><span class="keyword">else</span> A=FastPow(A,k),<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,A.a[<span class="number">1</span>][n]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:矩阵优化dp转移&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-矩阵" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/"/>
    
    <category term="图论" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/图论/"/>
    
    <category term="动态规划" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/图论/动态规划/"/>
    
    
    <category term="动态规划" scheme="https://www.lemir3.red/tags/动态规划/"/>
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="矩阵" scheme="https://www.lemir3.red/tags/矩阵/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」CF576D Flights for Regular Customers</title>
    <link href="https://www.lemir3.red/2020/09/19/jie-ti-bao-gao-cf576d-flights-for-regular-customers/"/>
    <id>https://www.lemir3.red/2020/09/19/jie-ti-bao-gao-cf576d-flights-for-regular-customers/</id>
    <published>2020-09-19T09:07:10.000Z</published>
    <updated>2020-09-19T09:17:25.499Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:邻接矩阵的应用</p><a id="more"></a><h1 id="CF576D-Flights-for-Regular-Customers"><a href="#CF576D-Flights-for-Regular-Customers" class="headerlink" title="CF576D Flights for Regular Customers"></a>CF576D Flights for Regular Customers</h1><p><a href="http://codeforces.com/problemset/problem/576/D" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>边的开放有时间的限制,很好想到对边按照时间进行排序.</p><p>一条限制为$t$的边开放后能够在经过恰好$t$条边的到达的点可以通过邻接矩阵直接乘出来,然后对这些点进行bfs更新答案即可.</p><p>矩阵的大小很大但元素都是01,所以可以使用<code>bitset</code>进行优化.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"bitset"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">151</span>;</span><br><span class="line">lxl n,m,t,ans=INF;</span><br><span class="line">lxl dis[big];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;big&gt;v;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;lxl&gt;q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl u,v,w;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Edge &amp;another)<span class="keyword">const</span>&#123;<span class="keyword">return</span> w&lt;another.w;&#125;</span><br><span class="line">&#125;e[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;big&gt;a[big];</span><br><span class="line"><span class="keyword">inline</span> _Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> _Matrix &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">_Matrix b;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;n;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;n;++j)</span><br><span class="line"><span class="keyword">if</span>(a[i][j])b.a[i]|=another.a[j];</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;A;</span><br><span class="line"><span class="keyword">inline</span> <span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;big&gt; BitsetMul(<span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;big&gt; a,_Matrix b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;big&gt; c;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;n;++i)c[i]=(a&amp;b.a[i]).any();</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FastPow</span><span class="params">(_Matrix A,lxl b,<span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;big&gt; &amp;c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,A=A*A)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)c=BitsetMul(c,A);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)e[i].u=read()<span class="number">-1</span>,e[i].v=read()<span class="number">-1</span>,e[i].w=read();</span><br><span class="line"><span class="built_in">std</span>::sort(e+<span class="number">1</span>,e+<span class="number">1</span>+m);</span><br><span class="line">v[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e[i].w&gt;=ans)<span class="keyword">break</span>;</span><br><span class="line">lxl times=e[i].w-t;</span><br><span class="line">FastPow(A,times,v);</span><br><span class="line">A.a[e[i].v][e[i].u]=<span class="number">1</span>;</span><br><span class="line">t=e[i].w;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> x(<span class="number">1</span>);x&lt;=n;++x)</span><br><span class="line"><span class="keyword">if</span>(v[x<span class="number">-1</span>])q.push(x),dis[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> dis[x]=INF;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">lxl u=q.front();q.pop();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> to(<span class="number">1</span>);to&lt;=n;++to)</span><br><span class="line"><span class="keyword">if</span>(A.a[to<span class="number">-1</span>][u<span class="number">-1</span>]&amp;&amp;dis[to]==INF)dis[to]=dis[u]+<span class="number">1</span>,q.push(to);</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="built_in">std</span>::min(ans,t+dis[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans==INF)<span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:邻接矩阵的应用&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-矩阵" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/"/>
    
    <category term="图论" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/图论/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="矩阵" scheme="https://www.lemir3.red/tags/矩阵/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」「HNOI2011」数学作业</title>
    <link href="https://www.lemir3.red/2020/09/18/jie-ti-bao-gao-hnoi2011-shu-xue-zuo-ye/"/>
    <id>https://www.lemir3.red/2020/09/18/jie-ti-bao-gao-hnoi2011-shu-xue-zuo-ye/</id>
    <published>2020-09-18T13:49:46.000Z</published>
    <updated>2020-09-18T13:58:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:矩阵表示转移</p><a id="more"></a><h1 id="「HNOI2011」数学作业"><a href="#「HNOI2011」数学作业" class="headerlink" title="「HNOI2011」数学作业"></a>「HNOI2011」数学作业</h1><p><a href="https://www.luogu.com.cn/problem/P3216" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>设$f_i$为第$i$个题目中要求的数,构造出转移矩阵:</p><script type="math/tex; mode=display">\begin{bmatrix}f_{n-1},n-1,1\end{bmatrix}\times\begin{bmatrix}10^k,0,0\\1,1,0\\1,1,1\end{bmatrix}=\begin{bmatrix}f_n,n,1\end{bmatrix}</script><p>建出18个转移矩阵然后矩阵快速幂即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">3</span>;</span><br><span class="line">lxl n,mod;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl a[big][big];</span><br><span class="line">_Matrix()&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);&#125;</span><br><span class="line"><span class="keyword">inline</span> _Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> _Matrix &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">_Matrix b;</span><br><span class="line">int i(0),j(0),k(0);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;big;++i)</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;big;++k)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;big;++j)</span><br><span class="line">b.a[i][j]=(b.a[i][j]+a[i][k]*another.a[k][j]%mod+mod)%mod;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;A[<span class="number">18</span>],I,T;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPowZ</span><span class="params">(lxl a,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%mod)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a%mod);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPowZ2</span><span class="params">(lxl a,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> _<span class="function">Matrix <span class="title">FastPowM</span><span class="params">(_Matrix A,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_Matrix sum=I;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,A=A*A)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)sum=sum*A;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;big;++i)I.a[i][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;<span class="number">18</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">A[i].a[<span class="number">0</span>][<span class="number">0</span>]=FastPowZ(<span class="number">10</span>,i+<span class="number">1</span>);</span><br><span class="line">A[i].a[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>,A[i].a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">A[i].a[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">1</span>,A[i].a[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">1</span>,A[i].a[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">T.a[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>,T.a[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span>,T.a[<span class="number">0</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),mod=read();</span><br><span class="line">prework();</span><br><span class="line"><span class="keyword">for</span>(R lxl i(<span class="number">1</span>),cnt(<span class="number">1</span>);i&lt;=n;++cnt,i*=<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl calc=FastPowZ2(<span class="number">10</span>,cnt)-i,calc2=n-i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)--calc2,--calc;</span><br><span class="line"><span class="keyword">if</span>(i+calc&gt;n)&#123;T=T*FastPowM(A[cnt<span class="number">-1</span>],calc2);<span class="keyword">break</span>;&#125;</span><br><span class="line">T=T*FastPowM(A[cnt<span class="number">-1</span>],calc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,T.a[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:矩阵表示转移&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-矩阵" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="矩阵" scheme="https://www.lemir3.red/tags/矩阵/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」「TJOI2017」可乐</title>
    <link href="https://www.lemir3.red/2020/09/18/jie-ti-bao-gao-tjoi2017-ke-le/"/>
    <id>https://www.lemir3.red/2020/09/18/jie-ti-bao-gao-tjoi2017-ke-le/</id>
    <published>2020-09-18T11:41:18.000Z</published>
    <updated>2020-09-18T12:05:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:邻接矩阵解决图论问题</p><a id="more"></a><h1 id="「TJOI2017」可乐"><a href="#「TJOI2017」可乐" class="headerlink" title="「TJOI2017」可乐"></a>「TJOI2017」可乐</h1><p><a href="https://www.luogu.com.cn/problem/P3758" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>看完题目后脑补了一下邻接矩阵但是不知道怎么用,<del>于是这位没有数理基础的选手打开了题解看性质</del>.</p><p>考虑邻接矩阵的性质,比如题中的样例:</p><script type="math/tex; mode=display">A=\begin{bmatrix}0,1,0\\1,0,1\\0,1,0\end{bmatrix}</script><p>它包含了图的联通性的信息,如果将其的信息视为从一个起点走一步达到其他点的方案数,将其自乘一遍便可以得到从一个点走两步达到其他点的方案数:</p><script type="math/tex; mode=display">A\times A=\begin{bmatrix}1,0,1\\0,2,0\\1,0,1\end{bmatrix}</script><p>这启发我们使用矩阵快速幂解决在走$t$步后到达其他点的方案数.</p><p>但是题目中还有在一个点停下和在一个点结束的限制,对于在一个点停下,向自己连边即可,对于在一个点结束,向虚点$0$号点连一条有向边即可表示.</p><p>最后统计一遍$\sum_{i=0}^{n}a_{1,i}$得到答案.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">31</span>,mod=<span class="number">2017</span>;</span><br><span class="line">lxl n,m,t,ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl a[big][big];</span><br><span class="line">_Matrix()&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);&#125;</span><br><span class="line"><span class="keyword">inline</span> _Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> _Matrix &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">_Matrix b;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;big;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(<span class="number">0</span>);k&lt;big;++k)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;big;++j)</span><br><span class="line">b.a[i][j]=(b.a[i][j]+a[i][k]*another.a[k][j])%mod;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;edge,I;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;big;++i)I.a[i][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> _<span class="function">Matrix <span class="title">FastPow</span><span class="params">(_Matrix a,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_Matrix A=I;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)A=a*A;</span><br><span class="line"><span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">init();</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;=n;++i)edge.a[i][i]=<span class="number">1</span>,edge.a[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read();</span><br><span class="line">edge.a[u][v]=edge.a[v][u]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">t=read();</span><br><span class="line">edge=FastPow(edge,t);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;=n;<span class="built_in">endl</span>,++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;=n;++j)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld "</span>,edge.a[i][j]);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;=n;++i)ans=(ans+edge.a[<span class="number">1</span>][i])%mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:邻接矩阵解决图论问题&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-矩阵" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="矩阵" scheme="https://www.lemir3.red/tags/矩阵/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu5251[LnOI2019]第二代图灵机</title>
    <link href="https://www.lemir3.red/2020/09/18/jie-ti-bao-gao-luogu5251-lnoi2019-di-er-dai-tu-ling-ji/"/>
    <id>https://www.lemir3.red/2020/09/18/jie-ti-bao-gao-luogu5251-lnoi2019-di-er-dai-tu-ling-ji/</id>
    <published>2020-09-18T06:07:48.000Z</published>
    <updated>2020-09-18T07:34:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:珂朵莉树上进行尺取法</p><a id="more"></a><h1 id="luogu5251-LnOI2019-第二代图灵机"><a href="#luogu5251-LnOI2019-第二代图灵机" class="headerlink" title="luogu5251[LnOI2019]第二代图灵机"></a>luogu5251[LnOI2019]第二代图灵机</h1><p><a href="https://www.luogu.com.cn/problem/P5251" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p><del>《高中没学过图灵机,写过了第二代图灵机的信息题,可以去拿图灵奖吗》</del></p><p>维护颜色段的信息,大胆一点直接想出珂朵莉树.</p><p>对于修改操作的维护就非常简单了,单点修改区间求和数值可以使用树状数组,区间修改颜色段在珂朵莉树上分裂后再插入即可.</p><p>操作3是求区间内包含所有颜色的数字和最小的子区间,显然这个操作可以进行<strong>尺取法</strong>,在当前区间还未包含所有颜色之前,将区间的右端点向右移,一旦满足了包含所有颜色,更新答案后将左端点向右移动以保证答案最小,因为在珂朵莉树上做所以这样就可以$O(\sqrt n)$地遍历出所有有可能成为最优子区间地区间.</p><p>操作4是求区间内不包含重复颜色的数字和最大子区间,同样使用尺取法,在未出现重复颜色之前将区间右端点向右移使得答案更大,一旦出现了重复的颜色,就将区间的左端点向右移来满足条件.</p><p>根据珂朵莉树的性质,进行操作4时如果有长度大于一的节点那么就对这个节点的操作就只能取左端点后更新答案然后在右端点重新开始尺取法,并且算上中间的单点最大值,单点最大值预先用线段树将整个查询区间处理好即可.</p><p>具体实现特别恶心,看代码吧.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IT std::set<span class="meta-string">&lt;_Chtholly&gt;::iterator</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>,small=<span class="number">110</span>;</span><br><span class="line">lxl n,m,_c,ColorCnt;</span><br><span class="line">lxl a[big],b[big],rem[small],t[big];</span><br><span class="line">lxl root,NodeCnt;</span><br><span class="line">lxl c[<span class="number">2</span>][big&lt;&lt;<span class="number">2</span>],max[big&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Chtholly</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl l,r;</span><br><span class="line"><span class="keyword">mutable</span> lxl v;</span><br><span class="line">_Chtholly(lxl _l,lxl _r=<span class="number">-1</span>,lxl _v=<span class="number">0</span>):l(_l),r(_r),v(_v)&#123;&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Chtholly &amp;another)<span class="keyword">const</span>&#123;<span class="keyword">return</span> l&lt;another.l;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">set</span>&lt;_Chtholly&gt;s;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> IT <span class="title">spilt</span><span class="params">(lxl pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IT it=s.lower_bound(_Chtholly(pos));</span><br><span class="line"><span class="keyword">if</span>(it!=s.end()&amp;&amp;it-&gt;l==pos)<span class="keyword">return</span> it;</span><br><span class="line">--it;</span><br><span class="line">lxl _l=it-&gt;l,_r=it-&gt;r;</span><br><span class="line">lxl _v=it-&gt;v;</span><br><span class="line">s.erase(it);</span><br><span class="line">s.insert(_Chtholly(_l,pos<span class="number">-1</span>,_v));</span><br><span class="line"><span class="keyword">return</span> s.insert(_Chtholly(pos,_r,_v)).first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">assign</span><span class="params">(lxl l,lxl r,lxl val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IT it2=spilt(r+<span class="number">1</span>),it1=spilt(l);</span><br><span class="line">s.erase(it1,it2);</span><br><span class="line">s.insert(_Chtholly(l,r,val));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl x,lxl val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;x&lt;big;x+=lowbit(x))t[x]+=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">ask</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;x;x-=lowbit(x))sum+=t[x];</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">query</span><span class="params">(lxl l,lxl r)</span></span>&#123;<span class="keyword">return</span> ask(r)-ask(l<span class="number">-1</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(lxl &amp;t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t)t=++NodeCnt;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;max[t]=a[l];<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">BuildTree(c[<span class="number">0</span>][t],l,mid),BuildTree(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r);</span><br><span class="line">max[t]=<span class="built_in">std</span>::max(max[c[<span class="number">0</span>][t]],max[c[<span class="number">1</span>][t]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;max[t]=k;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)change(c[<span class="number">0</span>][t],l,mid,x,k);</span><br><span class="line"><span class="keyword">else</span> change(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,k);</span><br><span class="line">max[t]=<span class="built_in">std</span>::max(max[c[<span class="number">0</span>][t]],max[c[<span class="number">1</span>][t]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">SegMax</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)<span class="keyword">return</span> max[t];</span><br><span class="line">lxl tmax(-INF),mid((l+r)&gt;&gt;1);</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)tmax=<span class="built_in">std</span>::max(tmax,SegMax(c[<span class="number">0</span>][t],l,mid,x,y));</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid)tmax=<span class="built_in">std</span>::max(tmax,SegMax(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y));</span><br><span class="line"><span class="keyword">return</span> tmax;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">GetMin</span><span class="params">(lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IT itl=s.upper_bound(_Chtholly(l)),itr=s.upper_bound(_Chtholly(r));</span><br><span class="line">--itl,--itr;</span><br><span class="line"><span class="keyword">return</span> query(itl-&gt;r,itr-&gt;l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">GetMax</span><span class="params">(lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> query(l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read(),_c=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=read(),modify(i,a[i]);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)b[i]=read();</span><br><span class="line">BuildTree(root,<span class="number">1</span>,n);</span><br><span class="line">s.insert(_Chtholly(n+<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">0</span>)),s.insert(_Chtholly(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> l(<span class="number">1</span>);l&lt;=n;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">lxl <span class="title">r</span><span class="params">(l)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(b[r]==b[r+<span class="number">1</span>]&amp;&amp;r&lt;=n)++r;</span><br><span class="line">s.insert((_Chtholly)&#123;l,r,b[l]&#125;),l=r+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl opt=read();</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl x=read(),y=read();</span><br><span class="line">modify(x,-a[x]),modify(x,a[x]=y);</span><br><span class="line">change(root,<span class="number">1</span>,n,x,a[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl l=read(),r=read(),color=read();</span><br><span class="line">assign(l,r,color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(rem,<span class="number">0</span>,<span class="keyword">sizeof</span> rem),ColorCnt=<span class="number">0</span>;</span><br><span class="line">lxl x=read(),y=read(),ans(INF);</span><br><span class="line">lxl l(x),r(x);</span><br><span class="line">spilt(y+<span class="number">1</span>),spilt(x);</span><br><span class="line"><span class="keyword">while</span>(r&lt;=y)</span><br><span class="line">&#123;</span><br><span class="line">IT it=s.lower_bound(_Chtholly(r));</span><br><span class="line"><span class="comment">// debug(it-&gt;l),debug(it-&gt;r),debug(l),debug(r),endl;</span></span><br><span class="line"><span class="keyword">if</span>(!rem[it-&gt;v])++ColorCnt;</span><br><span class="line">++rem[it-&gt;v],r=it-&gt;r;</span><br><span class="line"><span class="keyword">if</span>(ColorCnt&lt;_c)&#123;++r;<span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">IT it2=s.upper_bound(_Chtholly(l));--it2;</span><br><span class="line"><span class="keyword">while</span>(ColorCnt==_c)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="built_in">std</span>::min(GetMin(l,r),ans);</span><br><span class="line"><span class="keyword">if</span>(!(rem[it2-&gt;v]<span class="number">-1</span>))--ColorCnt;</span><br><span class="line">--rem[it2-&gt;v],l=it2-&gt;r+<span class="number">1</span>;</span><br><span class="line">++it2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(it2-&gt;l!=it2-&gt;r)l=it2-&gt;r;</span><br><span class="line">++r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans==INF)<span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(rem,<span class="number">0</span>,<span class="keyword">sizeof</span> rem),ColorCnt=<span class="number">0</span>;</span><br><span class="line">lxl x=read(),y=read(),ans=SegMax(root,<span class="number">1</span>,n,x,y);</span><br><span class="line">lxl l(x),r(x);</span><br><span class="line">spilt(y+<span class="number">1</span>),spilt(x);</span><br><span class="line"><span class="keyword">while</span>(r&lt;=y)</span><br><span class="line">&#123;</span><br><span class="line">IT it=s.lower_bound(_Chtholly(r));</span><br><span class="line"><span class="keyword">if</span>(!(rem[it-&gt;v]<span class="number">-1</span>))++ColorCnt;</span><br><span class="line">++rem[it-&gt;v];</span><br><span class="line"><span class="keyword">if</span>(!ColorCnt)ans=<span class="built_in">std</span>::max(ans,GetMax(l,r));</span><br><span class="line"><span class="comment">// debug(it-&gt;l),debug(it-&gt;r),debug(l),debug(r),debug(rem[2]),endl;</span></span><br><span class="line"><span class="keyword">if</span>(it-&gt;l==it-&gt;r&amp;&amp;rem[it-&gt;v]==<span class="number">1</span>)r=it-&gt;r+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">IT it2=s.upper_bound(_Chtholly(l));--it2;</span><br><span class="line"><span class="comment">// debug(it2-&gt;l),debug(it2-&gt;r),debug(l),endl;</span></span><br><span class="line"><span class="keyword">while</span>(ColorCnt)</span><br><span class="line">&#123;</span><br><span class="line">--rem[it2-&gt;v];</span><br><span class="line"><span class="keyword">if</span>(!(rem[it2-&gt;v]<span class="number">-1</span>))--ColorCnt;</span><br><span class="line"><span class="comment">// debug(l),debug(ColorCnt),debug(rem[it2-&gt;v]);</span></span><br><span class="line">l=it2-&gt;r+<span class="number">1</span>,++it2;</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="built_in">std</span>::max(ans,GetMax(l,r));</span><br><span class="line"><span class="keyword">if</span>(it-&gt;l!=it-&gt;r)</span><br><span class="line">&#123;</span><br><span class="line">l=it-&gt;r,r=l+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(rem,<span class="number">0</span>,<span class="keyword">sizeof</span> rem),ColorCnt=<span class="number">0</span>;</span><br><span class="line">++rem[it-&gt;v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> r=it-&gt;r+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">8 1 4</span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 </span></span><br><span class="line"><span class="comment">2 3 1 2 3 4 1 2</span></span><br><span class="line"><span class="comment">4 2 8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:珂朵莉树上进行尺取法&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/数据结构/"/>
    
    <category term="数据结构-珂朵莉树" scheme="https://www.lemir3.red/categories/数据结构/数据结构-珂朵莉树/"/>
    
    <category term="其他" scheme="https://www.lemir3.red/categories/数据结构/数据结构-珂朵莉树/其他/"/>
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="其他" scheme="https://www.lemir3.red/tags/其他/"/>
    
    <category term="珂朵莉树" scheme="https://www.lemir3.red/tags/珂朵莉树/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu3765总统选举</title>
    <link href="https://www.lemir3.red/2020/09/17/jie-ti-bao-gao-luogu3765-zong-tong-xuan-ju/"/>
    <id>https://www.lemir3.red/2020/09/17/jie-ti-bao-gao-luogu3765-zong-tong-xuan-ju/</id>
    <published>2020-09-17T02:39:46.000Z</published>
    <updated>2020-09-17T03:01:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:线段树维护出信息后平衡树判断合法</p><a id="more"></a><h1 id="luogu3765总统选举"><a href="#luogu3765总统选举" class="headerlink" title="luogu3765总统选举"></a>luogu3765总统选举</h1><p><a href="https://www.luogu.com.cn/problem/P3765" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>可以看到题目要求维护的是区间众数且要求众数的数量超过区间长度的一半.</p><p>这个信息其实比区间众数弱了不少,因为假设这样的总数存在,我们将区间中的数两两取出,若不一样则消去,那么最后一定会剩下这个众数.</p><p>这就启发我们用线段树来维护区间的数互相消去后的信息,仅记录消去后的数和它剩下的出现次数即可.</p><p>但现在的问题是区间内不一定存在这样的众数,所以需要将求得的众数进行检查.</p><p>朴素思路是将每一个数出现的每个位置分别存下来,然后用二分求出求得的众数在这个区间内有多少个.</p><p>对每一个数建立一颗平衡树就可以完成这个操作,节点键值为在原序列上的位置,对于一个区间,我们找到它的左端点在树上的后继,右端点在树上的前驱,然后后继的排名减去前驱的排名即可.</p><p>注意这里的前驱后继是需要包含这个点本身的,也就是<strong>小于/大于等于</strong>这个值的最大/小的数.</p><p>一开始是写了棵splay,然后因为直接暴力插入被卡成了链tle了2个点(不知道其他的点是怎么过的),按理来说把原序列上每个数字对应的所有位置处理好然后直接递归建树就没事了,但反正维护的东西很简单就重新写了棵sbt.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">500010</span>;</span><br><span class="line">lxl n,m,cnt,l,r,s,k,newn,rcnt;</span><br><span class="line">lxl a[big],change[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> SegmentTree</span><br><span class="line">&#123;</span><br><span class="line">lxl root(0),NodeCnt(0);</span><br><span class="line">lxl c[<span class="number">2</span>][big&lt;&lt;<span class="number">2</span>],tim[big&lt;&lt;<span class="number">2</span>],num[big&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(lxl t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num[c[<span class="number">0</span>][t]]==num[c[<span class="number">1</span>][t]])tim[t]=tim[c[<span class="number">0</span>][t]]+tim[c[<span class="number">1</span>][t]],num[t]=num[c[<span class="number">0</span>][t]];</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">if</span>(tim[c[<span class="number">0</span>][t]]&gt;tim[c[<span class="number">1</span>][t]])num[t]=num[c[<span class="number">0</span>][t]],tim[t]=tim[c[<span class="number">0</span>][t]]-tim[c[<span class="number">1</span>][t]];</span><br><span class="line"><span class="keyword">else</span> num[t]=num[c[<span class="number">1</span>][t]],tim[t]=tim[c[<span class="number">1</span>][t]]-tim[c[<span class="number">0</span>][t]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(lxl &amp;t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t)t=++NodeCnt;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;num[t]=a[l],tim[t]=<span class="number">1</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">BuildTree(c[<span class="number">0</span>][t],l,mid),BuildTree(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r);</span><br><span class="line">PushUp(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::pair&lt;lxl,lxl&gt; query(lxl t,lxl l,lxl r,lxl x,lxl y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)<span class="keyword">return</span> <span class="built_in">std</span>::make_pair(num[t],tim[t]);</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(y&lt;=mid)<span class="keyword">return</span> query(c[<span class="number">0</span>][t],l,mid,x,y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x&gt;mid)<span class="keyword">return</span> query(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::pair&lt;lxl,lxl&gt; lp=query(c[<span class="number">0</span>][t],l,mid,x,y),rp=query(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y);</span><br><span class="line"><span class="keyword">if</span>(lp.first==rp.first)lp.second+=rp.second;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span>(lp.second&gt;rp.second)lp.second-=rp.second;</span><br><span class="line"><span class="keyword">else</span> lp.first=rp.first,lp.second=rp.second-lp.second;</span><br><span class="line"><span class="keyword">return</span> lp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;num[t]=k,tim[t]=<span class="number">1</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)modify(c[<span class="number">0</span>][t],l,mid,x,k);</span><br><span class="line"><span class="keyword">else</span> modify(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,k);</span><br><span class="line">PushUp(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> SBT</span><br><span class="line">&#123;</span><br><span class="line">lxl NodeCnt=<span class="number">0</span>;</span><br><span class="line">lxl root[big],rec[big],size[big*<span class="number">3</span>],left[big*<span class="number">3</span>],right[big*<span class="number">3</span>],key[big*<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">LeftRotate</span><span class="params">(lxl &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">k</span><span class="params">(right[t])</span></span>;</span><br><span class="line">right[t]=left[k];</span><br><span class="line">left[k]=t;</span><br><span class="line">size[k]=size[t];</span><br><span class="line">size[t]=size[left[t]]+size[right[t]]+<span class="number">1</span>;</span><br><span class="line">t=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">RightRotate</span><span class="params">(lxl &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">k</span><span class="params">(left[t])</span></span>;</span><br><span class="line">left[t]=right[k];</span><br><span class="line">right[k]=t;</span><br><span class="line">size[k]=size[t];</span><br><span class="line">size[t]=size[left[t]]+size[right[t]]+<span class="number">1</span>;</span><br><span class="line">t=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(lxl &amp;t,<span class="keyword">bool</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(size[left[left[t]]]&gt;size[right[t]])RightRotate(t);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(size[right[left[t]]]&gt;size[right[t]])</span><br><span class="line">LeftRotate(left[t]),RightRotate(t);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(size[right[right[t]]]&gt;size[left[t]])LeftRotate(t);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(size[left[right[t]]]&gt;size[left[t]])</span><br><span class="line">RightRotate(right[t]),LeftRotate(t);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">maintain(left[t],<span class="literal">false</span>),maintain(right[t],<span class="literal">true</span>);</span><br><span class="line">maintain(t,<span class="literal">true</span>),maintain(t,<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(lxl &amp;t,lxl val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// debugi(rec[0]),debugi(rec[rec[0]]);</span></span><br><span class="line"><span class="keyword">if</span>(rec[<span class="number">0</span>])t=rec[rec[<span class="number">0</span>]--];</span><br><span class="line"><span class="keyword">else</span> t=++NodeCnt;</span><br><span class="line">key[t]=val,size[t]=<span class="number">1</span>,left[t]=right[t]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">++size[t];</span><br><span class="line"><span class="keyword">if</span>(val&lt;key[t])insert(left[t],val);</span><br><span class="line"><span class="keyword">else</span> insert(right[t],val);</span><br><span class="line">maintain(t,val&gt;=key[t]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">erase</span><span class="params">(lxl &amp;t,lxl val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">tmp</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">--size[t];</span><br><span class="line"><span class="keyword">if</span>(val==key[t]||(val&lt;key[t])&amp;&amp;(!left[t])||(val&gt;key[t])&amp;&amp;(!right[t]))</span><br><span class="line">&#123;</span><br><span class="line">tmp=key[t],rec[++rec[<span class="number">0</span>]]=t;</span><br><span class="line"><span class="keyword">if</span>(!left[t]||!right[t])t=left[t]+right[t];</span><br><span class="line"><span class="keyword">else</span> key[t]=erase(left[t],key[t]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(val&lt;key[t])<span class="keyword">return</span> erase(left[t],val);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> erase(right[t],val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">rank</span><span class="params">(lxl &amp;t,lxl val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(val&lt;=key[t])<span class="keyword">return</span> rank(left[t],val);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> size[left[t]]+<span class="number">1</span>+rank(right[t],val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">find</span><span class="params">(lxl &amp;t,lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==size[left[t]]+<span class="number">1</span>)<span class="keyword">return</span> key[t];</span><br><span class="line"><span class="keyword">if</span>(x&lt;=size[left[t]])<span class="keyword">return</span> find(left[t],x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> find(right[t],x<span class="number">-1</span>-size[left[t]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">pre</span><span class="params">(lxl &amp;t,lxl val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl tmp;</span><br><span class="line"><span class="keyword">if</span>(!t)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(val&lt;key[t])<span class="keyword">return</span> pre(left[t],val);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">tmp=pre(right[t],val);</span><br><span class="line"><span class="keyword">if</span>(!(~tmp))tmp=key[t];</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">aft</span><span class="params">(lxl &amp;t,lxl val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl tmp;</span><br><span class="line"><span class="keyword">if</span>(!t)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(val&gt;key[t])<span class="keyword">return</span> aft(right[t],val);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">tmp=aft(left[t],val);</span><br><span class="line"><span class="keyword">if</span>(!(~tmp))tmp=key[t];</span><br><span class="line"> <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">get</span><span class="params">(lxl l,lxl r,lxl id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// debugi(l);</span></span><br><span class="line">l=aft(root[id],l),r=pre(root[id],r);</span><br><span class="line"><span class="comment">// debugi(l),debugi(r),debugi(id);</span></span><br><span class="line"><span class="comment">// debugi(root[5]),debugi(key[5]);</span></span><br><span class="line"><span class="comment">// debugi(left[5]),debugi(right[5]);</span></span><br><span class="line"><span class="comment">// debugi(l),debugi(r),debugi(id);</span></span><br><span class="line">l=rank(root[id],l),r=rank(root[id],r);</span><br><span class="line"><span class="keyword">return</span> r-l+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"P3765_9.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"test.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">double</span> st=clock();</span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;big;++i)SBT::insert(SBT::root[i],-INF),SBT::insert(SBT::root[i],INF);</span></span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">SBT::insert(SBT::root[a[i]=read()],i);</span><br><span class="line">SegmentTree::BuildTree(SegmentTree::root,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;cnt+=k,++i)</span><br><span class="line">&#123;</span><br><span class="line">l=read(),r=read(),s=read(),k=read();</span><br><span class="line"><span class="keyword">if</span>(cnt+k&gt;big)cnt=<span class="number">0</span>,<span class="built_in">memset</span>(change,<span class="number">0</span>,<span class="keyword">sizeof</span> change);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=k;change[cnt+j]=read(),++j);</span><br><span class="line">lxl sroot=SegmentTree::root,now=SegmentTree::query(sroot,<span class="number">1</span>,n,l,r).first;</span><br><span class="line">lxl times=SBT::get(l,r,now);</span><br><span class="line"><span class="keyword">if</span>(times+times&lt;=r-l+<span class="number">1</span>)now=s;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,now);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=k;++j)</span><br><span class="line">SegmentTree::modify(sroot,<span class="number">1</span>,n,change[cnt+j],now)</span><br><span class="line">,SBT::erase(SBT::root[a[change[cnt+j]]],change[cnt+j])</span><br><span class="line">,SBT::insert(SBT::root[now],change[cnt+j]),a[change[cnt+j]]=now;</span><br><span class="line">&#125;</span><br><span class="line">lxl last=SegmentTree::query(SegmentTree::root,<span class="number">1</span>,n,<span class="number">1</span>,n).first,times=SBT::get(<span class="number">1</span>,n,last);</span><br><span class="line"><span class="keyword">if</span>(times+times&lt;=n)<span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,last);</span><br><span class="line"><span class="keyword">double</span> ed=clock();<span class="built_in">printf</span>(<span class="string">"using time:%lfms\n"</span>,ed-st);</span><br><span class="line"><span class="comment">// debugi(rcnt);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:线段树维护出信息后平衡树判断合法&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/数据结构/"/>
    
    <category term="数据结构-线段树" scheme="https://www.lemir3.red/categories/数据结构/数据结构-线段树/"/>
    
    <category term="数据结构-平衡树" scheme="https://www.lemir3.red/categories/数据结构/数据结构-线段树/数据结构-平衡树/"/>
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="线段树" scheme="https://www.lemir3.red/tags/线段树/"/>
    
    <category term="平衡树" scheme="https://www.lemir3.red/tags/平衡树/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」CF437D The Child and Zoo</title>
    <link href="https://www.lemir3.red/2020/09/12/jie-ti-bao-gao-cf437d-the-child-and-zoo/"/>
    <id>https://www.lemir3.red/2020/09/12/jie-ti-bao-gao-cf437d-the-child-and-zoo/</id>
    <published>2020-09-12T09:00:26.000Z</published>
    <updated>2020-09-12T09:18:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:建最大生成树中考虑贡献</p><a id="more"></a><h1 id="CF437D-The-Child-and-Zoo"><a href="#CF437D-The-Child-and-Zoo" class="headerlink" title="CF437D The Child and Zoo"></a>CF437D The Child and Zoo</h1><p><a href="http://codeforces.com/problemset/problem/437/D" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题意相当于是一张点权图,对于任意一对点$(u,v)$,选择一条经过的点中$\min\{a_i\}$最大的路径,设这个值为$f(u,v)$,求:</p><script type="math/tex; mode=display">\frac{\sum_{u,v\in V,u \neq v}f(u,v)}{n(n-1)}</script><p>如果是边权图的话反证法易证得点对间的这条路径一定在最大生成树中.</p><p>点权图做一个转化,将边权赋为连接的两个点中权值较小的那一个,因为选这条边就一定经过这两个点.</p><p>将边按边权单减排序,考虑kruskal算法的过程,我们加入一条新边时,经过这条边两边的连通块的路径均会以这条边作为最小值,所以可以直接统计贡献.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl n,m,ConCnt;</span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line">lxl val[big],fa[big],size[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl u,v,w;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Edge &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> w&gt;another.w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;e[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">find</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">return</span> x==fa[x]?x:find(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(size[y]&gt;size[x])size[y]+=size[x],fa[x]=y;</span><br><span class="line"><span class="keyword">else</span> size[x]+=size[y],fa[y]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;val[i]=read(),fa[i]=i,size[i]=<span class="number">1</span>,++i);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read(),w=<span class="built_in">std</span>::min(val[u],val[v]);</span><br><span class="line">e[i]=(_Edge)&#123;u,v,w&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::sort(e+<span class="number">1</span>,e+<span class="number">1</span>+m);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl x=e[i].u,y=e[i].v,w=e[i].w;</span><br><span class="line">lxl FaX=find(x),FaY=find(y);</span><br><span class="line"><span class="keyword">if</span>(FaX!=FaY)</span><br><span class="line">&#123;</span><br><span class="line">ans+=size[FaX]*size[FaY]*w;</span><br><span class="line">merge(FaX,FaY);</span><br><span class="line"><span class="keyword">if</span>(++ConCnt==n<span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,<span class="number">2</span>*ans/(<span class="keyword">double</span>)(n*(n<span class="number">-1</span>)));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:建最大生成树中考虑贡献&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="图论-生成树" scheme="https://www.lemir3.red/categories/图论/图论-生成树/"/>
    
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="生成树" scheme="https://www.lemir3.red/tags/生成树/"/>
    
  </entry>
  
  <entry>
    <title>「总结」09122020机房赛</title>
    <link href="https://www.lemir3.red/2020/09/12/zong-jie-09122020-ji-fang-sai/"/>
    <id>https://www.lemir3.red/2020/09/12/zong-jie-09122020-ji-fang-sai/</id>
    <published>2020-09-12T07:03:41.000Z</published>
    <updated>2020-09-12T07:13:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:出了场水赛拿给机房神仙做 /kk</p><a id="more"></a><h1 id="09122020机房赛"><a href="#09122020机房赛" class="headerlink" title="09122020机房赛"></a>09122020机房赛</h1><p>说是赛后总结其实赛前就写了.</p><p>话说出题人能不能参赛混一波rating啊 (笑)</p><h1 id="T1-「MZOI2020」快速班号变换"><a href="#T1-「MZOI2020」快速班号变换" class="headerlink" title="T1 「MZOI2020」快速班号变换"></a>T1 「MZOI2020」快速班号变换</h1><h2 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h2><p>忘了说明数字不能重复变换实在是抱歉.</p><p>被syc猜中是dp了,预言题目做法程度的能力吗…</p><p>想着是t1所以数据放了点水,反正本来定位就是个签到题.</p><p>正解$O(n^2)$的dp,但是$n \leq 1000$的数据$O(n^2logn)$的诡异做法应该也能过了.</p><p>样例很草生但愿你们不要考场上笑出来.</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>设计状态$f_{i,j}$表示仅考虑字符串$a$的前$i$位和字符串$b$的前$j$位完成变换的最小花费.</p><p>那么转移其实就很显然:</p><script type="math/tex; mode=display">f_{i,j}=\min(f_{i-1,j}+a,f_{i,j-1}+b,f_{i-1,j-1}+LeeDistance)</script><p>分别表示在这个位置删除一个数,插入一个数,替换一个数.</p><p>分别讲一下,删除当前数,就从$f_{i-1,j}$这个状态转移,相当于这个位置作废不计,加上转移的花费.</p><p>插入一个数同理.</p><p>替换数的话就从$f_{i-1,j-1}$这个状态转移,直接加上让两个字符串下一位相等的花费即可,这个花费即为替换需要的李距离.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>见下发文件.</p><h1 id="T2-「MZOI2020」魔导书"><a href="#T2-「MZOI2020」魔导书" class="headerlink" title="T2 「MZOI2020」魔导书"></a>T2 「MZOI2020」魔导书</h1><h2 id="杂谈-1"><a href="#杂谈-1" class="headerlink" title="杂谈"></a>杂谈</h2><p>这个题之前自己都只有状压思路而且这个状压写起来特别鬼怪.</p><p>这周一早上把题发给绵实机房他们证出来可以贪心,然后我中午回去想了想把贪心过程做成了数据结构.</p><p>所以搜索就没给分,把状压调到了最低档,希望康康蛙能给出奇怪的搜索做法.</p><p>其实有个强一点的样例,不过在我笔记本上所以就用了原先的一个.</p><p><a href="https://www.tv-tokyo.co.jp/anime/dantalian/index.html/" target="_blank" rel="noopener">关于模数</a>.</p><h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="solution0"><a href="#solution0" class="headerlink" title="solution0"></a>solution0</h3><p>这题好不可做啊！交个$ans=\sum_{i=1}^{n}a_i$跑路吧.</p><p>期望得分0.</p><h3 id="solution1"><a href="#solution1" class="headerlink" title="solution1"></a>solution1</h3><p>写个诡异的状压,因为可以确定的是对于每一个书的集合都有一种最优情况来放,记录当前书堆在最优情况下最多还能放几本即可.</p><p>期望得分30.</p><h3 id="solution2"><a href="#solution2" class="headerlink" title="solution2"></a>solution2</h3><p>首先有一个贪心的模型:如果放了一本书在最底层,只用再在下面加上一本$b$比它大的书,状态仍然合法,但答案更优.</p><p>所以把能放书最多的书$i$放上去,然后把剩下的书$j$的$b[j]$改成$\min(b[j],b[i]-1)$,然后按$b$为第一关键字排序,$a$为第二关键字排序,找到第一个,一直循环即可.</p><p>期望得分60.</p><p>另外这里的$a_i \leq 10^3$只是拿来唬人的不会真的有人去想吧 (</p><h3 id="solution3"><a href="#solution3" class="headerlink" title="solution3"></a>solution3</h3><p><strong>solution2</strong>修改的过程考虑使用数据结构维护,把$b_i$相同的书放在一个堆,堆内维护$a$,因为每次是取最大的$b$,所以$\min(b[i],maxb-1)$这个操作仅会影响最大的$b$对应的堆,然后这个堆的$b$改变到和第二大的相同了就合并这两个堆.</p><p>不断地取出最大的$b$对应的堆的堆顶,再合并即可.</p><p>所以需要用到一种支持合并的堆,std用到了左偏树,<a href="https://oi-wiki.org/ds/leftist-tree/" target="_blank" rel="noopener">参考</a>.</p><p>期望得分100.</p><h3 id="solution4"><a href="#solution4" class="headerlink" title="solution4"></a>solution4</h3><p>赛后才知道把$b$序列排序后倒着插入一个普通的堆就能做了,因为在合并之前在最大值之前的$b$是无效的,所以在减到的时候再插入就可以了…</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p>见下发文件.</p><h1 id="T3-「MZOI2020」遗传因子"><a href="#T3-「MZOI2020」遗传因子" class="headerlink" title="T3 「MZOI2020」遗传因子"></a>T3 「MZOI2020」遗传因子</h1><h2 id="杂谈-2"><a href="#杂谈-2" class="headerlink" title="杂谈"></a>杂谈</h2><p>周五早上lyc把”橙队”打成”成对”我还以为泄题了 (</p><p>数据可能有点水,因为要让串长尽量长短不一产生答案.</p><p>第一档分防爆零,不过先为大王默哀三秒…</p><h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先我们将模型简化一下,将$|p|+|q|$视为$1$来做.</p><p>那就是求字符串集中一个串作为其他串的子串出现的次数.</p><p>考虑使用<code>AC自动机</code>解决这个问题,由<code>AC自动机</code>的性质可得,trie树上的一个点对应一个串的前缀,反构的fail树上的一个点对应了后缀的关系,也就是一个点的父亲代表的节点都是它的后缀.</p><p>先在反构的fail树上进行一次递归,求得一个点的父亲中有多少个点有end标记,存入cnt数组.</p><p>然后在trie树上进行递归,递归地累加上之前求得的cnt数组,到有end标记的点就加进答案,就求出了一个点的前缀中包含了多少个有end标记的后缀,就是这个点代表的串包含的其他子串的出现个数了.</p><p>注意这里说的是出现次数,比如串aa在串aaabb中出现了2次.</p><p>然后考虑算上$|p|+|q|$怎么更新答案,发现就是两个串长度的差值,所以我们在记录cnt时,顺带记录一个有end标记的点的长度和leng,然后递归trie树时同样发生累加,更新答案时用当前串的长度乘上包含的子串的出现个数减去累加得的长度和即可.</p><p>期望得分100.</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><p>见下发文件.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:出了场水赛拿给机房神仙做 /kk&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.lemir3.red/categories/总结/"/>
    
    
    <category term="总结" scheme="https://www.lemir3.red/tags/总结/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」「PA2014」Kuglarz</title>
    <link href="https://www.lemir3.red/2020/09/11/jie-ti-bao-gao-pa2014-kuglarz/"/>
    <id>https://www.lemir3.red/2020/09/11/jie-ti-bao-gao-pa2014-kuglarz/</id>
    <published>2020-09-11T09:19:39.000Z</published>
    <updated>2020-09-11T23:27:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:生成树模型转化</p><a id="more"></a><h1 id="「PA2014」Kuglarz"><a href="#「PA2014」Kuglarz" class="headerlink" title="「PA2014」Kuglarz"></a>「PA2014」Kuglarz</h1><p><a href="https://www.luogu.com.cn/problem/P5994" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>给出了部分和关系,可以考虑转化成前缀和关系来做.</p><p>也就是设每个位置藏球数量的前缀和奇偶性为$f_i$,那么确定所有藏球的情况必须要确定所有$f_i$才行.</p><p>那么对于一次询问$(i,j)$,相当于确定了$f_{i-1}$和$f_j$的关系(异或),已知一个就可以推出另一个.</p><p>又因为我们已知$f_0$的奇偶性,所以只要将每一个询问进行连边,建出的生成树就可以推出所有$f_i$了.</p><p>求得的最小生成树的权值和即为答案.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">2010</span>;</span><br><span class="line">lxl n,EdgeSize,ans,ConCnt;</span><br><span class="line">lxl fa[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl u,v,w;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Edge &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> w&lt;another.w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;e[big*big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">find</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">return</span> x==fa[x]?x:fa[x]=find(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;=n;fa[i]=i,++i);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(i);j&lt;=n;++j)</span><br><span class="line">&#123;</span><br><span class="line">lxl w=read();</span><br><span class="line">e[++EdgeSize]=(_Edge)&#123;i<span class="number">-1</span>,j,w&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::sort(e+<span class="number">1</span>,e+<span class="number">1</span>+EdgeSize);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=EdgeSize;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl x=e[i].u,y=e[i].v,w=e[i].w;</span><br><span class="line">lxl fax=find(x),fay=find(y);</span><br><span class="line"><span class="keyword">if</span>(fax!=fay)</span><br><span class="line">&#123;</span><br><span class="line">fa[fax]=fay,ans+=w;</span><br><span class="line"><span class="keyword">if</span>(++ConCnt==n)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:生成树模型转化&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="图论-生成树" scheme="https://www.lemir3.red/categories/图论/图论-生成树/"/>
    
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="生成树" scheme="https://www.lemir3.red/tags/生成树/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」「六省联考2017」期末考试</title>
    <link href="https://www.lemir3.red/2020/09/10/jie-ti-bao-gao-liu-sheng-lian-kao-2017-qi-mo-kao-shi/"/>
    <id>https://www.lemir3.red/2020/09/10/jie-ti-bao-gao-liu-sheng-lian-kao-2017-qi-mo-kao-shi/</id>
    <published>2020-09-10T01:05:48.000Z</published>
    <updated>2020-09-10T01:15:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:转化性质进行贪心</p><a id="more"></a><h1 id="「六省联考2017」期末考试"><a href="#「六省联考2017」期末考试" class="headerlink" title="「六省联考2017」期末考试"></a>「六省联考2017」期末考试</h1><p><a href="https://www.luogu.com.cn/problem/P3745" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>看到这个问题在稿纸上写了两点思路:</p><ul><li>已知每个学生的安格瑞程度仅与最后一科出成绩的有关.</li><li>枚举最后出成绩在那一天.</li></ul><p>考虑枚举最后出成绩在那一天如何实现,显然我们需要把出成绩在那一天之后的全部操作到在这一天之前.</p><p>用前缀和处理一下出成绩的原始时间,得出比某一天大和比某一天小的数目.</p><p>进行操作时,若$B&lt;A$,那么用$B$操作肯定更优,全部都用$B$操作即可.</p><p>不然,则在能够使用的范围内用$A$操作,剩下的用$B$操作,能够使用的范围即为比这一天大的值的数目和比这一天小的值的数目的最小值,剩下的用$B$操作的就是比这一天大的数目减去比这一天小的数目与0取较大值.</p><p>然后对于每个时间更新答案即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl A,B,C,n,m,ans;</span><br><span class="line">lxl t[big],b[big],pret[big],preb[big],nxtb[big],prek[big],nxtk[big],sum[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A=read(),B=read(),C=read();</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)t[i]=read(),++pret[t[i]];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)b[i]=read(),++preb[b[i]],++nxtb[b[i]];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;big;++i)pret[i]+=pret[i<span class="number">-1</span>],sum[i]=sum[i<span class="number">-1</span>]+pret[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;big;++i)prek[i]=prek[i<span class="number">-1</span>]+preb[i<span class="number">-1</span>],preb[i]+=preb[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(big<span class="number">-2</span>);i;--i)nxtk[i]=nxtk[i+<span class="number">1</span>]+nxtb[i+<span class="number">1</span>],nxtb[i]+=nxtb[i+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;big;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl tmp=C*sum[i];</span><br><span class="line"><span class="keyword">if</span>(tmp&gt;ans&amp;&amp;ans)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(A&lt;B)tmp+=<span class="built_in">std</span>::min(nxtk[i],prek[i])*A,nxtk[i]-=prek[i],tmp+=<span class="built_in">std</span>::max((lxl)<span class="number">0</span>,nxtk[i])*B;</span><br><span class="line"><span class="keyword">else</span> tmp+=nxtk[i]*B;</span><br><span class="line"><span class="keyword">if</span>(!ans)ans=tmp;</span><br><span class="line">ans=<span class="built_in">std</span>::min(ans,tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:转化性质进行贪心&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://www.lemir3.red/categories/其他/"/>
    
    <category term="其他-贪心" scheme="https://www.lemir3.red/categories/其他/其他-贪心/"/>
    
    
    <category term="贪心" scheme="https://www.lemir3.red/tags/贪心/"/>
    
    <category term="其他" scheme="https://www.lemir3.red/tags/其他/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」CF962F Simple Cycles Edges</title>
    <link href="https://www.lemir3.red/2020/09/09/jie-ti-bao-gao-cf962f-simple-cycles-edges/"/>
    <id>https://www.lemir3.red/2020/09/09/jie-ti-bao-gao-cf962f-simple-cycles-edges/</id>
    <published>2020-09-09T11:52:46.000Z</published>
    <updated>2020-09-09T12:07:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:树上差分解决简单环覆盖问题</p><a id="more"></a><h1 id="CF962F-Simple-Cycles-Edges"><a href="#CF962F-Simple-Cycles-Edges" class="headerlink" title="CF962F Simple Cycles Edges"></a>CF962F Simple Cycles Edges</h1><p><a href="http://codeforces.com/problemset/problem/962/F" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题意很简单,求仅在一个简单环中出现的边.</p><p>首先我们知道,对于两个相交的环,它们可以形成一个大环.</p><p>所以说答案边肯定不能在两个环中同时出现,这启发我们考虑每个简单环覆盖的边.</p><p>用原图的边集产生一颗生成树,那么加入一条非树边就会产生一个简单环,这是显然的.</p><p>那么对于这个简单环,我们可以简单地使用树上差分来覆盖环上每一条边,这里考虑到代码实现,将边被覆盖的次数转化到了边连向的点上,因为根据树的性质一个点的入度为$1$,可以很好地代表这条边.</p><p>最后判断并统计每条非树边形成的环是否覆盖次数都为$1$即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl n,m,EdgeSize,cnt;</span><br><span class="line">lxl head[big],cf[big],vis[big],depth[big],top[big],fa[big],son[big],size[big],ans[big],faid[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl u,v,next,mark,cnt;</span><br><span class="line">&#125;e[big&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;lxl,lxl&gt; &gt;<span class="built_in">map</span>[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v) EdgeAdd(u,v),EdgeAdd(v,u)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize].u=u;</span><br><span class="line">e[EdgeSize].v=v;</span><br><span class="line">e[EdgeSize].next=head[u];</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(lxl u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(vis[v])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">map</span>[u].push_back(<span class="built_in">std</span>::make_pair(v,i)),e[i].mark=e[i^<span class="number">1</span>].mark=<span class="literal">true</span>;</span><br><span class="line">dfs1(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(lxl u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=<span class="built_in">map</span>[u].begin();it!=<span class="built_in">map</span>[u].end();++it)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=it-&gt;first;</span><br><span class="line">dfs2(v);</span><br><span class="line">cf[u]+=cf[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> _1dfs(lxl u,lxl father,lxl from)</span><br><span class="line">&#123;</span><br><span class="line">depth[u]=depth[father]+<span class="number">1</span>,fa[u]=father,faid[u]=from;</span><br><span class="line">size[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=<span class="built_in">map</span>[u].begin();it!=<span class="built_in">map</span>[u].end();++it)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=it-&gt;first;</span><br><span class="line"><span class="keyword">if</span>(v==father)<span class="keyword">continue</span>;</span><br><span class="line">_1dfs(v,u,it-&gt;second);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(size[son[u]]&lt;size[v])son[u]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> _2dfs(lxl u,lxl _top)</span><br><span class="line">&#123;</span><br><span class="line">top[u]=_top;</span><br><span class="line"><span class="keyword">if</span>(son[u])_2dfs(son[u],_top);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=<span class="built_in">map</span>[u].begin();it!=<span class="built_in">map</span>[u].end();++it)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=it-&gt;first;</span><br><span class="line"><span class="keyword">if</span>(v==fa[u]||v==son[u])<span class="keyword">continue</span>;</span><br><span class="line">_2dfs(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">GetLCA</span><span class="params">(lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])<span class="built_in">std</span>::swap(x,y);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(depth[x]&gt;depth[y])<span class="built_in">std</span>::swap(x,y);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read();</span><br><span class="line">add(u,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="keyword">if</span>(!vis[i])dfs1(i);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="keyword">if</span>(!depth[i])_1dfs(i,<span class="number">0</span>,<span class="number">0</span>),_2dfs(i,i);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl edge=(i<span class="number">-1</span>)*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(e[edge].mark)<span class="keyword">continue</span>;</span><br><span class="line">lxl u_=e[edge].u,v_=e[edge].v,lca=GetLCA(u_,v_);</span><br><span class="line">++cf[u_],++cf[v_],cf[lca]-=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="keyword">if</span>(!vis[i])dfs2(i);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl edge=(i<span class="number">-1</span>)*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(e[edge].mark)<span class="keyword">continue</span>;</span><br><span class="line">lxl flag(0),u_=e[edge].u,v_=e[edge].v,lca=GetLCA(u_,v_);</span><br><span class="line"><span class="function">lxl <span class="title">tmp</span><span class="params">(u_)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(tmp!=lca)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cf[tmp]!=<span class="number">1</span>)&#123;flag=<span class="number">1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">tmp=fa[tmp];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line">&#123;</span><br><span class="line">tmp=v_;</span><br><span class="line"><span class="keyword">while</span>(tmp!=lca)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cf[tmp]!=<span class="number">1</span>)&#123;flag=<span class="number">1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">tmp=fa[tmp];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line">&#123;</span><br><span class="line">ans[i]=<span class="literal">true</span>,++cnt;</span><br><span class="line">tmp=u_;</span><br><span class="line"><span class="keyword">while</span>(tmp!=lca)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!(faid[tmp]&amp;<span class="number">1</span>))++faid[tmp];</span><br><span class="line">ans[(faid[tmp]+<span class="number">1</span>)/<span class="number">2</span>]=<span class="literal">true</span>,++cnt;</span><br><span class="line">tmp=fa[tmp];</span><br><span class="line">&#125;</span><br><span class="line">tmp=v_;</span><br><span class="line"><span class="keyword">while</span>(tmp!=lca)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!(faid[tmp]&amp;<span class="number">1</span>))++faid[tmp];</span><br><span class="line">ans[(faid[tmp]+<span class="number">1</span>)/<span class="number">2</span>]=<span class="literal">true</span>,++cnt;</span><br><span class="line">tmp=fa[tmp];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,cnt);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)<span class="keyword">if</span>(ans[i])<span class="built_in">printf</span>(<span class="string">"%lld "</span>,i);<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:树上差分解决简单环覆盖问题&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="树链剖分" scheme="https://www.lemir3.red/categories/图论/树链剖分/"/>
    
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="树链剖分" scheme="https://www.lemir3.red/tags/树链剖分/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」「SNOI2017」炸弹</title>
    <link href="https://www.lemir3.red/2020/09/09/jie-ti-bao-gao-snoi2017-zha-dan/"/>
    <id>https://www.lemir3.red/2020/09/09/jie-ti-bao-gao-snoi2017-zha-dan/</id>
    <published>2020-09-09T08:04:20.000Z</published>
    <updated>2020-09-09T08:16:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:线段树建图后跑tarjan</p><a id="more"></a><h1 id="「SNOI2017」炸弹"><a href="#「SNOI2017」炸弹" class="headerlink" title="「SNOI2017」炸弹"></a>「SNOI2017」炸弹</h1><p><a href="https://loj.ac/problem/2255" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>图论的模型应该很好建出来,对爆炸后能够波及到的炸弹连边,那么选定一个炸弹进行爆炸能够引爆的总个数即为强联通分量的大小,用tarjan跑一下即可.</p><p>但是这个值域太大了无法直接建图,考虑使用线段树来建图,也就是一个点连向线段树上的节点.</p><p>显然线段树是建在点集上,父亲向两个儿子连边,还要记录一下原序列上的点对应树上的节点.</p><p>二分求出每个炸弹爆炸后最左最右能够波及到的点,然后将序列上的点对应在树上的点向这个区间连边,就是向线段树上将大区间拆分出来的几个代表小区间的树上节点连边.</p><p>然后用tarjan跑出强联通分量,记录一下分量内部的点在原序列上代表的最左和最右的位置即可,最后再dfs更新一遍.</p><p>注意树上的点都是代表原序列的一段区间的,所以要记录这段区间的左右端点.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 4557430888798830399</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">500010</span>,mod=<span class="number">1000000007</span>;</span><br><span class="line">lxl n,m,NodeCnt,TimeCnt,root,SccCnt,ans;</span><br><span class="line">lxl c[<span class="number">2</span>][big&lt;&lt;<span class="number">2</span>],dfn[big&lt;&lt;<span class="number">2</span>],scc[big&lt;&lt;<span class="number">2</span>],low[big&lt;&lt;<span class="number">2</span>],left[big&lt;&lt;<span class="number">2</span>],right[big&lt;&lt;<span class="number">2</span>],head[big&lt;&lt;<span class="number">2</span>],vis[big&lt;&lt;<span class="number">2</span>],id[big];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x[big],r[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl l,r;</span><br><span class="line">&#125;a[big&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;lxl&gt;<span class="built_in">map</span>[big&lt;&lt;<span class="number">2</span>],e[big&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">stack</span>&lt;lxl&gt;s;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">long long f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[u].push_back(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl y,lxl u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(u!=t)EdgeAdd(u,t);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)add(c[<span class="number">0</span>][t],l,mid,x,y,u);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid)add(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(lxl &amp;t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t)t=++NodeCnt;</span><br><span class="line">a[t].l=l,a[t].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;id[l]=t;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">BuildTree(c[<span class="number">0</span>][t],l,mid),BuildTree(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r);</span><br><span class="line">EdgeAdd(t,c[<span class="number">0</span>][t]),EdgeAdd(t,c[<span class="number">1</span>][t]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(lxl u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfn[u]=low[u]=++TimeCnt;</span><br><span class="line">s.push(u),vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=e[u].begin();it!=e[u].end();++it)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=*it;</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])tarjan(v),low[u]=<span class="built_in">std</span>::min(low[u],low[v]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(vis[v])low[u]=<span class="built_in">std</span>::min(low[u],dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dfn[u]==low[u])</span><br><span class="line">&#123;</span><br><span class="line">++SccCnt;</span><br><span class="line"><span class="keyword">while</span>(!s.empty())</span><br><span class="line">&#123;</span><br><span class="line">lxl ki43=s.top();s.pop();</span><br><span class="line">scc[ki43]=SccCnt,vis[ki43]=<span class="literal">false</span>;</span><br><span class="line">left[SccCnt]=<span class="built_in">std</span>::min(left[SccCnt],a[ki43].l);</span><br><span class="line">right[SccCnt]=<span class="built_in">std</span>::max(right[SccCnt],a[ki43].r);</span><br><span class="line"><span class="keyword">if</span>(ki43==u)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(lxl u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=<span class="built_in">map</span>[u].begin();it!=<span class="built_in">map</span>[u].end();++it)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=*it;</span><br><span class="line"><span class="keyword">if</span>(vis[v])</span><br><span class="line">&#123;</span><br><span class="line">left[u]=<span class="built_in">std</span>::min(left[u],left[v]);</span><br><span class="line">right[u]=<span class="built_in">std</span>::max(right[u],right[v]);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs(v);</span><br><span class="line">left[u]=<span class="built_in">std</span>::min(left[u],left[v]);</span><br><span class="line">right[u]=<span class="built_in">std</span>::max(right[u],right[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">query</span><span class="params">(lxl i)</span></span>&#123;<span class="keyword">return</span> right[scc[id[i]]]-left[scc[id[i]]]+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head),<span class="built_in">memset</span>(left,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> left);</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,x+i,r+i);</span><br><span class="line">x[n+<span class="number">1</span>]=INF;</span><br><span class="line">BuildTree(root,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!r[i])<span class="keyword">continue</span>;</span><br><span class="line">lxl l_=<span class="built_in">std</span>::lower_bound(x+<span class="number">1</span>,x+<span class="number">1</span>+n,x[i]-r[i])-x;</span><br><span class="line">lxl r_=<span class="built_in">std</span>::upper_bound(x+<span class="number">1</span>,x+<span class="number">1</span>+n,x[i]+r[i])-x<span class="number">-1</span>;</span><br><span class="line">add(root,<span class="number">1</span>,n,l_,r_,id[i]);</span><br><span class="line">a[id[i]].l=l_,a[id[i]].r=r_;</span><br><span class="line">&#125;</span><br><span class="line">tarjan(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=NodeCnt;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=e[i].begin();it!=e[i].end();++it)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=*it;</span><br><span class="line"><span class="keyword">if</span>(scc[i]!=scc[v])<span class="built_in">map</span>[scc[i]].push_back(scc[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=SccCnt;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::sort(<span class="built_in">map</span>[i].begin(),<span class="built_in">map</span>[i].end());</span><br><span class="line"><span class="built_in">std</span>::unique(<span class="built_in">map</span>[i].begin(),<span class="built_in">map</span>[i].end());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=SccCnt;++i)<span class="keyword">if</span>(!vis[i])dfs(i);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)ans=(ans+(<span class="keyword">long</span> <span class="keyword">long</span>)query(i)*i%mod)%mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:线段树建图后跑tarjan&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="图论-Tarjan" scheme="https://www.lemir3.red/categories/图论/图论-Tarjan/"/>
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/图论/图论-Tarjan/数据结构/"/>
    
    <category term="数据结构-线段树" scheme="https://www.lemir3.red/categories/图论/图论-Tarjan/数据结构/数据结构-线段树/"/>
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="线段树" scheme="https://www.lemir3.red/tags/线段树/"/>
    
    <category term="Tarjan" scheme="https://www.lemir3.red/tags/Tarjan/"/>
    
  </entry>
  
  <entry>
    <title>「总结」09052020机房赛</title>
    <link href="https://www.lemir3.red/2020/09/06/zong-jie-09052020-ji-fang-sai/"/>
    <id>https://www.lemir3.red/2020/09/06/zong-jie-09052020-ji-fang-sai/</id>
    <published>2020-09-06T12:06:38.000Z</published>
    <updated>2020-09-07T00:17:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:周测总结</p><a id="more"></a><h1 id="09052020机房赛"><a href="#09052020机房赛" class="headerlink" title="09052020机房赛"></a>09052020机房赛</h1><p>因为是校内的题所以就不描述题意了.</p><p>看到这套题顿时流下了没有数理基础的眼泪…</p><h2 id="t1"><a href="#t1" class="headerlink" title="t1"></a>t1</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>其实题意提示得很明显了,对于任意一个高斯整数都可以分解成$p^{k1}+p^{k2}+\cdots+p^{kn}~(p=-1-i)$的形式.</p><p>那这不就是把$p$作为进制吗,我竟然这都没看出来,尝试写dp失败后写状压暴力合并拿了50…</p><p>于是我们将给出的数进行$p$进制分解,考虑到$p^0=1$,所以实部和虚部的和为奇数时就说明产生了$p_0$,统计答案.</p><p>需要用到虚数的除法:</p><script type="math/tex; mode=display">\begin{aligned}\frac{x+yi}{-1-i}\\&=\frac{(x+yi)(-1+i)}{(-1-i)(-1+i)}\\&=\frac{(-x-y)+(xi-yi)}{2}\end{aligned}</script><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">210</span>;</span><br><span class="line">lxl x,y,cnt,i;</span><br><span class="line">lxl ans[big];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=read(),y=read();</span><br><span class="line"><span class="keyword">while</span>(x||y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((x+y)&amp;<span class="number">1</span>)ans[++cnt]=i,--x;</span><br><span class="line">lxl nx=(-x-y)/<span class="number">2</span>,ny=(x-y)/<span class="number">2</span>;</span><br><span class="line">x=nx,y=ny;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,cnt);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=cnt;++i)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="t2"><a href="#t2" class="headerlink" title="t2"></a>t2</h2><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>第一眼:这个式子组合数带取模,卢卡斯定理分解一下没跑了.</p><p>但我不会卢卡斯导致这题变得很不可做于是交了个随机数跑路…</p><p>先写下卢卡斯定理:</p><script type="math/tex; mode=display">\binom{n}{m} \mod p=\binom{n \mod p}{m \mod p}\cdot\binom{\lfloor n/p\rfloor}{\lfloor m/p \rfloor}\mod p</script><p>回到题目上,会发现当$a_i\leq2333$时这个取模本质上没啥用.</p><p>也就是说只要组合数的答案不为$0$就可以产生贡献了,也就是$a_{k1}\geq a_{k2}$.</p><p>所以说当$a_i$很小时,写个树状数组统计一下不升子序列即可.</p><p>但是满分数据是保证$0 \leq a_i \leq 2333333$,所以说要在卢卡斯定理中进行考虑.</p><p>发现$n \mod p$和$\lfloor n/p\rfloor$在$n \leq p^2$时相当于是把$n$化成了$p$进制下的两位数,这在本题中恰好合适.</p><p>于是将数列中的每一项分解为$p$进制后再用二维树状数组维护第一位和第二位即可.</p><p>另外吐槽教练在把题面从pdf搬到校内oj时疑似不会打latex组合数所以把组合数写成了括号内的分数…</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl p=<span class="number">2333</span>,mod=<span class="number">1000000007</span>;</span><br><span class="line">lxl n,x,y,ans,del;</span><br><span class="line">lxl t[p+<span class="number">10</span>][p+<span class="number">10</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">query</span><span class="params">(lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">ret</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(x);i;i-=lowbit(i))</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(y);j;j-=lowbit(j))</span><br><span class="line">ret=(ret+t[i][j])%mod;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(lxl x,lxl y,lxl val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(x);i&lt;=p;i+=lowbit(i))</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(y);j&lt;=p;j+=lowbit(j))</span><br><span class="line">t[i][j]=(t[i][j]+val)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">x=read();</span><br><span class="line">lxl ki63=x;</span><br><span class="line">x=x/p,y=ki63%p;</span><br><span class="line">del=query(p-x,p-y);</span><br><span class="line">ans=(ans+del)%mod;</span><br><span class="line">debug(del);</span><br><span class="line">add(p-x,p-y,del+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="t3"><a href="#t3" class="headerlink" title="t3"></a>t3</h2><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>算是个比较套路的dp题,但是打了个$O(2^m)$狂暴跑路.</p><p>设$f_{i,j}$为将点集$j$拆分为$i$个连通块的方案数,那么$f_{1,j}$就为点集$j$联通的方案数.</p><p>先通过输入的边统计一下点集内有多少边,然后考虑$i=1$的转移.</p><p>对于集合$i$的子集$i_0$,由先前的dp已经求得了集合$i-i_0$联通的方案数,那么对于集合$i_0$内的边,因为我们仅统计了集合$i_0$内部的边,仅考虑这些边选任意多条都无法与集合$i-i_0$联通,设集合$i_0$内的连边数量为$p$,那么这些边使得集合$i$不连通的方案数为:</p><script type="math/tex; mode=display">f_{1,i-i_0} \cdot \binom{p}{1} \cdot \binom{p}{2} \cdots \binom{p}{p-1} \cdot \binom{p}{p}=f_{1,i-i_0}\cdot2^p</script><p>用总的方案减去不连通方案即得答案.</p><p>然后考虑$i \geq 2$的转移,考虑集合$j$的子集$j_0$,我们已经求得$f_{i-1,j_0}$,乘上$f_{1,j-j_0}$,也就是让$j_0$的补集联通,单独形成一个连通块,即可.</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl large=<span class="number">1</span>&lt;&lt;<span class="number">16</span>|<span class="number">1</span>,big=<span class="number">15</span>,mod=<span class="number">1000000007</span>;</span><br><span class="line">lxl n,m,k;</span><br><span class="line">lxl f[big][large],c[large],base[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read(),k=read();</span><br><span class="line">lxl all=(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl x=read()<span class="number">-1</span>,y=read()<span class="number">-1</span>;</span><br><span class="line">++c[(<span class="number">1</span>&lt;&lt;x)|(<span class="number">1</span>&lt;&lt;y)];</span><br><span class="line">&#125;</span><br><span class="line">base[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;<span class="number">1010</span>;++i)base[i]=base[i<span class="number">-1</span>]*<span class="number">2</span>%mod;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;n;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;=all;++j)</span><br><span class="line"><span class="keyword">if</span>(j&amp;(<span class="number">1</span>&lt;&lt;i))c[j]+=c[j^(<span class="number">1</span>&lt;&lt;i)];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=all;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl i0=i&amp;(i<span class="number">-1</span>),del(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(i0);j;j=(j<span class="number">-1</span>)&amp;i0)</span><br><span class="line">del=(del+f[<span class="number">1</span>][i^j]*base[c[j]]%mod)%mod;</span><br><span class="line">f[<span class="number">1</span>][i]=(base[c[i]]-del+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=k;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=all;++j)</span><br><span class="line">&#123;</span><br><span class="line">lxl j0=j&amp;(j<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(j&amp;(j<span class="number">-1</span>));k;k=(k<span class="number">-1</span>)&amp;j0)</span><br><span class="line">f[i][j]=(f[i][j]+f[i<span class="number">-1</span>][k]*f[<span class="number">1</span>][j^k]%mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f[k][all]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:周测总结&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.lemir3.red/categories/总结/"/>
    
    
    <category term="总结" scheme="https://www.lemir3.red/tags/总结/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」「HEOI2015」兔子与樱花</title>
    <link href="https://www.lemir3.red/2020/09/04/jie-ti-bao-gao-heoi2015-tu-zi-yu-ying-hua/"/>
    <id>https://www.lemir3.red/2020/09/04/jie-ti-bao-gao-heoi2015-tu-zi-yu-ying-hua/</id>
    <published>2020-09-04T12:33:28.000Z</published>
    <updated>2020-09-04T13:02:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:树上的贪心问题</p><a id="more"></a><h1 id="「HEOI2015」兔子与樱花"><a href="#「HEOI2015」兔子与樱花" class="headerlink" title="「HEOI2015」兔子与樱花"></a>「HEOI2015」兔子与樱花</h1><p><a href="https://loj.ac/problem/2118" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>这个思路有点怪?</p><p>首先我们发现删除一个点的性质,假设这个点的删除是最优的情况,也就是在承重范围内删去了尽量多的点并且承重最小,那么它对于父亲节点来说也具有最优性.</p><p>其实很显然,在删除节点一样的情况下,尽量地让承重小一定是最优的,又因为一个点的儿子节点的删除对这个点的父亲节点仅会使得以后可能的儿子节点变小(就是删除了之后拼上来的儿子),所以尽量要在儿子节点上能删多少就删多少并最优,不然等于浪费了当前剩余的承重.</p><p>还得记录一个值,就是每个节点处理完之后剩下的儿子数,在它的父亲的删除中要考虑上这些之后会拼上来的儿子.</p><p>然后按照儿子节点的樱花数量加上剩下的儿子进行排序,能取多少取多少,并更新当前点的樱花数量和剩下的儿子数.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>洛谷上的空间128mb貌似给小了,bzoj和loj都是256mb(应该就是原题限制了),导致此做法loj和bzoj可过但洛谷上mle一个点,于是用时间换了下空间,开了编译优化.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">2000010</span>;</span><br><span class="line">lxl n,m,EdgeSize;</span><br><span class="line">lxl head[big],f[big],val[big],size[big],ext[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next;</span><br><span class="line">&#125;e[big&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v) EdgeAdd(u,v),EdgeAdd(v,u)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize].v=v;</span><br><span class="line">e[EdgeSize].next=head[u];</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(lxl d1,lxl d2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> val[d1]+ext[d1]&lt;val[d2]+ext[d2];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(lxl u,lxl fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">g</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;lxl&gt;rom;</span><br><span class="line">size[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line">dfs(v,u);</span><br><span class="line">size[u]+=size[v],f[u]+=f[v],++g;</span><br><span class="line">rom.push_back(v);</span><br><span class="line">&#125;</span><br><span class="line">g+=val[u];</span><br><span class="line"><span class="built_in">std</span>::sort(rom.begin(),rom.end(),cmp);</span><br><span class="line"><span class="keyword">auto</span> it=rom.begin();</span><br><span class="line"><span class="keyword">for</span>(;it!=rom.end();++it)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=*it;</span><br><span class="line">lxl add=ext[v]+val[v]<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(g+add&lt;=m)</span><br><span class="line">g+=add,++f[u],val[u]+=val[v],ext[u]+=ext[v];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(;it!=rom.end();++it)++ext[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)val[i]=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl k=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=k;++j)&#123;lxl x=read()+<span class="number">1</span>;add(i,x);&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:树上的贪心问题&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://www.lemir3.red/categories/其他/"/>
    
    <category term="其他-贪心" scheme="https://www.lemir3.red/categories/其他/其他-贪心/"/>
    
    
    <category term="贪心" scheme="https://www.lemir3.red/tags/贪心/"/>
    
    <category term="其他" scheme="https://www.lemir3.red/tags/其他/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」[JSOI2008]火星人</title>
    <link href="https://www.lemir3.red/2020/09/04/jie-ti-bao-gao-jsoi2008-huo-xing-ren/"/>
    <id>https://www.lemir3.red/2020/09/04/jie-ti-bao-gao-jsoi2008-huo-xing-ren/</id>
    <published>2020-09-04T01:54:06.000Z</published>
    <updated>2020-09-04T02:22:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:平衡树维护区间hash</p><a id="more"></a><h1 id="JSOI2008-火星人"><a href="#JSOI2008-火星人" class="headerlink" title="[JSOI2008]火星人"></a>[JSOI2008]火星人</h1><p><a href="https://www.luogu.com.cn/problem/P4036" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>如何比较两个字符串相等,首先是想到用hash.</p><p>所以说要求lcp,只要二分出一个长度,用数据结构取出区间的hash值比较即可.</p><p>考虑维护一个数据结构,支持插入节点,维护区间的hash.</p><p>使用splay,将原序列对应在树上.</p><p>一个区间生成的hash值相当于一个以区间长度为度的多项式的值,根据splay作为区间树性质,一个节点的左子树在序列上都在它的前面,右子树都在它的后面,所以说在合并这个节点的信息时,仅考虑当前节点代表的子树,这个点生成的hash中它这一项应该乘上的base即为左子树的大小,左子树已经处理好的hash值就直接加上,右子树因为考虑上了左子树,要全体乘上左子树大小+1(即加上当前节点),因为乘法分配律所以直接乘上这个右子树处理出的hash的和即可.</p><p>取模好像很麻烦,直接用<code>unsigned long lnog</code>自然溢出即可,查询的时候旋转出对应区间,取这个区间对应的子树的根的hash值就是维护出的hash值了.</p><p>对于插入操作,假设要在序列的位置$k$之后进行操作,根据区间树的性质,树上排名为$k$的点对应在序列的位置$k$上,我们找到排名为$k$的节点$p$和排名为$k+1$的节点$q$,将$p$旋至根,$q$旋至$p$的儿子,这时候$q$的左儿子为空,在左儿子上新建需要插入的节点即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ulxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">200010</span>,mod=<span class="number">233</span>;</span><br><span class="line">lxl m,len,root,NodeCnt;</span><br><span class="line"><span class="keyword">char</span> s[big];</span><br><span class="line">lxl c[<span class="number">2</span>][big],base[big],fa[big],a[big];</span><br><span class="line">ulxl hash[big],size[big],val[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson c[0][t]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson c[1][t]</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(lxl t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ulxl tmp=base[size[lson]]*val[t];</span><br><span class="line">hash[t]=hash[lson]+hash[rson]*base[size[lson]+<span class="number">1</span>]+tmp;</span><br><span class="line">size[t]=size[lson]+size[rson]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl y=fa[x],z=fa[y],d=c[<span class="number">1</span>][y]==x;</span><br><span class="line"><span class="keyword">if</span>(c[<span class="number">1</span>][z]==y)c[<span class="number">1</span>][z]=x;<span class="keyword">else</span> c[<span class="number">0</span>][z]=x;</span><br><span class="line">fa[x]=z,fa[y]=x,fa[c[d^<span class="number">1</span>][x]]=y;</span><br><span class="line">c[d][y]=c[d^<span class="number">1</span>][x],c[d^<span class="number">1</span>][x]=y;</span><br><span class="line">PushUp(y),PushUp(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(lxl x,lxl goal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(fa[x]!=goal)</span><br><span class="line">&#123;</span><br><span class="line">lxl y=fa[x],z=fa[y];</span><br><span class="line"><span class="keyword">if</span>(fa[y]!=goal)rotate((c[<span class="number">0</span>][y]==x)^(c[<span class="number">0</span>][z]==y)?x:y);</span><br><span class="line">rotate(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!goal)root=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(lxl &amp;t,lxl l,lxl r,lxl from)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span>;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(!t)t=++NodeCnt;</span><br><span class="line">fa[t]=from,hash[t]=val[t]=a[mid],size[t]=<span class="number">1</span>;</span><br><span class="line">BuildTree(lson,l,mid<span class="number">-1</span>,t),BuildTree(rson,mid+<span class="number">1</span>,r,t);</span><br><span class="line">PushUp(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">find</span><span class="params">(lxl t,lxl k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(size[lson]+<span class="number">1</span>==k)<span class="keyword">return</span> t;</span><br><span class="line"><span class="keyword">if</span>(size[lson]&gt;=k)<span class="keyword">return</span> find(lson,k);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> find(rson,k<span class="number">-1</span>-size[lson]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(lxl k,ulxl d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl pos1=find(root,k),pos2=find(root,k+<span class="number">1</span>),t=++NodeCnt;</span><br><span class="line">splay(pos1,<span class="number">0</span>),splay(pos2,pos1);</span><br><span class="line">c[<span class="number">0</span>][pos2]=t,fa[t]=pos2;</span><br><span class="line">hash[t]=val[t]=d,size[t]=<span class="number">1</span>;</span><br><span class="line">PushUp(pos2),splay(t,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ulxl <span class="title">spilt</span><span class="params">(lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl x=find(root,l<span class="number">-1</span>),y=find(root,r+<span class="number">1</span>);</span><br><span class="line">splay(x,<span class="number">0</span>),splay(y,x);</span><br><span class="line"><span class="keyword">return</span> hash[c[<span class="number">0</span>][y]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl x,ulxl d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl pos=find(root,x);</span><br><span class="line">splay(pos,<span class="number">0</span>);</span><br><span class="line">val[pos]=d,PushUp(pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(lxl x,lxl y,lxl lim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl l=x,r=x+lim<span class="number">-1</span>;</span><br><span class="line">ulxl val1,val2;</span><br><span class="line">val1=spilt(l,r);</span><br><span class="line">l=y,r=y+lim<span class="number">-1</span>;</span><br><span class="line">val2=spilt(l,r);</span><br><span class="line"><span class="keyword">return</span> val1==val2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl l(1),r(NodeCnt-y),mid,ans=-1;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(check(x,y,mid))ans=mid,l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!(~ans))<span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">base[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;big;++i)base[i]=base[i<span class="number">-1</span>]*mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("data.txt","r",stdin);</span></span><br><span class="line">prework();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=len;++i)a[i+<span class="number">1</span>]=s[i]-<span class="string">'a'</span>+<span class="number">1</span>;</span><br><span class="line">BuildTree(root,<span class="number">1</span>,len+<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> opt[<span class="number">50</span>];<span class="built_in">scanf</span>(<span class="string">"%s"</span>,opt+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">1</span>]==<span class="string">'Q'</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl x=read()+<span class="number">1</span>,y=read()+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&gt;y)<span class="built_in">std</span>::swap(x,y);</span><br><span class="line">query(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt[<span class="number">1</span>]==<span class="string">'R'</span>)</span><br><span class="line">&#123;</span><br><span class="line">ulxl x=read()+<span class="number">1</span>,d;</span><br><span class="line"><span class="keyword">char</span> ch;<span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;ch);</span><br><span class="line">d=ch-<span class="string">'a'</span>+<span class="number">1</span>;</span><br><span class="line">modify(x,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ulxl x=read()+<span class="number">1</span>,d;</span><br><span class="line"><span class="keyword">char</span> ch;<span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;ch);</span><br><span class="line">d=ch-<span class="string">'a'</span>+<span class="number">1</span>;</span><br><span class="line">insert(x,d);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:平衡树维护区间hash&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/数据结构/"/>
    
    <category term="数据结构-平衡树" scheme="https://www.lemir3.red/categories/数据结构/数据结构-平衡树/"/>
    
    <category term="数据结构-平衡树-splay" scheme="https://www.lemir3.red/categories/数据结构/数据结构-平衡树/数据结构-平衡树-splay/"/>
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="平衡树" scheme="https://www.lemir3.red/tags/平衡树/"/>
    
    <category term="splay" scheme="https://www.lemir3.red/tags/splay/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu4198楼房重建</title>
    <link href="https://www.lemir3.red/2020/09/03/jie-ti-bao-gao-luogu4198-lou-fang-chong-jian/"/>
    <id>https://www.lemir3.red/2020/09/03/jie-ti-bao-gao-luogu4198-lou-fang-chong-jian/</id>
    <published>2020-09-03T08:46:56.000Z</published>
    <updated>2020-09-03T09:07:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:线段树维护全局多少位置是前缀最大值</p><a id="more"></a><h1 id="luogu4198楼房重建"><a href="#luogu4198楼房重建" class="headerlink" title="luogu4198楼房重建"></a>luogu4198楼房重建</h1><p><a href="https://www.luogu.com.cn/problem/P4198" target="_blank" rel="noopener">题面</a></p><p>在下午机房外面的走廊一边晒太阳一边想题好舒服啊…</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先显然是先算出楼房顶部的斜率,然后查询有多少位置是前缀最大值.</p><p>至于这个怎么维护,可以使用线段树,节点信息为此节点表示的区间的最大值和<strong>仅考虑该区间</strong>的答案.</p><p>考虑如何向上合并节点信息,明显在合并时左区间已经求得的答案并不会受到影响,因为只有右区间的点会被挡住,分两种情况:</p><ul><li>左区间的最大值大于等于右区间的最大值,这时候答案为左区间的答案.</li><li>左区间的最大值小于右区间的最大值,答案为左区间答案和右区间大于左区间最大值的点的个数.</li></ul><p>右区间大于左区间最大值的点的个数可以递归求得,递归过程也是分两种情况,这里将左区间的最大值视为限制:</p><ul><li>当前递归区间的左区间最大值小于等于限制,那么这个左区间对答案的贡献为0,答案为对右区间进行递归获得的答案.</li><li>当前递归区间的左区间最大值大于限制,那么当前区间的答案为对左区间进行递归获得的答案加上右区间满足限制为左区间最大值的答案.</li></ul><p>为什么是右区间满足限制为左区间最大值呢,因为这个情况下左区间的最大值大于限制,所以对于右区间来说原来的限制就被左区间的最大值取代了.</p><p>因为不知道怎么考虑在左区间的限制下右区间的答案,开始想的是对右区间进行一次同样的递归,限制改为新的限制,但是复杂度明显不对于是拿了50分.</p><p>想了一会后发现因为我们对于一段区间的答案是仅考虑这一段区间的,那么整个区间的答案就包含了左区间的答案和在左区间的限制下的右区间的答案,用整个的答案减掉左区间答案就得到了右区间在左区间限制下的答案.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%Lf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> lbl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl n,m,NodeCnt,root;</span><br><span class="line">lxl c[<span class="number">2</span>][big&lt;&lt;<span class="number">2</span>],sum[big&lt;&lt;<span class="number">2</span>],y[big];</span><br><span class="line">lbl max[big&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">calc</span><span class="params">(lxl t,lxl l,lxl r,lbl limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> max[t]&gt;limit;</span><br><span class="line">lxl lson=c[<span class="number">0</span>][t],rson=c[<span class="number">1</span>][t],chiha(<span class="number">0</span>),mid((l+r)&gt;&gt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(max[lson]&lt;=limit)chiha+=calc(rson,mid+<span class="number">1</span>,r,limit);</span><br><span class="line"><span class="keyword">else</span> chiha+=calc(lson,l,mid,limit)+sum[t]-sum[lson];</span><br><span class="line"><span class="keyword">return</span> chiha;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(lxl t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">max[t]=<span class="built_in">std</span>::max(max[c[<span class="number">0</span>][t]],max[c[<span class="number">1</span>][t]]);</span><br><span class="line"><span class="keyword">if</span>(max[c[<span class="number">1</span>][t]]&lt;=max[c[<span class="number">0</span>][t]])sum[t]=sum[c[<span class="number">0</span>][t]];</span><br><span class="line"><span class="keyword">else</span> sum[t]=sum[c[<span class="number">0</span>][t]]+calc(c[<span class="number">1</span>][t],((l+r)&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>,r,max[c[<span class="number">0</span>][t]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(lxl &amp;t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t)t=++NodeCnt;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">BuildTree(c[<span class="number">0</span>][t],l,mid),BuildTree(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl t,lxl l,lxl r,lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;y[l]=read(),max[t]=(lbl)((lbl)y[l]/(lbl)l),sum[t]=<span class="number">1</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)modify(c[<span class="number">0</span>][t],l,mid,x);</span><br><span class="line"><span class="keyword">else</span> modify(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x);</span><br><span class="line">PushUp(t,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("P4198_2.in","r",stdin);</span></span><br><span class="line"><span class="comment">// freopen("test.out","w",stdout);</span></span><br><span class="line">n=read(),m=read();</span><br><span class="line">BuildTree(root,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl x=read();</span><br><span class="line">modify(root,<span class="number">1</span>,n,x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sum[root]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:线段树维护全局多少位置是前缀最大值&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/数据结构/"/>
    
    <category term="数据结构-线段树" scheme="https://www.lemir3.red/categories/数据结构/数据结构-线段树/"/>
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="线段树" scheme="https://www.lemir3.red/tags/线段树/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu1471方差</title>
    <link href="https://www.lemir3.red/2020/09/03/jie-ti-bao-gao-luogu1471-fang-chai/"/>
    <id>https://www.lemir3.red/2020/09/03/jie-ti-bao-gao-luogu1471-fang-chai/</id>
    <published>2020-09-03T02:01:33.000Z</published>
    <updated>2020-09-03T02:34:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:维护方差需要的信息</p><a id="more"></a><h1 id="luogu1471方差"><a href="#luogu1471方差" class="headerlink" title="luogu1471方差"></a>luogu1471方差</h1><p><a href="https://www.luogu.com.cn/problem/P1471" target="_blank" rel="noopener">题面</a></p><p>分寝室竟然和菜菜子和神m一起插到了有4个化学人和1个生物人的原化学寝室…</p><p>宣称:化学,生物</p><p>文化:化学 (不是信息的相容文化)</p><p>p社分析.jpg</p><p>于是晚上无聊就想了想这道题.</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>要维护区间的方差,先看看方差的定义式:</p><script type="math/tex; mode=display">s^2=\frac{1}{n}\sum_{i=1}^{n}(A_i-\overline{A})^2</script><p>拆开:</p><script type="math/tex; mode=display">\begin{aligned}s^2&=\frac{1}{n}\sum_{i=1}^{n}(A_i-\overline{A})^2\\&=\frac{1}{n}\sum_{i=1}^{n}A_i^2-2\cdot A_i\overline{A}+\overline{A}^2\end{aligned}</script><p>首先平均值是很好维护的,因为只会在询问时用到,查询出区间和除以区间长度就可以了.</p><p>然后还需要维护出每个值的平方和,拆一下修改操作:</p><script type="math/tex; mode=display">\begin{aligned}\sum_{i=1}^{n}(A_i+val)^2\\&=\sum_{i=1}^{n}A_i^2+2\cdot A_ival+val^2\end{aligned}</script><p>这样在一次方和的基础上就可以算出二次方和的修改量了.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl n,m,root,NodeCnt;</span><br><span class="line">lxl c[<span class="number">2</span>][big&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">double</span> sum[big&lt;&lt;<span class="number">2</span>],sum2[big&lt;&lt;<span class="number">2</span>],tag[big&lt;&lt;<span class="number">2</span>],a[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(lxl t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sum[t]=sum[c[<span class="number">0</span>][t]]+sum[c[<span class="number">1</span>][t]];</span><br><span class="line">sum2[t]=sum2[c[<span class="number">0</span>][t]]+sum2[c[<span class="number">1</span>][t]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(lxl t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tag[t]==<span class="number">0</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson c[0][t]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson c[1][t]</span></span><br><span class="line">tag[lson]+=tag[t],tag[rson]+=tag[t];</span><br><span class="line">sum2[lson]+=<span class="number">2</span>*sum[lson]*tag[t]+tag[t]*tag[t]*(mid-l+<span class="number">1</span>);</span><br><span class="line">sum2[rson]+=<span class="number">2</span>*sum[rson]*tag[t]+tag[t]*tag[t]*(r-mid);</span><br><span class="line">sum[lson]+=tag[t]*(mid-l+<span class="number">1</span>),sum[rson]+=tag[t]*(r-mid);</span><br><span class="line">tag[t]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(lxl &amp;t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t)t=++NodeCnt;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;sum[t]=a[l],sum2[t]=a[l]*a[l];<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">build(c[<span class="number">0</span>][t],l,mid),build(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r);</span><br><span class="line">PushUp(t,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl y,<span class="keyword">double</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)</span><br><span class="line">&#123;</span><br><span class="line">tag[t]+=val;</span><br><span class="line">sum2[t]+=<span class="number">2</span>*sum[t]*val+val*val*(r-l+<span class="number">1</span>);</span><br><span class="line">sum[t]+=val*(r-l+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">PushDown(t,l,r);</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)modify(c[<span class="number">0</span>][t],l,mid,x,y,val);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid)modify(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y,val);</span><br><span class="line">PushUp(t,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">query2</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)<span class="keyword">return</span> sum2[t];</span><br><span class="line">PushDown(t,l,r);</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">double</span> ret=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)ret+=query2(c[<span class="number">0</span>][t],l,mid,x,y);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid)ret+=query2(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">query3</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)<span class="keyword">return</span> sum[t];</span><br><span class="line">PushDown(t,l,r);</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">double</span> ret=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)ret+=query3(c[<span class="number">0</span>][t],l,mid,x,y);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid)ret+=query3(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("P1471_2.in","r",stdin);</span></span><br><span class="line"><span class="comment">// freopen("test.out","w",stdout);</span></span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,a+i);</span><br><span class="line">build(root,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl opt=read(),x=read(),y=read();</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> k;<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;k);</span><br><span class="line">modify(root,<span class="number">1</span>,n,x,y,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)<span class="built_in">printf</span>(<span class="string">"%.4lf\n"</span>,query3(root,<span class="number">1</span>,n,x,y)/(y-x+<span class="number">1</span>));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> sum2_=query2(root,<span class="number">1</span>,n,x,y),sum_=query3(root,<span class="number">1</span>,n,x,y);</span><br><span class="line"><span class="keyword">double</span> ave_=sum_/(y-x+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.4lf\n"</span>,(sum2_<span class="number">-2</span>*sum_*ave_)/(y-x+<span class="number">1</span>)+ave_*ave_);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:维护方差需要的信息&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/数据结构/"/>
    
    <category term="数据结构-线段树" scheme="https://www.lemir3.red/categories/数据结构/数据结构-线段树/"/>
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="线段树" scheme="https://www.lemir3.red/tags/线段树/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」SP19985 GCDEX2 - GCD Extreme (hard)</title>
    <link href="https://www.lemir3.red/2020/09/01/jie-ti-bao-gao-sp19985-gcdex2-gcd-extreme-hard/"/>
    <id>https://www.lemir3.red/2020/09/01/jie-ti-bao-gao-sp19985-gcdex2-gcd-extreme-hard/</id>
    <published>2020-09-01T07:00:30.000Z</published>
    <updated>2020-09-03T09:18:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:欧拉函数表示互质后杜教筛</p><a id="more"></a><h1 id="SP19985-GCDEX2-GCD-Extreme-hard"><a href="#SP19985-GCDEX2-GCD-Extreme-hard" class="headerlink" title="SP19985 GCDEX2 - GCD Extreme (hard)"></a>SP19985 GCDEX2 - GCD Extreme (hard)</h1><p><a href="https://www.luogu.com.cn/problem/SP19985" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>求:</p><script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=i+1}^{n}\gcd(i,j)</script><p>先来看一个愚蠢的式子:</p><script type="math/tex; mode=display">\begin{aligned}\sum_{i=1}^{n}\sum_{j=1}^{n}\gcd(i,j)\\&=\sum_{i=1}^{n}\sum_{j=1}^{n}id(\gcd(i,j))\\&=\sum_{i=1}^{n}\sum_{j=1}^{n}\sum_{d|i,d|j}\varphi(d)\\&=\sum_{d=1}^{n}\sum_{i=1}^{\lfloor\frac{n}{i}\rfloor}\sum_{i=1}^{\lfloor\frac{n}{i}\rfloor}\varphi(d)\\&=\sum_{d=1}^{n}\varphi(d)\lfloor\frac{n}{d}\rfloor^2\end{aligned}</script><p>设$S(n)=\sum_{d=1}^{n}\varphi(d)\lfloor\frac{n}{d}\rfloor^2$且$S(n)=\sum_{i=1}^{n}f(n)$,考虑求出$f(n)$:</p><script type="math/tex; mode=display">\begin{aligned}S(n)-S(n-1)&=f(n)\\&=\sum_{d=1}^{n}\varphi(d)\lfloor\frac{n}{d}\rfloor^2-\sum_{d=1}^{n-1}\varphi(d)\lfloor\frac{n-1}{d}\rfloor^2\\&=\varphi(n)+\sum_{d=1}^{n-1}\varphi(d)(\lfloor\frac{n}{d}\rfloor^2-\lfloor\frac{n-1}{d}\rfloor^2)\end{aligned}</script><p>发现后面的$(\lfloor\frac{n}{d}\rfloor^2-\lfloor\frac{n-1}{d}\rfloor^2)$只有在$d|n$时会等于$2\cdot\frac{n}{d}-1$,于是就可以写成一个卷积的形式:</p><script type="math/tex; mode=display">\begin{aligned}\varphi(n)+\sum_{d=1}^{n-1}\varphi(d)(\lfloor\frac{n}{d}\rfloor^2-\lfloor\frac{n-1}{d}\rfloor^2)\\&=\varphi(n)-\varphi(n)+\sum_{d|n}2\cdot\varphi(d)\frac{n}{d}-\varphi(d)\\&=2\cdot\varphi * id-id\end{aligned}</script><p>这下就可以考虑杜教筛:</p><script type="math/tex; mode=display">g(1)S(n)=\sum_{i=1}^{n}(f * g)(i)-\sum_{i=2}^{n}g(i)S(\lfloor\frac{n}{i}\rfloor)</script><p>由于$f=2\cdot\varphi * id-id$,构造$g=1$:</p><script type="math/tex; mode=display">\begin{aligned}\sum_{i=1}^{n}(f * g)(i)\\&=\sum_{i=1}^{n}\sum_{d|i}2\cdot id(d)\cdot id(\frac{i}{d})-id(d)\\&=\sum_{i=1}^{n}\sum_{d|i}2\cdot i-d\end{aligned}</script><p>这个式子是可以根号复杂度预处理的,这样就可以进行杜教筛了.</p><p>不过本题数据范围太大,此做法无法通过.</p><p>说起来前前后后用了3种方法来做这个式子,但是都忽略了$j\geq i+1$这个条件,因为可以减去相同的数$\gcd$为本身之后除以二获得这个值.</p><p>但是考虑进这个条件,回到式子:</p><script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=i+1}^{n}\gcd(i,j)</script><p>枚举约数:</p><script type="math/tex; mode=display">\sum_{d=1}^{n}d\cdot\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=i+1}^{\lfloor\frac{n}{d}\rfloor}\epsilon(\gcd(i,j))</script><p>对于每一个相同的$j$来考虑,它仅会被小于它的$i$枚举到,并且如果这两个数互质的话就会被计入$1$的贡献.</p><p>于是可以用欧拉函数表示这个过程:</p><script type="math/tex; mode=display">\begin{aligned}\sum_{d=1}^{n}d\cdot\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=i+1}^{\lfloor\frac{n}{d}\rfloor}\epsilon(\gcd(i,j))\\&=\sum_{d=1}^{n}d\cdot\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\varphi(i)\end{aligned}</script><p>发现可以数论分块,然后用杜教筛来处理欧拉函数的前缀和,令$S(n)=\sum_{i=1}^{n}\varphi(i)$:</p><script type="math/tex; mode=display">g(1)S(n)=\sum_{i=1}^{n}(f * g)(i)-\sum_{i=2}^{n}g(i)S(\frac{n}{i})</script><p>根据$\varphi * 1=id$,令$g=1$:</p><script type="math/tex; mode=display">\begin{aligned}g(1)S(n)\\&=\sum_{i=1}^{n}(f * g)(i)-\sum_{i=2}^{n}g(i)S(\frac{n}{i})\\&=\sum_{i=1}^{n}id(i)-\sum_{i=2}^{n}S(\frac{n}{i})\\&=\frac{n\cdot(n+1)}{2}-\sum_{i=2}^{n}S(\frac{n}{i})\\&=S(n)\end{aligned}</script><p>注意一下因为在原先的和式中$j$不可能等于$1$,所以求出欧拉函数前缀和之后需要减去$1$.</p><p>题目对$2^{64}$取模,用<code>unsigned long long</code>自然溢出即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"unordered_map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ulxl;</span><br><span class="line"><span class="keyword">const</span> ulxl big=<span class="number">37000010</span>;</span><br><span class="line">ulxl T,n;</span><br><span class="line">ulxl phi[big],prime[big],ca[big],vis[big],pre[big];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;ulxl,ulxl&gt;mem;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ulxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line"><span class="function">ulxl <span class="title">x</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c););</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R ulxl i(<span class="number">2</span>);i&lt;big;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])vis[i]=<span class="literal">true</span>,phi[i]=i<span class="number">-1</span>,prime[++prime[<span class="number">0</span>]]=i;</span><br><span class="line"><span class="keyword">for</span>(R ulxl j(<span class="number">1</span>);j&lt;=prime[<span class="number">0</span>];++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i*prime[j]&gt;big)<span class="keyword">break</span>;</span><br><span class="line">vis[i*prime[j]]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(i%prime[j])phi[i*prime[j]]=phi[i]*(prime[j]<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;phi[i*prime[j]]=phi[i]*prime[j];<span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R ulxl i(<span class="number">1</span>);i&lt;big;++i)phi[i]=phi[i<span class="number">-1</span>]+phi[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ulxl <span class="title">calc</span><span class="params">(ulxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ulxl ret;</span><br><span class="line"><span class="keyword">if</span>(x&amp;<span class="number">1u</span>ll)ret=<span class="number">1u</span>ll*x*((x+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> ret=<span class="number">1u</span>ll*(x&gt;&gt;<span class="number">1</span>)*(x+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ulxl <span class="title">SPhi</span><span class="params">(ulxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;big)<span class="keyword">return</span> phi[x];</span><br><span class="line"><span class="keyword">if</span>(mem[x])<span class="keyword">return</span> mem[x];</span><br><span class="line">ulxl ret=calc(x);</span><br><span class="line"><span class="keyword">for</span>(R ulxl l(<span class="number">2</span>),r;l&lt;=x;l=r+<span class="number">1u</span>ll)</span><br><span class="line">&#123;</span><br><span class="line">ulxl de=x/l;</span><br><span class="line">r=x/de;</span><br><span class="line">ulxl mul=SPhi(de);</span><br><span class="line">ret=ret<span class="number">-1u</span>ll*mul*(r-l+<span class="number">1u</span>ll);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mem[x]=ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">prework();</span><br><span class="line">T=read();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">ulxl ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R ulxl l(<span class="number">1u</span>ll),r;l&lt;=n;l=r+<span class="number">1u</span>ll)</span><br><span class="line">&#123;</span><br><span class="line">ulxl de=n/l,l_=l<span class="number">-1u</span>ll;</span><br><span class="line">r=n/de;</span><br><span class="line">ulxl mul1=calc(r),mul3=calc(l_),mul2=SPhi(de)<span class="number">-1u</span>ll;</span><br><span class="line">ans=ans+<span class="number">1u</span>ll*mul1*mul2<span class="number">-1u</span>ll*mul3*mul2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;ans;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:欧拉函数表示互质后杜教筛&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-数论" scheme="https://www.lemir3.red/categories/数学/数学-数论/"/>
    
    <category term="数学-数论-莫比乌斯反演" scheme="https://www.lemir3.red/categories/数学/数学-数论/数学-数论-莫比乌斯反演/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="数论" scheme="https://www.lemir3.red/tags/数论/"/>
    
    <category term="莫比乌斯反演" scheme="https://www.lemir3.red/tags/莫比乌斯反演/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」SP3871 GCDEX - GCD Extreme</title>
    <link href="https://www.lemir3.red/2020/08/31/jie-ti-bao-gao-sp3871-gcdex-gcd-extreme/"/>
    <id>https://www.lemir3.red/2020/08/31/jie-ti-bao-gao-sp3871-gcdex-gcd-extreme/</id>
    <published>2020-08-31T13:21:44.000Z</published>
    <updated>2020-08-31T13:43:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:使用欧拉函数进行反演</p><a id="more"></a><h1 id="SP3871-GCDEX-GCD-Extreme"><a href="#SP3871-GCDEX-GCD-Extreme" class="headerlink" title="SP3871 GCDEX - GCD Extreme"></a>SP3871 GCDEX - GCD Extreme</h1><p><a href="https://www.luogu.com.cn/problem/SP3871" target="_blank" rel="noopener">题面</a></p><p>仅数据范围比本题小的题:</p><ul><li><a href="https://www.luogu.com.cn/problem/P1390" target="_blank" rel="noopener">#1</a></li><li><a href="https://www.luogu.com.cn/problem/UVA11424" target="_blank" rel="noopener">#2</a></li><li><a href="https://www.luogu.com.cn/problem/UVA11426" target="_blank" rel="noopener">#3</a></li><li><a href="https://www.luogu.com.cn/problem/P2398" target="_blank" rel="noopener">#4</a></li></ul><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>求:</p><script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=1}^{n}\gcd(i,j)</script><h3 id="莫比乌斯函数"><a href="#莫比乌斯函数" class="headerlink" title="莫比乌斯函数"></a>莫比乌斯函数</h3><p>先是考虑用$\mu$进行反演,毕竟用的多比较熟悉:</p><script type="math/tex; mode=display">\begin{aligned}\sum_{i=1}^{n}\sum_{j=1}^{n}\gcd(i,j)\\&=\sum_{d=1}^{n}d\cdot\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{n}{d}\rfloor}\epsilon(\gcd(i,j))\\&=\sum_{d=1}^{n}d\cdot\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{l|i,l|j}\mu(l)\\&=\sum_{d=1}^{n}d\cdot\sum_{l=1}^{\lfloor\frac{n}{d}\rfloor}\mu(l)\lfloor\frac{n}{dl}\rfloor^2\end{aligned}</script><p>设$sum(n)=\sum_{i=1}^{n}\mu(i)\lfloor\frac{n}{i}\rfloor^2$,带入原式:</p><script type="math/tex; mode=display">\begin{aligned}\sum_{d=1}^{n}d\cdot\sum_{l=1}^{\lfloor\frac{n}{d}\rfloor}\mu(l)\lfloor\frac{n}{dl}\rfloor^2\\&=\sum_{d=1}^{n}d\cdot sum(\lfloor\frac{n}{i}\rfloor)\end{aligned}</script><p>然后$sum(n)$使用数论分块筛,使用外面再用一个数论分块就可以了.</p><p>对$sum(n)$进行记忆化节省时间.</p><p>这个做法后面4个题都可过,这一道因为常数太大卡了3个小时也没过 (</p><h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><p>本来想着只是常数问题卡一卡应该能过,但是逐渐对莫比乌斯函数失去了信心…</p><p>于是考虑更换反演方式,瞪着式子看了半天发现可以用欧拉函数来反演.</p><p>根据$\varphi *1=id$:</p><script type="math/tex; mode=display">\begin{aligned}\sum_{i=1}^{n}\sum_{j=1}^{n}\gcd(i,j)\\&=\sum_{i=1}^{n}\sum_{j=1}^{n}id(\gcd(i,j))\\&=\sum_{i=1}^{n}\sum_{j=1}^{n}\sum_{d|i,d|j}\varphi(d)\\&=\sum_{d=1}^{n}\sum_{i=1}^{\lfloor\frac{n}{i}\rfloor}\sum_{i=1}^{\lfloor\frac{n}{i}\rfloor}\varphi(d)\\&=\sum_{d=1}^{n}\varphi(d)\lfloor\frac{n}{d}\rfloor^2\end{aligned}</script><p>于是进行一次数论分块即可.</p><p>但这题时间卡得过紧,于是又卡了会常数,使用了一些记忆化技巧.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="1"><a href="#1" class="headerlink" title="#1"></a>#1</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ulxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">lxl ans;</span><br><span class="line"><span class="keyword">int</span> prime[big],vis[big],mu[big];</span><br><span class="line">lxl smu[big],sum[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mu[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;big;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])vis[i]=<span class="literal">true</span>,mu[i]=<span class="number">-1</span>,prime[++prime[<span class="number">0</span>]]=i;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=prime[<span class="number">0</span>];++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i*prime[j]&gt;big)<span class="keyword">break</span>;</span><br><span class="line">vis[i*prime[j]]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(i%prime[j])mu[i*prime[j]]=-mu[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;big;++i)smu[i]=smu[i<span class="number">-1</span>]+mu[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">GetSum</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> l(<span class="number">1</span>),r;l&lt;=x;l=r+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl de=x/l;</span><br><span class="line">r=x/de;</span><br><span class="line">sum[x]+=de*de*(smu[r]-smu[l<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">prework();</span><br><span class="line"><span class="keyword">while</span>(n=read())</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> l(<span class="number">1</span>),r;l&lt;=n;l=r+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl de=n/(lxl)l;</span><br><span class="line">r=n/de;</span><br><span class="line">lxl mul_=(((lxl)r*(lxl)(r+<span class="number">1</span>))&gt;&gt;<span class="number">1</span>)-(((lxl)(l<span class="number">-1</span>)*(lxl)l)&gt;&gt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(!sum[de])GetSum(de);</span><br><span class="line">ans+=sum[de]*mul_;</span><br><span class="line"></span><br><span class="line">l=r+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&gt;n)<span class="keyword">break</span>;</span><br><span class="line">de=n/(lxl)l;</span><br><span class="line">r=n/de;</span><br><span class="line">mul_=(((lxl)r*(lxl)(r+<span class="number">1</span>))&gt;&gt;<span class="number">1</span>)-(((lxl)(l<span class="number">-1</span>)*(lxl)l)&gt;&gt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(!sum[de])GetSum(de);</span><br><span class="line">ans+=sum[de]*mul_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(ans-(((lxl)n*(lxl)(n+<span class="number">1</span>))&gt;&gt;<span class="number">1</span>))&gt;&gt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="#2"></a>#2</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target(<span class="meta-string">"sse,sse2,sse3,sse4.1,sse4.2,popcnt,abm,mmx,avx"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker,<span class="meta-string">"/STACK:102400000,102400000"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fgcse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fgcse-lm"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fipa-sra"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-pre"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-vrp"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fpeephole2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ffast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fsched-spec"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"unroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-labels"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fdevirtualize"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcaller-saves"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcrossjumping"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fthread-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-funroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fwhole-program"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-freorder-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fschedule-insns"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-tail-merge"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fschedule-insns2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fstrict-aliasing"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fstrict-overflow"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcse-skip-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcse-follow-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fsched-interblock"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fpartial-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"no-stack-protector"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-freorder-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-findirect-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fhoist-adjacent-loads"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-frerun-cse-after-loop"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-finline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-switch-conversion"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-foptimize-sibling-calls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fexpensive-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-funsafe-loop-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-functions-called-once"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fdelete-null-pointer-checks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ulxl;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> big=<span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">lxl ans;</span><br><span class="line"><span class="keyword">int</span> prime[big],vis[big];</span><br><span class="line">lxl phi[big],ca[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;big;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])vis[i]=<span class="literal">true</span>,phi[i]=i<span class="number">-1</span>,prime[++prime[<span class="number">0</span>]]=i;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=prime[<span class="number">0</span>];++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i*prime[j]&gt;big)<span class="keyword">break</span>;</span><br><span class="line">vis[i*prime[j]]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(i%prime[j])phi[i*prime[j]]=phi[i]*(prime[j]<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;phi[i*prime[j]]=phi[i]*prime[j];<span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;big;++i)phi[i]=phi[i<span class="number">-1</span>]+phi[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">calc</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">return</span> ca[x]=(<span class="number">1l</span>l*<span class="number">2</span>*x*x*x+<span class="number">1l</span>l*<span class="number">3</span>*x*x+x)/<span class="number">6</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">prework();</span><br><span class="line"><span class="keyword">while</span>(n=read())</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">lxl <span class="title">ans</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> l(<span class="number">1</span>),r;l&lt;=n;l=r+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> de=n/l;</span><br><span class="line">r=n/de;</span><br><span class="line">lxl mul=(!ca[n/r]?calc(n/r):ca[n/r])-(!ca[de<span class="number">-1</span>]?calc(de<span class="number">-1</span>):ca[de<span class="number">-1</span>]);</span><br><span class="line">ans+=<span class="number">1l</span>l*(phi[r]-phi[l<span class="number">-1</span>])*mul;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(ans<span class="number">-1l</span>l*n*(n+<span class="number">1</span>)/<span class="number">2</span>)/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p><a href="https://www.luogu.com.cn/problem/SP19985" target="_blank" rel="noopener">还有一道题…</a></p><p>题意也是一样的,但是数据范围得复杂度低于线性了.</p><p>或许能在欧拉函数的反演方法上使用杜教筛,明天再来推一下.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:使用欧拉函数进行反演&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-数论" scheme="https://www.lemir3.red/categories/数学/数学-数论/"/>
    
    <category term="数学-数论-莫比乌斯反演" scheme="https://www.lemir3.red/categories/数学/数学-数论/数学-数论-莫比乌斯反演/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="数论" scheme="https://www.lemir3.red/tags/数论/"/>
    
    <category term="莫比乌斯反演" scheme="https://www.lemir3.red/tags/莫比乌斯反演/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu2398GCD SUM</title>
    <link href="https://www.lemir3.red/2020/08/29/jie-ti-bao-gao-luogu2398gcd-sum/"/>
    <id>https://www.lemir3.red/2020/08/29/jie-ti-bao-gao-luogu2398gcd-sum/</id>
    <published>2020-08-29T08:30:22.000Z</published>
    <updated>2020-08-29T08:39:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:也是基础莫反题</p><a id="more"></a><h1 id="luogu2398GCD-SUM"><a href="#luogu2398GCD-SUM" class="headerlink" title="luogu2398GCD SUM"></a>luogu2398GCD SUM</h1><p><a href="https://www.luogu.com.cn/problem/P2398" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>求:</p><script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=1}^{n}\gcd(i,j)</script><p>枚举约数并进行莫比乌斯反演:</p><script type="math/tex; mode=display">\begin{aligned}\sum_{i=1}^{n}\sum_{j=1}^{n}\gcd(i,j)\\&=\sum_{d=1}^{n}\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{n}{d}\rfloor}d\cdot\epsilon(\gcd(i,j))\\&=\sum_{d=1}^{n}d\cdot\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{l|i,l|j}\mu(l)\\&=\sum_{d=1}^{n}d\cdot\sum_{l=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{i=1}^{\lfloor\frac{n}{dl}\rfloor}\sum_{j=1}^{\lfloor\frac{n}{dl}\rfloor}\mu(l)\\&=\sum_{d=1}^{n}d\cdot\sum_{l=1}^{\lfloor\frac{n}{d}\rfloor}\mu(l)\cdot\lfloor\frac{n}{dl}\rfloor^2\end{aligned}</script><p>$O(n\sqrt n)$数论分块求解.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl n,ans;</span><br><span class="line">lxl prime[big],vis[big],mu[big],smu[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mu[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;big;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])vis[i]=<span class="literal">true</span>,mu[i]=<span class="number">-1</span>,prime[++prime[<span class="number">0</span>]]=i;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=prime[<span class="number">0</span>];++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i*prime[j]&gt;big)<span class="keyword">break</span>;</span><br><span class="line">vis[i*prime[j]]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(i%prime[j])mu[i*prime[j]]=-mu[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;big;++i)smu[i]=smu[i<span class="number">-1</span>]+mu[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPow</span><span class="params">(lxl a,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">prework();</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> d(<span class="number">1</span>);d&lt;=n;++d)</span><br><span class="line">&#123;</span><br><span class="line">lxl n_=n/d,sum(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> l(<span class="number">1</span>),r;l&lt;=n_;l=r+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">r=n_/(n_/l);</span><br><span class="line">sum+=(n_/l)*(n_/l)*(smu[r]-smu[l<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">ans+=sum*d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:也是基础莫反题&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-数论" scheme="https://www.lemir3.red/categories/数学/数学-数论/"/>
    
    <category term="数学-数论-莫比乌斯反演" scheme="https://www.lemir3.red/categories/数学/数学-数论/数学-数论-莫比乌斯反演/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="数论" scheme="https://www.lemir3.red/tags/数论/"/>
    
    <category term="莫比乌斯反演" scheme="https://www.lemir3.red/tags/莫比乌斯反演/"/>
    
  </entry>
  
</feed>
