<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lemir3&#39;s blog</title>
  
  
  <link href="https://www.lemir3.red/atom.xml" rel="self"/>
  
  <link href="https://www.lemir3.red/"/>
  <updated>2020-11-03T12:13:02.670Z</updated>
  <id>https://www.lemir3.red/</id>
  
  <author>
    <name>lemir3</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「解题报告」luogu1297_[国家集训队]单选错位</title>
    <link href="https://www.lemir3.red/2020/11/03/jie-ti-bao-gao-luogu1297-guo-jia-ji-xun-dui-dan-xuan-cuo-wei/"/>
    <id>https://www.lemir3.red/2020/11/03/jie-ti-bao-gao-luogu1297-guo-jia-ji-xun-dui-dan-xuan-cuo-wei/</id>
    <published>2020-11-03T12:01:35.000Z</published>
    <updated>2020-11-03T12:13:02.670Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:数理基础题</p><a id="more"></a><h1 id="luogu1297-国家集训队-单选错位"><a href="#luogu1297-国家集训队-单选错位" class="headerlink" title="luogu1297_[国家集训队]单选错位"></a>luogu1297_[国家集训队]单选错位</h1><p><a href="https://www.luogu.com.cn/problem/P1297" target="_blank" rel="noopener">题面</a></p><h2 id="tutorial"><a href="#tutorial" class="headerlink" title="tutorial"></a>tutorial</h2><p>考虑什么情况下把$i-1$的答案写到$i$上才会正确,就只有两空答案相等这一种情况.</p><p>两空的答案总情况数是$a_{i-1} \times a_i$,选到两个相等的答案的情况有$\min\{ a_{i-1} , a_i \}$种,那么每个位置发生相等的概率为$\frac{\min\{ a_{i-1} , a_i \}}{a_{i-1} \times a_i}$,乘上取值$1$即得这个位置上选对的期望,根据线性性相加即可.</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar() (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> big=<span class="number">10000010</span>;</span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line">lxl n,A,B,C;</span><br><span class="line">lxl a[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">    <span class="function">lxl <span class="title">x</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);c=getchar());</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x*<span class="number">10</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        freopen(<span class="string">"data.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld%lld"</span>, &amp;n, &amp;A, &amp;B, &amp;C, a + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">a[i] = ((<span class="keyword">long</span> <span class="keyword">long</span>) a[i - <span class="number">1</span>] * A + B) % <span class="number">100000001</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">a[i] = a[i] % C + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=n;++i)ans+=(<span class="keyword">double</span>)<span class="built_in">std</span>::min(a[i],a[i<span class="number">-1</span>])/(<span class="keyword">double</span>)(a[i<span class="number">-1</span>]*a[i]);</span><br><span class="line">    ans+=(<span class="keyword">double</span>)<span class="built_in">std</span>::min(a[<span class="number">1</span>],a[n])/(<span class="keyword">double</span>)(a[<span class="number">1</span>]*a[n]);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="built_in">std</span>::fixed&lt;&lt;<span class="built_in">std</span>::setprecision(<span class="number">3</span>)&lt;&lt;ans;<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:数理基础题&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="概率期望" scheme="https://www.lemir3.red/categories/数学/概率期望/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="概率期望" scheme="https://www.lemir3.red/tags/概率期望/"/>
    
  </entry>
  
  <entry>
    <title>「总结」11022020成外联考</title>
    <link href="https://www.lemir3.red/2020/11/02/zong-jie-11022020-cheng-wai-lian-kao/"/>
    <id>https://www.lemir3.red/2020/11/02/zong-jie-11022020-cheng-wai-lian-kao/</id>
    <published>2020-11-02T12:31:23.000Z</published>
    <updated>2020-11-02T13:17:13.717Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:无</p><a id="more"></a><h1 id="11022020成外联考"><a href="#11022020成外联考" class="headerlink" title="11022020成外联考"></a>11022020成外联考</h1><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>考虑贪心,贪心地将尽量小的字母放到尽量前面去,每次都放到能放的最前面即可,因为操作次数不足以将最优字母放到最前面的情况仅存在一次所以是正确的.</p><p>拿一个树状数组记录每个字母原来的位置的后面有多少个字母被移动到了前面去,原来的位置加上这个值即为现在的位置.</p><p>代码实现要仔细一点,$k$要开<code>long long</code>.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="comment">//#define getchar() (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> big=<span class="number">500010</span>;</span><br><span class="line"><span class="keyword">int</span> n,front;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k;</span><br><span class="line"><span class="keyword">int</span> in[big],size[<span class="number">27</span>],t[big];</span><br><span class="line"><span class="keyword">char</span> s[big];</span><br><span class="line"><span class="built_in">std</span>::priority_queue&lt;<span class="keyword">int</span>&gt;pri[<span class="number">27</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;pachy;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">int f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x*<span class="number">10</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;<span class="keyword">for</span>(;x;x-=lowbit(x))t[x]+=k;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;<span class="keyword">for</span>(;x&lt;=n;x+=lowbit(x))sum+=t[x];<span class="keyword">return</span> sum;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen("escape.in","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("escape.out","w",stdout);</span></span><br><span class="line">n=read(),k=read();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)pri[s[i]-<span class="string">'a'</span>].push(-i),++size[s[i]-<span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">while</span>(k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> lefid,lefpos=INF,lefch,cost;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;<span class="number">26</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!size[i])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> now=-pri[i].top(),tmp=now;</span><br><span class="line">now+=query(tmp);</span><br><span class="line"><span class="keyword">int</span> pos=<span class="built_in">std</span>::max(front+<span class="number">1</span>,now-k);</span><br><span class="line"><span class="keyword">if</span>(pos&lt;lefpos)lefpos=pos,cost=now-pos,lefid=tmp,lefch=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(lefpos==INF)<span class="keyword">break</span>;</span><br><span class="line">++front,pri[lefch].pop(),pachy.push_back(lefid),in[lefid]=<span class="literal">true</span>;</span><br><span class="line">k-=cost,--size[lefch];</span><br><span class="line">modify(lefid,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(it=pachy.begin();it!=pachy.end();++it)<span class="built_in">printf</span>(<span class="string">"%c"</span>,s[*it]);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="keyword">if</span>(!in[i])<span class="built_in">printf</span>(<span class="string">"%c"</span>,s[i]);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>发现路径上单调性改变的点仅存在一个,所以将这个点作为根,然后处理出以每个点为起点的点编号递减的所有链,记录它的每个儿子的子树中有多少个点在链上,每个儿子与其他儿子组合求解.</p><p>然后就可以直接换根,因为把一个点换成根,发生改变的点仅为它的祖先,而它到祖先合法的情况是从这个点到某个祖先的路径上点的编号递增,所以这个点一定不存在于它的祖先处理出来的链中,直接加上祖先处理出来的值即可.</p><p>换根的过程也可以预处理,按照之前处理递减链的思路处理递增链即可.</p><p>然后注意遍历链的时候记录链头,从链头开始遍历,不然每次选取一个没被遍历的点开始遍历容易被卡.</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar() (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> big=<span class="number">300010</span>;</span><br><span class="line"><span class="keyword">int</span> n,EdgeSize,maxd;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans,poi;</span><br><span class="line"><span class="keyword">int</span> head[big],dp[<span class="number">2</span>][big],sum[big],fa[big],vis[big],size[big],len[big],pre[big],root[big],deg[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span>&#123;</span><span class="keyword">int</span> v,next;&#125;e[big&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;edge[big],pachy[big];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v) EdgeAdd(u,v),EdgeAdd(v,u)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;e[EdgeSize]=(_Edge)&#123;v,head[u]&#125;;head[u]=EdgeSize++;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">int f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x*<span class="number">10</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fa[u]=father;</span><br><span class="line"><span class="keyword">if</span>(u&lt;father)</span><br><span class="line">&#123;</span><br><span class="line">edge[father].push_back(u);</span><br><span class="line"><span class="keyword">if</span>(fa[father]&lt;father&amp;&amp;!vis[father])root[++root[<span class="number">0</span>]]=father,vis[father]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==father)<span class="keyword">continue</span>;</span><br><span class="line">dfs(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">size[u]=<span class="number">1</span>,vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it=edge[u].begin();it!=edge[u].end();++it)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=*it;</span><br><span class="line">dfs2(*it);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs3</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==father)<span class="keyword">continue</span>;</span><br><span class="line">dfs3(v,u);</span><br><span class="line"><span class="keyword">if</span>(size[v]&amp;&amp;v&lt;u)sum[u]+=size[v],pachy[u].push_back(size[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs4</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa,<span class="keyword">int</span> sm,<span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pre[u]=sm,len[u]=dis;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(v&gt;u)dfs4(v,u,sm+sum[u],dis+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> dfs4(v,u,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen("ride.in","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("ride.out","w",stdout);</span></span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;n;++i)&#123;<span class="keyword">int</span> u=read(),v=read();++deg[u],++deg[v];add(u,v);&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="keyword">if</span>(deg[i]&gt;maxd)maxd=deg[i];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=root[<span class="number">0</span>];++i)dfs2(root[i]);</span><br><span class="line">dfs3(<span class="number">1</span>,<span class="number">0</span>),dfs4(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(it=pachy[<span class="number">1</span>].begin();it!=pachy[<span class="number">1</span>].end();++it)ans+=<span class="number">1l</span>l*(sum[<span class="number">1</span>]-(*it))*(*it);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">all</span><span class="params">(sum[i])</span></span>;</span><br><span class="line"><span class="keyword">int</span> tfa=fa[i],last(i),delta(len[i]),frs(pre[i]);</span><br><span class="line">frs+=delta<span class="number">-1</span>,all+=frs;</span><br><span class="line">pachy[i].push_back(frs);</span><br><span class="line"><span class="keyword">for</span>(it=pachy[i].begin();it!=pachy[i].end();++it)ans+=<span class="number">1l</span>l*(all-(*it))*(*it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>因为边的长度都为$1$,所以只要$u$到$v$的最短路为偶数,那么只要随便选一条边不断来回走就一定可以满足$d$是偶数的情况,奇数亦然.</p><p>把每个点拆成奇点和偶点,连边$(u,v)$的时候$u$的奇点向$v$的偶点连边,$u$的偶点向$v$的奇点连边,然后bfs遍历出最短路即可.</p><p>注意判孤点.</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar() (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> big=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,q,EdgeSize;</span><br><span class="line"><span class="keyword">int</span> head[big],nonly[big],dis[big],ans[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span>&#123;</span><span class="keyword">int</span> v,next;&#125;e[big&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Question</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> s,t,d,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Question &amp;another)<span class="keyword">const</span>&#123;<span class="keyword">return</span> s==another.s?t&lt;another.t:s&lt;another.s;&#125;</span><br><span class="line">&#125;qus[big];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;que;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">int x(0),f(-1);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x*<span class="number">10</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v) EdgeAdd(u,v),EdgeAdd(v,u)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;e[EdgeSize]=(_Edge)&#123;v,head[u]&#125;,head[u]=EdgeSize++;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dis),que.push(s),dis[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!que.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u=que.front();que.pop();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(dis[v]&gt;dis[u]+<span class="number">1</span>)dis[v]=dis[u]+<span class="number">1</span>,que.push(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("data.in","r",stdin);</span></span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">n=read(),m=read(),q=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a=read(),b=read();</span><br><span class="line">add(a,b+n),add(a+n,b);</span><br><span class="line">nonly[a]=nonly[b]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=q;++i)</span><br><span class="line">&#123;</span><br><span class="line">qus[i]=(_Question)&#123;read(),read(),read(),i&#125;;</span><br><span class="line"><span class="keyword">if</span>(qus[i].s&gt;qus[i].t)<span class="built_in">std</span>::swap(qus[i].s,qus[i].t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::sort(qus+<span class="number">1</span>,qus+<span class="number">1</span>+q);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=q;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(qus[i].s!=qus[i<span class="number">-1</span>].s)bfs(qus[i].s);</span><br><span class="line"><span class="keyword">if</span>(qus[i].s==qus[i].t&amp;&amp;!nonly[qus[i].s]&amp;&amp;qus[i].d)<span class="keyword">continue</span>;</span><br><span class="line">ans[qus[i].id]=dis[qus[i].t+(qus[i].d&amp;<span class="number">1</span>?n:<span class="number">0</span>)]&lt;=qus[i].d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=q;++i)<span class="built_in">printf</span>(ans[i]?<span class="string">"Yes\n"</span>:<span class="string">"No\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h2><p>真不会.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>早上一到机房开机突然发现自己电脑主板坏了,于是只好换了台devcpp都有锅,鼠标上都结了蜘蛛网的怪电脑用,而且考试的时候发现这台电脑一个exe只要运行5遍以上就会被给管理员权限,然而管理员密码早就被人遗忘了,于是只有隔一会就重开一个cpp来运行,比赛体验—.</p><p>T1做得挺快,看了一小会样例发现直接贪心做即可,实现细节有点多,花了半个小时打完代码.不过没注意到$k$要开<code>long long</code>掉了10pts.</p><p>T2开始在想dp,但是发现可以直接换根后统计答案,直接就上去打了,打完测样例发现自己统计答案方式写错了,还好错得不大小改一下就没事了,还是得想清楚再打.</p><p>这种树上的题经常得调特别久,打完后调了一个小时才过完所有样例,不过换根的时候写的是暴力上跳统计祖先贡献,当时因为还剩一个半小时,后面两题还没动就没管了,但其实在随机数据下效率差距没多大,中午回寝室稍微想了一下就发现这东西也可以直接预处理.然而在遍历新树的子树的时候写丑了导致树的形态为链的20pts被卡掉了.</p><p>T3是图论题,现在考试尤其是这种四道题的,考到后面感觉就很疲惫了,不怎么愿意去想题,其实这题考虑边权都为$1$然后奇偶性就很好想了,要是放T2的话一个半小时做出来完全不是问题.但是当时也不怎么愿意去想正解,用矩阵乘法打过了30pts,而且还因为很久没动矩阵了调了半个小时.</p><p>T4就没动了.</p><p>考试的时候还是精神点,每次都要当成在联赛现场,而且没开<code>long long</code>和遍历方式写丑这种小错误也不该犯.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:无&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.lemir3.red/categories/总结/"/>
    
    
    <category term="总结" scheme="https://www.lemir3.red/tags/总结/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu1593_因子和</title>
    <link href="https://www.lemir3.red/2020/11/01/jie-ti-bao-gao-luogu1593-yin-zi-he/"/>
    <id>https://www.lemir3.red/2020/11/01/jie-ti-bao-gao-luogu1593-yin-zi-he/</id>
    <published>2020-11-01T13:05:14.000Z</published>
    <updated>2020-11-01T13:26:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:基础数列求和题</p><a id="more"></a><h1 id="luogu1593-因子和"><a href="#luogu1593-因子和" class="headerlink" title="luogu1593_因子和"></a>luogu1593_因子和</h1><p><a href="https://www.luogu.com.cn/problem/P1593" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>这道题是要求$\sigma(a^b)$.</p><p>通过唯一分解定理,$a = p_{1}^{k_1} p_{2}^{k_2} \cdots p_{n}^{k_n}$,考虑因数根据质因数的组合方式,我们可以得到除数和函数的求法:</p><script type="math/tex; mode=display">\begin{aligned}\sigma(a) &= \prod_{i = 1}^{n}\sum_{j=0}^{k_i}p_i^{j}\\&= \prod_{i = 1}^{n} \frac{1 - p_i^{k_i + 1}}{1 - p_i}\\&= \prod_{i = 1}^{n} \frac{p_i^{k_i + 1} - 1}{p_i - 1}\end{aligned}</script><p>所以我们给$a$的每个质因数的幂次暴力乘上一个$b$,然后按照上式求积即可.</p><p>但是注意到模数是$9901$,这个数虽然是质数但是特别小,所以极有可能分母是这个数的倍数而导致不存在乘法逆元,也就是$a a^{-1}\equiv 1 \quad \bmod 9901$无解,事实上在$p = 59407 = 9901 \times 6 +1$的时候就存在无解的情况了,对于这种情况我们除了暴力求和式之外别无他法.</p><h2 id="代码"><a href="#代码" class="headerlink" title="　代码"></a>　代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> big=<span class="number">10010</span>,mod=<span class="number">9901</span>;</span><br><span class="line"><span class="keyword">int</span> a,b,ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> p[big],k[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">x</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);c=getchar());</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x*<span class="number">10</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">FastPow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(;b;a=<span class="number">1l</span>l*a*a%mod,b&gt;&gt;=<span class="number">1</span>)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=<span class="number">1l</span>l*sum*a%mod);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        freopen(<span class="string">"data.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    a=read(),b=read();</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;<span class="built_in">printf</span>(<span class="string">"1\n"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">sqrt</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=len;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=i,y=a/i;</span><br><span class="line">        <span class="keyword">if</span>(!(a%x))</span><br><span class="line">        &#123;</span><br><span class="line">            p[++p[<span class="number">0</span>]]=x;<span class="keyword">while</span>(!(a%x)&amp;&amp;a&gt;<span class="number">1</span>)a/=x,++k[p[<span class="number">0</span>]];</span><br><span class="line">            <span class="comment">// if(x!=y)&#123;p[++p[0]]=y;while(!(a%y)&amp;&amp;a&gt;1)a/=y,++k[p[0]];&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;<span class="number">1</span>)p[++p[<span class="number">0</span>]]=a,k[p[<span class="number">0</span>]]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=p[<span class="number">0</span>];++i)</span><br><span class="line">        <span class="keyword">if</span>((p[i]<span class="number">-1</span>)%mod)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> top=(FastPow(p[i],k[i]*b+<span class="number">1</span>)<span class="number">-1</span>+mod)%mod;</span><br><span class="line">            <span class="keyword">int</span> botinv=FastPow(p[i]<span class="number">-1</span>,mod<span class="number">-2</span>);</span><br><span class="line">            ans=<span class="number">1l</span>l*ans*(top*botinv%mod)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> sum(<span class="number">0</span>),tmp(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=k[i]*b+<span class="number">1</span>;tmp=tmp*p[i]%mod,++j)</span><br><span class="line">                sum=(sum+tmp)%mod;</span><br><span class="line">            ans=<span class="number">1l</span>l*ans*sum%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    end:<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:基础数列求和题&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-数论" scheme="https://www.lemir3.red/categories/数学/数学-数论/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="数论" scheme="https://www.lemir3.red/tags/数论/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu6125_[JSOI2009]有趣的游戏</title>
    <link href="https://www.lemir3.red/2020/11/01/jie-ti-bao-gao-luogu6125-jsoi2009-you-qu-de-you-xi/"/>
    <id>https://www.lemir3.red/2020/11/01/jie-ti-bao-gao-luogu6125-jsoi2009-you-qu-de-you-xi/</id>
    <published>2020-11-01T05:55:02.000Z</published>
    <updated>2020-11-01T06:34:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:AC自动机上高斯消元期望dp</p><a id="more"></a><h1 id="luogu6125-JSOI2009-有趣的游戏"><a href="#luogu6125-JSOI2009-有趣的游戏" class="headerlink" title="luogu6125_[JSOI2009]有趣的游戏"></a>luogu6125_[JSOI2009]有趣的游戏</h1><p><a href="https://www.luogu.com.cn/problem/P6125" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先把这个问题放在AC自动机上,从根节点开始随机遍历,遍历到一个结束点即结束.</p><p>我们设$f_i$为到达一个点的期望次数,则有以下方程:</p><script type="math/tex; mode=display">\begin{cases}f_u = 1 \quad u = root\\f_u = \sum \frac{f_v}{p_e} \quad v \rightarrow u\end{cases}</script><p>也就是考虑一个点能从哪些点转移来,对这些点的期望次数乘上转移的概率求和即为这个点的期望.</p><p>这是一个dp序混乱的方程无法直接转移,但是注意到AC自动机上节点不超过$100$个,我们对每个点建立方程进行高斯消元即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%lf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugc(x) printf(<span class="meta-string">"debug:%c\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="comment">// #define getchar() (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> big=<span class="number">110</span>,small=<span class="number">11</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,l,NodeCnt;</span><br><span class="line"><span class="keyword">int</span> trie[small][big],end[big],endpos[big],fail[big];</span><br><span class="line"><span class="keyword">double</span> p[small],a[big][big];</span><br><span class="line"><span class="keyword">char</span> s[small];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">x</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);c=getchar());</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x*<span class="number">10</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">int now(0),num;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;l;++i)</span><br><span class="line">&#123;</span><br><span class="line">num=s[i]-<span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">if</span>(!trie[num][now])trie[num][now]=++NodeCnt;</span><br><span class="line">now=trie[num][now];</span><br><span class="line">&#125;</span><br><span class="line">endpos[x]=now,end[now]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetFail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;m;++i)<span class="keyword">if</span>(trie[i][<span class="number">0</span>])q.push(trie[i][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;m;++i)</span><br><span class="line"><span class="keyword">if</span>(trie[i][u])fail[trie[i][u]]=trie[i][fail[u]],q.push(trie[i][u]);</span><br><span class="line"><span class="keyword">else</span> trie[i][u]=trie[i][fail[u]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a[<span class="number">0</span>][NodeCnt+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;=NodeCnt;++i)</span><br><span class="line">&#123;</span><br><span class="line">a[i][i]=<span class="number">1.0</span>;</span><br><span class="line"><span class="comment">// debugf(a[i][i]);</span></span><br><span class="line"><span class="keyword">if</span>(!end[i])<span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;m;++j)a[trie[j][i]][i]-=p[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">gauss</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// for(R int i(0);i&lt;=n;endl,++i)</span></span><br><span class="line">    <span class="comment">//     for(R int j(0);j&lt;=n+1;++j)</span></span><br><span class="line">    <span class="comment">//         printf("%lf ",a[i][j]);</span></span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// debug(n);</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(i)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(i+<span class="number">1</span>);j&lt;=n;++j)<span class="keyword">if</span>(<span class="built_in">abs</span>(a[max][i])&lt;<span class="built_in">abs</span>(a[j][i]))max=j;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;=n+<span class="number">1</span>;++j)<span class="built_in">std</span>::swap(a[max][j],a[i][j]);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;=n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j==i)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">double</span> tmp=a[j][i]/a[i][i];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(i+<span class="number">1</span>);k&lt;=n+<span class="number">1</span>;++k)a[j][k]-=a[i][k]*tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        freopen(<span class="string">"data.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>); </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    n=read(),l=read(),m=read();</span><br><span class="line">    <span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> _p=read(),_q=read();</span><br><span class="line">        p[i]=(<span class="keyword">double</span>)_p/(<span class="keyword">double</span>)_q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s),insert(i);</span><br><span class="line">GetFail(),get(),gauss(NodeCnt);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,a[endpos[i]][NodeCnt+<span class="number">1</span>]/a[endpos[i]][endpos[i]]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:AC自动机上高斯消元期望dp&lt;/p&gt;</summary>
    
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="动态规划" scheme="https://www.lemir3.red/tags/动态规划/"/>
    
    <category term="概率期望" scheme="https://www.lemir3.red/tags/概率期望/"/>
    
    <category term="线性代数" scheme="https://www.lemir3.red/tags/线性代数/"/>
    
    <category term="高斯消元" scheme="https://www.lemir3.red/tags/高斯消元/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」「HNOI2013」游走</title>
    <link href="https://www.lemir3.red/2020/11/01/jie-ti-bao-gao-hnoi2013-you-zou/"/>
    <id>https://www.lemir3.red/2020/11/01/jie-ti-bao-gao-hnoi2013-you-zou/</id>
    <published>2020-11-01T03:05:46.000Z</published>
    <updated>2020-11-01T03:52:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:推出期望dp方程后高斯消元贪心求解</p><a id="more"></a><h1 id="「HNOI2013」游走"><a href="#「HNOI2013」游走" class="headerlink" title="「HNOI2013」游走"></a>「HNOI2013」游走</h1><p><a href="https://www.luogu.com.cn/problem/P3232" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>可以发现如果我们求出了每条边经过的期望次数,那么只要贪心地为边分配边号即可,期望经过次数大的分配小的编号.</p><p>但是直接对边求期望不太好求,我们转化为对点求期望,方程如下:</p><script type="math/tex; mode=display">\begin{cases}f_u = \sum_{(u,v) \in E} \frac{f_v}{deg_v} +1 \quad u = 1\\f_u = \sum_{(u,v) \in E} \frac{f_v}{deg_v} \quad \text{otherwise}\end{cases}</script><p>简单理解,对于一个点的出点,出点经过的期望次数乘上下一步走到这个点的概率即为这个点通过这个出点到达的期望,根据期望的线性性求和即可,注意$n$号点不会有出边所以只有$n-1$个方程.</p><p>但是这个方程因为dp序混乱是无法递推的,我们只有想办法通过消元解出这个方程,把这个方程右边移项到左边,理解成矩阵即可高斯消元,然后就解出了$f_i$.</p><p>然后每条边$(u,v)$经过的期望次数即为$\frac{f_u}{deg_u}+\frac{f_v}{deg_v}$,同样理解,边经过的期望为连接的两个点经过的期望次数乘上走这条边的概率.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%lf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar() (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> big=<span class="number">510</span>,large=<span class="number">125010</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,EdgeSize;</span><br><span class="line"><span class="keyword">int</span> head[big],u[large],v[large],degree[big];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ans</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">double</span> a[big][big],x[big],f[large];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span>&#123;</span><span class="keyword">int</span> v,next;&#125;e[large&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v) EdgeAdd(u,v),EdgeAdd(v,u)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;e[EdgeSize]=(_Edge)&#123;v,head[u]&#125;,head[u]=EdgeSize++;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">x</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);c=getchar());</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x*<span class="number">10</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">guass</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// for(R int i(1);i&lt;=n;endl,++i)</span></span><br><span class="line">    <span class="comment">//     for(R int j(1);j&lt;=n+1;++j)</span></span><br><span class="line">    <span class="comment">//         printf("%lf ",a[i][j]);</span></span><br><span class="line">    <span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> max=i;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(i+<span class="number">1</span>);j&lt;=n;++j)<span class="keyword">if</span>(<span class="built_in">abs</span>(a[j][i])&gt;<span class="built_in">abs</span>(a[max][i]))max=j;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=n+<span class="number">1</span>;++j)<span class="built_in">std</span>::swap(a[i][j],a[max][j]);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j==i)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">double</span> tmp=a[j][i]/a[i][i];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(i+<span class="number">1</span>);k&lt;=n+<span class="number">1</span>;++k)a[j][k]-=a[i][k]*tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)x[i]=a[i][n+<span class="number">1</span>]/a[i][i];</span><br><span class="line">    <span class="comment">// debugf(x[i]);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen("P3232_4.in","r",stdin);</span></span><br><span class="line">    <span class="comment">// freopen("data2.out","w",stdout);</span></span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    <span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">        u[i]=read(),v[i]=read(),++degree[u[i]],++degree[v[i]],add(u[i],v[i]);</span><br><span class="line">    <span class="keyword">for</span>(R <span class="keyword">int</span> u(<span class="number">1</span>);u&lt;n;++u)</span><br><span class="line">    &#123;</span><br><span class="line">        a[u][u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[i].v;</span><br><span class="line">            <span class="keyword">if</span>(v!=n)a[u][v]=<span class="number">-1.0</span>/(<span class="keyword">double</span>)degree[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    a[<span class="number">1</span>][n]=<span class="number">1</span>,guass(n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        int a(u[i]),b(v[i]);</span><br><span class="line">        <span class="keyword">if</span>(a!=n)f[i]+=x[a]/(<span class="keyword">double</span>)degree[a];</span><br><span class="line">        <span class="keyword">if</span>(b!=n)f[i]+=x[b]/(<span class="keyword">double</span>)degree[b];</span><br><span class="line">        <span class="comment">// debug(degree[a]),debug(degree[b]);</span></span><br><span class="line">        <span class="comment">// debugf(f[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::sort(f+<span class="number">1</span>,f+<span class="number">1</span>+m);</span><br><span class="line">    <span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)ans+=(m-i+<span class="number">1</span>)*f[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.3lf\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:推出期望dp方程后高斯消元贪心求解&lt;/p&gt;</summary>
    
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="动态规划" scheme="https://www.lemir3.red/tags/动态规划/"/>
    
    <category term="概率期望" scheme="https://www.lemir3.red/tags/概率期望/"/>
    
    <category term="线性代数" scheme="https://www.lemir3.red/tags/线性代数/"/>
    
    <category term="高斯消元" scheme="https://www.lemir3.red/tags/高斯消元/"/>
    
  </entry>
  
  <entry>
    <title>「总结」10302020成外联考</title>
    <link href="https://www.lemir3.red/2020/10/30/zong-jie-10302020-cheng-wai-lian-kao/"/>
    <id>https://www.lemir3.red/2020/10/30/zong-jie-10302020-cheng-wai-lian-kao/</id>
    <published>2020-10-30T12:37:01.000Z</published>
    <updated>2020-10-30T13:40:55.147Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:无</p><a id="more"></a><h1 id="10302020成外联考"><a href="#10302020成外联考" class="headerlink" title="10302020成外联考"></a>10302020成外联考</h1><p>这两天是和成外进行联考,今天是考成外题.</p><p>三个半小时四道题根本写不过来,今天打得特别拉胯,掉了一堆分.</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>排序后贪心即可,大的尽量和大的配对,如果出现负的就和小的配对.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar() (l==r&amp;&amp;(r=(l=buf)+fread(buf,1,1&lt;&lt;21,stdin),l==r)?EOF:*l++)</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*l=buf,*r=buf;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> big=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="keyword">int</span> a[big],b[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">    int x(0),f(1);</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x*<span class="number">10</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> d1,<span class="keyword">int</span> d2)</span></span>&#123;<span class="keyword">return</span> d1&gt;d2;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"game.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"game.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    <span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=read();</span><br><span class="line">    <span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)b[i]=read();</span><br><span class="line">    <span class="built_in">std</span>::sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp),<span class="built_in">std</span>::sort(b+<span class="number">1</span>,b+<span class="number">1</span>+m,cmp);</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">i</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;<span class="number">0</span>)ans=ans+<span class="number">1l</span>l*a[i]*b[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span>(R <span class="keyword">int</span> j(n);j&gt;=i;--j)ans=ans+<span class="number">1l</span>l*a[j]*b[m--];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    end:<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>可以发现如果区间不交的话,每个区间顺次安排$\{ 1 , 2 , 3 , \cdots \}$是字典序最小的.</p><p>然后考虑区间交的情况,为前面的区间指定好数字之后,后面区间不与前面交的位置就可以用前面区间不与后面交的位置的数字.</p><p>这样大体思路就是,维护一个堆,每次取出当前能用的最小的数来指定,然后弹出这个数,每次再重新插入以后再也不会与其他区间相交的部分的数.</p><p>被大区间包含的小区间是无效的,筛掉即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar() (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> big=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,m;</span><br><span class="line"><span class="keyword">int</span> a[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Query &amp;another)<span class="keyword">const</span></span><br><span class="line">    &#123;<span class="keyword">return</span> l==another.l?r&lt;another.r:l&lt;another.l;&#125;</span><br><span class="line">&#125;que[big],que2[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">x</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);c=getchar());</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x*<span class="number">10</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T=read();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::priority_queue&lt;<span class="keyword">int</span>&gt;pri;</span><br><span class="line">        <span class="keyword">int</span> maxr=<span class="number">0</span>;</span><br><span class="line">        n=read(),m=read();</span><br><span class="line">        <span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)pri.push(-i),a[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)que[i]=(_Query)&#123;read(),read()&#125;;</span><br><span class="line">        <span class="built_in">std</span>::sort(que+<span class="number">1</span>,que+<span class="number">1</span>+m);</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">m_</span><span class="params">(<span class="number">0</span>)</span></span>;<span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)<span class="keyword">if</span>(que[i].r&gt;maxr)que2[++m_]=que[i],maxr=que[i].r;</span><br><span class="line">        <span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m_;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l=que2[i].l,r=que2[i].r;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">1</span>)<span class="keyword">for</span>(R <span class="keyword">int</span> j(que2[i<span class="number">-1</span>].l);j&lt;=<span class="built_in">std</span>::min(que2[i<span class="number">-1</span>].r,l<span class="number">-1</span>);++j)pri.push(-a[j]);</span><br><span class="line">            <span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="built_in">std</span>::max(l,que2[i<span class="number">-1</span>].r+<span class="number">1</span>));j&lt;=r;++j)</span><br><span class="line">               a[j]=-pri.top(),pri.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>相当于是求从一个数组的前$i$项中最多选出多少项,使得总和不超过$m$.</p><p>一个裸的思路是直接跑背包,但是注意到价值都为$1$,其实可以直接贪心.</p><p>但是这样贪心是$n$次,每次都要进行排序,无法通过本题,那么正解思路是维护一颗值域线段树,每个点维护对应值域区间的数字总和和数字的数量,然后在树上进行二分,若左区间的总和大于当前剩下的容量就向左递归,否则向右递归并减去左边的容量.</p><p>注意一个问题是如果出现了值相同的数不能插入同一个线段树节点上,不然树上二分的时候就必须把这些点一起取了,显然在不能全取完时会出锅,所以在离散化的时候不去重,每个数再加上是相同的数中的第几个即可.</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar() (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl T,n,m,NodeCnt,root;</span><br><span class="line">lxl a[big],b[big],ca[big],c[<span class="number">2</span>][big&lt;&lt;<span class="number">2</span>],sum[big&lt;&lt;<span class="number">2</span>],size[big&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">    <span class="function">lxl <span class="title">x</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);c=getchar());</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x*<span class="number">10</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(lxl t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    size[t]=sum[t]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(c[<span class="number">0</span>][t])size[t]+=size[c[<span class="number">0</span>][t]],sum[t]+=sum[c[<span class="number">0</span>][t]];</span><br><span class="line">    <span class="keyword">if</span>(c[<span class="number">1</span>][t])size[t]+=size[c[<span class="number">1</span>][t]],sum[t]+=sum[c[<span class="number">1</span>][t]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(lxl &amp;t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t=++NodeCnt;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">    build(c[<span class="number">0</span>][t],l,mid),build(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;++size[t],sum[t]+=k;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)modify(c[<span class="number">0</span>][t],l,mid,x,k);</span><br><span class="line">    <span class="keyword">else</span> modify(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,k);</span><br><span class="line">    PushUp(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">query</span><span class="params">(lxl t,lxl l,lxl r,lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span> x&gt;=sum[t]?size[t]:<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(sum[c[<span class="number">0</span>][t]]&gt;x)<span class="keyword">return</span> query(c[<span class="number">0</span>][t],l,mid,x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> size[c[<span class="number">0</span>][t]]+query(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x-sum[c[<span class="number">0</span>][t]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T=read();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">map</span>&lt;lxl,lxl&gt;muq;</span><br><span class="line">        NodeCnt=root=<span class="number">0</span>,<span class="built_in">memset</span>(size,<span class="number">0</span>,<span class="keyword">sizeof</span> size),<span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span> sum);</span><br><span class="line">        <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span> c),<span class="built_in">memset</span>(ca,<span class="number">0</span>,<span class="keyword">sizeof</span> ca),<span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span> b);</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);</span><br><span class="line">        n=read(),m=read();</span><br><span class="line">        <span class="keyword">for</span>(R lxl i(<span class="number">1</span>);i&lt;=n;++i)a[i]=b[i]=read();</span><br><span class="line">        <span class="built_in">std</span>::sort(b+<span class="number">1</span>,b+<span class="number">1</span>+n);</span><br><span class="line">        <span class="keyword">for</span>(R lxl i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">            ca[i]=muq[a[i]]+<span class="built_in">std</span>::lower_bound(b+<span class="number">1</span>,b+<span class="number">1</span>+n,a[i])-b,++muq[a[i]];</span><br><span class="line">        build(root,<span class="number">1</span>,n),modify(root,<span class="number">1</span>,n,ca[<span class="number">1</span>],a[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(m&gt;=a[<span class="number">1</span>]?<span class="string">"0"</span>:<span class="string">"1"</span>);</span><br><span class="line">        <span class="keyword">for</span>(R lxl i(<span class="number">2</span>);i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(m&lt;a[i])<span class="built_in">printf</span>(<span class="string">" %lld"</span>,i<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">" %lld"</span>,(i<span class="number">-1</span>)-query(root,<span class="number">1</span>,n,m-a[i]));</span><br><span class="line">            modify(root,<span class="number">1</span>,n,ca[i],a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    end:<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h2><h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>首先是二分一个最小的部分和,然后$dp$来判断可行,方程很简单:</p><script type="math/tex; mode=display">f_i = f_j + 1 ( s_i - s_j \leq limit )</script><p>这样转移的效率很低,那么我们考虑数据结构优化这个过程.</p><p>移一下项,转移的条件是:</p><script type="math/tex; mode=display">s_j \geq s_i - limit</script><p>因为$s_i - limit$是固定的,所以我们只要能维护出大于这个值的$j$中$f_j$最大的一个即可.</p><p>值域太大了没法值域线段树,所以把这个离散化下来树状数组静态维护最大值.</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar() (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> big=<span class="number">500010</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,k;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[big],t[big],f[big];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;pachy;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">    long long x(0),f(1);</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x*<span class="number">10</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">long</span> <span class="keyword">long</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x;x-=lowbit(x))t[x]=<span class="built_in">std</span>::max(t[x],k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">ret</span><span class="params">(-INF)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;to;x+=lowbit(x))ret=<span class="built_in">std</span>::max(ret,t[x]);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">excp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(R <span class="keyword">int</span> i(x);i&lt;to;i+=lowbit(i))t[i]=-INF;</span><br><span class="line">    <span class="keyword">for</span>(R <span class="keyword">int</span> i(x);i;i-=lowbit(i))t[i]=-INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">where</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">std</span>::lower_bound(pachy.begin(),pachy.end(),x)-pachy.begin()+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> lit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pachy.clear();</span><br><span class="line">    <span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)pachy.push_back(a[i]),pachy.push_back(a[i]-lit);</span><br><span class="line">    pachy.push_back(<span class="number">0l</span>l),<span class="built_in">std</span>::sort(pachy.begin(),pachy.end());</span><br><span class="line">    pachy.erase(<span class="built_in">std</span>::unique(pachy.begin(),pachy.end()),pachy.end());</span><br><span class="line">    <span class="keyword">int</span> psize=pachy.size();</span><br><span class="line">    <span class="comment">// debug(psize);</span></span><br><span class="line">    <span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=psize;++i)excp(i,psize);</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">0</span>,insert(where(<span class="number">0</span>),f[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i]=query(where(a[i]-lit),psize+<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">        insert(where(a[i]),f[i]);</span><br><span class="line">        <span class="keyword">if</span>(f[i]&gt;=k)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T=read();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        n=read(),k=read();</span><br><span class="line">        <span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=read()+a[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> l=(<span class="keyword">long</span> <span class="keyword">long</span>)<span class="number">-1e15</span>,r=-l,mid,ans;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">        &#123;</span><br><span class="line">            mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(mid))ans=mid,r=mid<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    end:<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天是题的话都能有思路,但是时间实在太紧了.</p><p>T1签到题直接秒了,几分钟过了大样例.</p><p>然后看T2,开始想了个错解,用线段树维护差分数列,写了半个多小时发现过不去大样例,然后手造了一组数据把自己卡了.</p><p>然后再看了十多分钟发现题里面的性质,只要取到最小的未出现的数即可,这个时候都九点半过了,想着后面还有整整两个题就没去多想别的实现思路,有个主席树的做法就直接上去写了,但是主席树写得比较少所以调得比较久,而且在处理回收值域的时候还写假了效率特别拉胯,测了几组手造的hack正确性没问题就去看T3了,这时还剩一个多小时,心里特别不爽,出去上厕所遇到zxy还问我”想不想骂今天出题人”…</p><p>看T3T4的部分分都给得多,决定不去想正解了,剩下时间不多就把这两题的部分分拿了,T3写了个$O(nm)$的背包拿了50,T4写了个二分后搜索的做法,稍微剪了点枝,期望拿50的但是只拿了40,第一个点莫名就搜不动了.</p><p>其实T3的正解考完中午回寝就有思路了,如果是三道题的考试就能做了,但是实现要用权值线段树,估计得和T2一样把自己搞死…</p><p>然后T2的主席树是真的假了,直接全部T完,下午讲题的时候知道yyy也用的主席树,做法和我差不多,但他也写挂了只有10分,而且能想到用最小未出现的数的话用堆就可以很直观地维护了,我这啥数据结构能力啊…</p><p>T4那个二分的check应该是用dp来做的,$dp$不难想,不过不优化的话是$O(n^2)$的,没我搜索高,而且优化又得写数据结构了,又是最后一题我估计我打不完…</p><p>写数据结构也得多想想实现过程,直接上去就写的话思路容易卡死,而且打的时候就得集中精神注意别打错了.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:无&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.lemir3.red/categories/总结/"/>
    
    
    <category term="总结" scheme="https://www.lemir3.red/tags/总结/"/>
    
  </entry>
  
  <entry>
    <title>「总结」NOIp前数据结构模板</title>
    <link href="https://www.lemir3.red/2020/10/28/zong-jie-noip-qian-shu-ju-jie-gou-mo-ban/"/>
    <id>https://www.lemir3.red/2020/10/28/zong-jie-noip-qian-shu-ju-jie-gou-mo-ban/</id>
    <published>2020-10-27T23:59:10.000Z</published>
    <updated>2020-11-01T13:44:46.457Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:背板大王</p><a id="more"></a><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="根号数据结构"><a href="#根号数据结构" class="headerlink" title="根号数据结构"></a>根号数据结构</h2><p>今年是2020年.</p><h3 id="莫队"><a href="#莫队" class="headerlink" title="莫队"></a>莫队</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,a,b,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> _Query &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(block[l]!=block[another.l])<span class="keyword">return</span> block[l]&lt;block[another.l];</span><br><span class="line"><span class="keyword">if</span>(block[l]^<span class="number">1</span>)<span class="keyword">return</span> r&gt;another.r;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> r&lt;another.r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;q[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read();len=n/<span class="built_in">sqrt</span>(n*<span class="number">2</span>/<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;a[i]=read(),block[i]=i/len+<span class="number">1</span>,++i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;q[i].l=read(),q[i].r=read(),q[i].a=read(),q[i].b=read(),q[i].id=i,++i);</span><br><span class="line"><span class="built_in">std</span>::sort(q+<span class="number">1</span>,q+<span class="number">1</span>+m);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(r&lt;q[i].r)insert(++r);</span><br><span class="line"><span class="keyword">while</span>(l&gt;q[i].l)insert(--l);</span><br><span class="line"><span class="keyword">while</span>(r&gt;q[i].r)delete_(r--);</span><br><span class="line"><span class="keyword">while</span>(l&lt;q[i].l)delete_(l++);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="带修莫队"><a href="#带修莫队" class="headerlink" title="带修莫队"></a>带修莫队</h3><p>在莫队转移的时候加上修改的影响,记录每个距离询问最近的修改,如果在进行询问时,进行的修改改多了,那么就撤销修改,如果改少了,就进行修改.</p><p>块长 $n^{\frac{2}{3}}$ 理论在带修莫队中是最优的,有时因常数原因 $n^{\frac{3}{4}}$ 更优.</p><p>然后在排序的时候用三个关键字,分别是左端点所在块,右端点所在块,查询的编号,尽量让编号小查询的靠前处理让修改尽量少.</p><p>下面的代码求出了区间内不同的数的个数,单点修改.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,pre,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Query &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(block[l]==block[another.l])</span><br><span class="line"><span class="keyword">if</span>(block[r]==block[another.r])<span class="keyword">return</span> id&lt;another.id;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> r&lt;another.r;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> l&lt;another.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;q[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Modify</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> pos,val;</span><br><span class="line">&#125;c[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(++cnt[x]==<span class="number">1</span>)++nowans;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(--cnt[x]==<span class="number">0</span>)--nowans;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos=c[x].pos,val=c[x].val;</span><br><span class="line"><span class="keyword">int</span> l_=q[i].l,r_=q[i].r;</span><br><span class="line"><span class="keyword">if</span>(pos&gt;=l_&amp;&amp;pos&lt;=r_)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!(cnt[a[pos]]<span class="number">-1</span>))--nowans;--cnt[a[pos]];</span><br><span class="line"><span class="keyword">if</span>(!cnt[val])++nowans;++cnt[val];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::swap(c[x].val,a[pos]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">pow</span>(n,<span class="number">0.75</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=read(),block[i]=(i<span class="number">-1</span>)/len+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> opt;<span class="built_in">std</span>::<span class="built_in">cin</span>&gt;&gt;opt;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="string">'Q'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=read(),y=read();</span><br><span class="line">q[++QCnt]=(_Query)&#123;x,y,CCnt,QCnt&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=read(),y=read();</span><br><span class="line">c[++CCnt]=(_Modify)&#123;x,y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::sort(q+<span class="number">1</span>,q+<span class="number">1</span>+QCnt);</span><br><span class="line">_l=q[<span class="number">1</span>].l,_r=q[<span class="number">1</span>].l<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=QCnt;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> nl=q[i].l,nr=q[i].r,nid=q[i].id,npre=q[i].pre;</span><br><span class="line"><span class="keyword">while</span>(_l&gt;nl)add(a[--_l]);</span><br><span class="line"><span class="keyword">while</span>(_r&gt;nr)del(a[_r--]);</span><br><span class="line"><span class="keyword">while</span>(_r&lt;nr)add(a[++_r]);</span><br><span class="line"><span class="keyword">while</span>(_l&lt;nl)del(a[_l++]);</span><br><span class="line"><span class="keyword">while</span>(now&lt;npre)work(++now,i);</span><br><span class="line"><span class="keyword">while</span>(now&gt;npre)work(now--,i);</span><br><span class="line">ans[nid]=nowans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=QCnt;++i)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回滚莫队"><a href="#回滚莫队" class="headerlink" title="回滚莫队"></a>回滚莫队</h3><p>只增莫队:对于左端点同块的询问按右端点单增排序,莫队的右端点和左端点都移到当前块的右端点上,对于每一个询问的右端点就直接向后增加进集合并更新当前答案,询问的左端点就复制一份当前的答案,向后增加至询问的左端点后更新进答案数组,然后删除回滚,不贡献答案.</p><p>只减莫队:将左端点同块的询问按右端点单减排序,莫队的右端点先移到 $n$ ,对于每一个询问的右端点直接减去并更新当前的答案,莫队的左端点先移到当前块的左端点,每次询问的左端点就复制一份当前的答案,减到询问的左端点后更新进答案数组,然后增加回滚,不贡献答案.</p><p>下面一份代码为只增莫队.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,m,len,_l=<span class="number">1</span>,_r,LastBlock,now;</span><br><span class="line"><span class="keyword">int</span> a[big],block[big],l[big],r[big],ans[big],*_block=block,*_a=a,*ll=l,*rr=r;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Query &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> block[l]==block[another.l]?r&lt;another.r:block[l]&lt;block[another.l];</span><br><span class="line">&#125;</span><br><span class="line">&#125;q[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">len=<span class="built_in">sqrt</span>(n);</span><br><span class="line">lxl tot=n/len;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=tot;++i)l[i]=*(rr+i<span class="number">-1</span>)+<span class="number">1</span>,r[i]=len*i;</span><br><span class="line"><span class="keyword">if</span>(*(rr+tot)&lt;n)++tot,l[tot]=*(rr+tot<span class="number">-1</span>)+<span class="number">1</span>,r[tot]=n;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=tot;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(*(ll+i));j&lt;=*(rr+i);++j)</span><br><span class="line">block[j]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)q[i].l=read(),q[i].r=read(),q[i].id=i;</span><br><span class="line"><span class="built_in">std</span>::sort(q+<span class="number">1</span>,q+<span class="number">1</span>+m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl l_=q[i].l,r_=q[i].r;</span><br><span class="line"><span class="keyword">if</span>(*(_block+l_)==*(_block+r_))</span><br><span class="line">&#123;</span><br><span class="line">lxl _ans(<span class="number">0</span>);</span><br><span class="line">DoSomething...</span><br><span class="line">ans[q[i].id]=_ans;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(block[l_]!=LastBlock)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(_r&gt;r[*(_block+l_)])del(_r--);</span><br><span class="line"><span class="keyword">while</span>(_l&lt;r[*(_block+l_)]+<span class="number">1</span>)del(_l++);</span><br><span class="line">_r=_l<span class="number">-1</span>;</span><br><span class="line">LastBlock=*(_block+l_),now=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(_r&lt;r_)add(++_r,now);</span><br><span class="line">lxl tmp=now,__l=_l;</span><br><span class="line"><span class="keyword">while</span>(__l&gt;l_)add(--__l,tmp);</span><br><span class="line">ans[q[i].id]=tmp;</span><br><span class="line"><span class="keyword">while</span>(__l&lt;_l)del(__l++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="莫队二次离线"><a href="#莫队二次离线" class="headerlink" title="莫队二次离线"></a>莫队二次离线</h3><p>珂朵莉给了你一个序列 $a$ ，每次查询给一个区间 $[l,r]$.</p><p>查询 $l \leq i &lt; j \leq r$ ,且 $a_i \oplus a_j$的二进制表示下有$k$个$1$的二元组 $(i,j)$ 的个数. $\oplus$ 是指按位异或。</p><p>第一行三个数表示 $n,m,k$ .</p><p>第二行 $n$ 个数表示序列 $a$ .</p><p>之后 $m$ 行,每行两个数 $l,r$ 表示一次查询.</p><p>输出 $m$ 行，每行一个数表示查询的结果.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query_Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,id,kl;</span><br><span class="line">    ll ans;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Query_Node &amp;u) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> kl!=u.kl?kl&lt;u.kl:(kl&amp;<span class="number">1</span>?r&lt;u.r:r&gt;u.r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;q[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,id;</span><br><span class="line">    Node(<span class="keyword">int</span> l=<span class="number">0</span>,<span class="keyword">int</span> r=<span class="number">0</span>,<span class="keyword">int</span> id=<span class="number">0</span>) : l(l),r(r),id(id) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">ll ans[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; two[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,k,a[maxn],tax[maxn],klen,pre[maxn];</span><br><span class="line"><span class="keyword">int</span> isu[maxn],ist;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x) ++ans,x-=(x&amp;(-x));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c=getchar())) (c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>);</span><br><span class="line">    x=c^<span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c=getchar())) x=x*<span class="number">10</span>+(c^<span class="number">48</span>);</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n);read(m);read(k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        read(a[i]);</span><br><span class="line">    klen=n/<span class="built_in">sqrt</span>(m*<span class="number">2</span>/<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        read(q[i].l);read(q[i].r);q[i].id=i;</span><br><span class="line">        q[i].kl=(q[i].l<span class="number">-1</span>)/klen+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(q+<span class="number">1</span>,q+m+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=maxa;++i) <span class="keyword">if</span>(calc(i)==k) isu[++ist]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=ist;++j) ++tax[isu[j]^a[i]];</span><br><span class="line">        pre[i]=tax[a[i+<span class="number">1</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,l=<span class="number">1</span>,r=<span class="number">0</span>;i&lt;=m;++i)<span class="comment">//先空跑莫队，找出绿色区间，同时处理前者的贡献</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;q[i].l) two[r].push_back(Node(l,q[i].l<span class="number">-1</span>,-i));</span><br><span class="line">        <span class="keyword">while</span>(l&lt;q[i].l) q[i].ans+=pre[l<span class="number">-1</span>],++l;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;q[i].l) two[r].push_back(Node(q[i].l,l<span class="number">-1</span>,i));</span><br><span class="line">        <span class="keyword">while</span>(l&gt;q[i].l) q[i].ans-=pre[l<span class="number">-2</span>],--l;</span><br><span class="line">        <span class="keyword">if</span>(r&lt;q[i].r) two[l<span class="number">-1</span>].push_back(Node(r+<span class="number">1</span>,q[i].r,-i));</span><br><span class="line">        <span class="keyword">while</span>(r&lt;q[i].r) q[i].ans+=pre[r],++r;</span><br><span class="line">        <span class="keyword">if</span>(r&gt;q[i].r) two[l<span class="number">-1</span>].push_back(Node(q[i].r+<span class="number">1</span>,r,i));</span><br><span class="line">        <span class="keyword">while</span>(r&gt;q[i].r) q[i].ans-=pre[r<span class="number">-1</span>],--r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(tax,<span class="number">0</span>,<span class="keyword">sizeof</span>(tax));</span><br><span class="line">    <span class="comment">//二次离线，处理后者的贡献</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=ist;++j) ++tax[isu[j]^a[i]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;Node&gt;::iterator it=two[i].begin();it!=two[i].end();++it)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=it-&gt;l;j&lt;=it-&gt;r;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp=tax[a[j]];</span><br><span class="line">                <span class="keyword">if</span>(j&lt;=i&amp;&amp;k==<span class="number">0</span>) tmp--;</span><br><span class="line">                <span class="keyword">if</span>(it-&gt;id&lt;<span class="number">0</span>) q[-it-&gt;id].ans-=tmp;</span><br><span class="line">                <span class="keyword">else</span> q[it-&gt;id].ans+=tmp;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) q[i].ans+=q[i<span class="number">-1</span>].ans,ans[q[i].id]=q[i].ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h3><h4 id="1"><a href="#1" class="headerlink" title="#1"></a>#1</h4><p>区间修改单点求值.</p><p>第一行输入一个数字.</p><p>第二行输入 $n$ 个数字,第 $i$ 个数字为,以空格隔开.</p><p>接下来输入 $n$ 行询问,每行输入四个数字 $opt$、$l$、$r$、$c$ ,以空格隔开.</p><p>若 $opt=0$ ,表示将位于 $[l,r]$ 的之间的数字都加 $c$ .</p><p>若 $opt=1$ ,表示询问 $a_r$ 的值,忽略 $l$ 和 $r$ .</p><p>对于每次询问,输出一行一个数字表示答案.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,len;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">50010</span>],block[<span class="number">50010</span>],mark[<span class="number">50010</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">UpDate</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=min(block[x]*len,y);i++)num[i]+=val;</span><br><span class="line"><span class="keyword">if</span>(block[x]!=block[y])<span class="keyword">for</span>(<span class="keyword">int</span> i=(block[y]<span class="number">-1</span>)*len+<span class="number">1</span>;i&lt;=y;i++)num[i]+=val;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=block[x]+<span class="number">1</span>;i&lt;=block[y]<span class="number">-1</span>;i++)mark[i]+=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> num[x]+mark[block[x]];&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">len=n/<span class="built_in">sqrt</span>(n*<span class="number">2</span>/<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)block[i]=(i<span class="number">-1</span>)/len+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,num+i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> opt,l,r,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;opt,&amp;l,&amp;r,&amp;c);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">0</span>)UpDate(l,r,c);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(r));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2"><a href="#2" class="headerlink" title="#2"></a>#2</h4><p>区间加法,区间询问小于$k$的数的个数.</p><p>第一行输入一个数字.</p><p>第二行输入 $n$ 个数字,第 $i$ 个数字为,以空格隔开.</p><p>接下来输入 $n$ 行询问,每行输入四个数字 $opt$、$l$、$r$、$c$ ,以空格隔开.</p><p>若 $opt=0$ ,表示将位于$[l,r]$ 的之间的数字都加 $c$.</p><p>若 $opt=1$ ,表示询问位于$[l,r]$ 中,小于 $c^2$ 的数字的个数.</p><p>对于每次询问,输出一行一个数字表示答案.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,len;</span><br><span class="line"><span class="keyword">int</span> block[<span class="number">50010</span>],mark[<span class="number">50010</span>],num[<span class="number">50010</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sort_</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v[block[x]].clear();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=(block[x]<span class="number">-1</span>)*len+<span class="number">1</span>;i&lt;=min(block[x]*len,n);i++)v[block[x]].push_back(num[i]);</span><br><span class="line">sort(v[block[x]].begin(),v[block[x]].end());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">UpDate</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=min(block[x]*len,y);i++)num[i]+=val;</span><br><span class="line">sort_(x);</span><br><span class="line"><span class="keyword">if</span>(block[x]!=block[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=(block[y]<span class="number">-1</span>)*len+<span class="number">1</span>;i&lt;=y;i++)num[i]+=val;</span><br><span class="line">sort_(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=block[x]+<span class="number">1</span>;i&lt;=block[y]<span class="number">-1</span>;i++)mark[i]+=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=min(block[x]*len,y);i++)</span><br><span class="line"><span class="keyword">if</span>(num[i]+mark[block[x]]&lt;val)</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">if</span>(block[x]!=block[y])</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=(block[y]<span class="number">-1</span>)*len+<span class="number">1</span>;i&lt;=y;i++)</span><br><span class="line"><span class="keyword">if</span>(num[i]+mark[block[y]]&lt;val)</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=block[x]+<span class="number">1</span>;i&lt;=block[y]<span class="number">-1</span>;i++)cnt+=lower_bound(v[i].begin(),v[i].end(),val-mark[i])-v[i].begin();</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="comment">//len=n/sqrt(n*2/3);</span></span><br><span class="line">len=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,num+i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">block[i]=(i<span class="number">-1</span>)/len+<span class="number">1</span>;</span><br><span class="line">v[block[i]].push_back(num[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=block[n];i++)sort(v[i].begin(),v[i].end());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> opt,l,r,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;opt,&amp;l,&amp;r,&amp;c);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">0</span>)UpDate(l,r,c);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(l,r,c*c));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3"><a href="#3" class="headerlink" title="#3"></a>#3</h4><p>区间加法,区间求小于某个值 $x$ 的前驱.</p><p>第一行输入一个数字.</p><p>第二行输入 $n$ 个数字,第 $i$ 个数字为,以空格隔开.</p><p>接下来输入 $n$ 行询问,每行输入四个数字 $opt$、$l$、$r$、$c$ ,以空格隔开.</p><p>若 $opt=0$ ,表示将位于 $[l,r]$ 的之间的数字都加 $c$.</p><p>若 $opt=1$ ,表示询问位于 $[l,r]$ 的 $c$ 的前驱的值(不存在则输出 $-1$ ).</p><p>对于每次询问,输出一行一个数字表示答案.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,len;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">500010</span>],mark[<span class="number">500010</span>],block[<span class="number">500010</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sort_</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v[block[x]].clear();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=(block[x]<span class="number">-1</span>)*len+<span class="number">1</span>;i&lt;=min(block[x]*len,n);i++)</span><br><span class="line">v[block[x]].push_back(num[i]);</span><br><span class="line">sort(v[block[x]].begin(),v[block[x]].end());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">UpDate</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=min(block[x]*len,y);i++)num[i]+=val;</span><br><span class="line">sort_(x);</span><br><span class="line"><span class="keyword">if</span>(block[x]!=block[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=(block[y]<span class="number">-1</span>)*len+<span class="number">1</span>;i&lt;=y;i++)num[i]+=val;</span><br><span class="line">sort_(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=block[x]+<span class="number">1</span>;i&lt;=block[y]<span class="number">-1</span>;i++)mark[i]+=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> max_=-INF;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=min(block[x]*len,y);i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(num[i]+mark[block[x]]&lt;val)</span><br><span class="line">&#123;</span><br><span class="line">max_=max(max_,num[i]+mark[block[x]]);</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(block[x]!=block[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=(block[y]<span class="number">-1</span>)*len+<span class="number">1</span>;i&lt;=y;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(num[i]+mark[block[y]]&lt;val)</span><br><span class="line">&#123;</span><br><span class="line">max_=max(max_,num[i]+mark[block[y]]);</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=block[x]+<span class="number">1</span>;i&lt;=block[y]<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> site=lower_bound(v[i].begin(),v[i].end(),val-mark[i])-v[i].begin();</span><br><span class="line"><span class="keyword">if</span>(site&amp;&amp;v[i][site<span class="number">-1</span>]+mark[i]&lt;val)</span><br><span class="line">&#123;</span><br><span class="line">max_=max(max_,v[i][site<span class="number">-1</span>]+mark[i]);</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flag==<span class="literal">true</span>?max_:<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">len=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,num+i);</span><br><span class="line">block[i]=(i<span class="number">-1</span>)/len+<span class="number">1</span>;</span><br><span class="line">v[block[i]].push_back(num[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=block[n];i++)sort(v[i].begin(),v[i].end());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> opt,x,y,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;opt,&amp;x,&amp;y,&amp;c);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">0</span>)UpDate(x,y,c);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(x,y,c));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4"><a href="#4" class="headerlink" title="#4"></a>#4</h4><p>区间加法区间求和.</p><p>第一行输入一个数字.</p><p>第二行输入 $n$ 个数字,第 $i$ 个数字为,以空格隔开.</p><p>接下来输入 $n$ 行询问,每行输入四个数字 $opt$、$l$、$r$、$c$ ,以空格隔开.</p><p>若 $opt=0$ ,表示将位于 $[l,r]$ 的之间的数字都加 $c$ .</p><p>若 $opt=1$ ,表示询问位于 $[l,r]$ 的所有数字的和 $\mod (c+1)$ .</p><p>对于每次询问,输出一行一个数字表示答案.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,len;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">50010</span>],block[<span class="number">50010</span>],sum[<span class="number">50010</span>],mark[<span class="number">50010</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">UpDate</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=min(block[x]*len,y);i++)</span><br><span class="line">&#123;</span><br><span class="line">num[i]+=val;</span><br><span class="line">sum[block[x]]+=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(block[x]!=block[y])</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=(block[y]<span class="number">-1</span>)*len+<span class="number">1</span>;i&lt;=y;i++)</span><br><span class="line">&#123;</span><br><span class="line">num[i]+=val;</span><br><span class="line">sum[block[y]]+=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=block[x]+<span class="number">1</span>;i&lt;=block[y]<span class="number">-1</span>;i++)mark[i]+=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=min(block[x]*len,y);i++)cnt+=num[i]+mark[block[x]];</span><br><span class="line"><span class="keyword">if</span>(block[x]!=block[y])</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=(block[y]<span class="number">-1</span>)*len+<span class="number">1</span>;i&lt;=y;i++)</span><br><span class="line">cnt+=num[i]+mark[block[y]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=block[x]+<span class="number">1</span>;i&lt;=block[y]<span class="number">-1</span>;i++)cnt+=sum[i]+mark[i]*len;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">len=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,num+i);</span><br><span class="line">block[i]=(i<span class="number">-1</span>)/len+<span class="number">1</span>;</span><br><span class="line">sum[block[i]]+=num[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> opt,l,r,val;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;opt,&amp;l,&amp;r,&amp;val);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">0</span>)UpDate(l,r,val);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(l,r)%(val+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5"><a href="#5" class="headerlink" title="#5"></a>#5</h4><p>区间开方区间求和.</p><p>第一行输入一个数字.</p><p>第二行输入 $n$ 个数字,第 $i$ 个数字为 $a_i$ ,以空格隔开.</p><p>接下来输入 $n$ 行询问,每行输入四个数字 $opt,l,r,c$ ,以空格隔开.</p><p>若 $opt=0$ ,表示将位于 $[l,r]$ 的之间的数字都开方.对于区间中每个 $a_i \leq (l \leq i &lt; r) , a_i \leftarrow \lfloor a_i \rfloor$. </p><p>若 $opt=1$ ,表示询问位于 $[l,r]$ 的所有数字的和.</p><p>对于每次询问，输出一行一个数字表示答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,len;</span><br><span class="line"><span class="keyword">int</span> block[<span class="number">50010</span>],num[<span class="number">50010</span>],times[<span class="number">50010</span>],ans[<span class="number">50010</span>],zero[<span class="number">50010</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">UpDate</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=x;i&lt;=min(block[x]*len,y);i++)</span><br><span class="line">&#123;</span><br><span class="line">ans[block[x]]-=num[i];</span><br><span class="line">num[i]=<span class="built_in">sqrt</span>(num[i]);</span><br><span class="line">ans[block[x]]+=num[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(block[x]!=block[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=(block[y]<span class="number">-1</span>)*len+<span class="number">1</span>;i&lt;=y;i++)</span><br><span class="line">&#123;</span><br><span class="line">ans[block[y]]-=num[i];</span><br><span class="line">num[i]=<span class="built_in">sqrt</span>(num[i]);</span><br><span class="line">ans[block[y]]+=num[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=block[x]+<span class="number">1</span>;i&lt;=block[y]<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(times[i]==<span class="number">5</span>||zero[i]==len)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">times[i]++;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j=(i<span class="number">-1</span>)*len+<span class="number">1</span>;j&lt;=i*len;j++)</span><br><span class="line">&#123;</span><br><span class="line">ans[i]-=num[j];</span><br><span class="line">num[j]=<span class="built_in">sqrt</span>(num[j]);</span><br><span class="line">ans[i]+=num[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=x;i&lt;=min(block[x]*len,y);i++)cnt+=num[i];</span><br><span class="line"><span class="keyword">if</span>(block[x]!=block[y])</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=(block[y]<span class="number">-1</span>)*len+<span class="number">1</span>;i&lt;=y;i++)</span><br><span class="line">cnt+=num[i];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=block[x]+<span class="number">1</span>;i&lt;=block[y]<span class="number">-1</span>;i++)cnt+=ans[i];</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">len=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,num+i);</span><br><span class="line">block[i]=(i<span class="number">-1</span>)/len+<span class="number">1</span>;</span><br><span class="line">ans[block[i]]+=num[i];</span><br><span class="line"><span class="keyword">if</span>(num[i]==<span class="number">0</span>)zero[block[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> opt,l,r,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;opt,&amp;l,&amp;r,&amp;c);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">0</span>)UpDate(l,r);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(l,r));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6"><a href="#6" class="headerlink" title="#6"></a>#6</h4><p>单点插入单点询问,数据随机.</p><p>第一行输入一个数字.</p><p>第二行输入 $n$ 个数字,第 $i$ 个数字为 $a_i$ ,以空格隔开.</p><p>接下来输入 $n$ 行询问,每行输入四个数字 $opt$、$l$、$r$、$c$ ,以空格隔开.</p><p>若 $opt=0$ ,表示在第 $l$ 个数字前插入数字 $r$ ( $c$ 忽略).</p><p>若 $opt=1$ ,表示询问 $a_r$ 的值( $l$ 和 $r$ 忽略).</p><p>对于每次询问，输出一行一个数字表示答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,len,BSize;</span><br><span class="line"><span class="keyword">int</span> link[<span class="number">10010</span>][<span class="number">700</span>],pre[<span class="number">10010</span>],aft[<span class="number">10010</span>],size[<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">inline</span> <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; find(<span class="keyword">int</span> x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>,i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(cnt+size[i]&lt;x)</span><br><span class="line">&#123;</span><br><span class="line">cnt+=size[i];</span><br><span class="line">i=aft[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; c;</span><br><span class="line">c.first=i;</span><br><span class="line">c.second=x-cnt;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BSize++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len+<span class="number">1</span>;i&lt;=size[x];i++)</span><br><span class="line">&#123;</span><br><span class="line">link[BSize][i-len]=link[x][i];</span><br><span class="line">link[x][i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">size[x]=len;</span><br><span class="line">size[BSize]=len;</span><br><span class="line">pre[aft[x]]=BSize;</span><br><span class="line">aft[BSize]=aft[x];</span><br><span class="line">pre[BSize]=x;</span><br><span class="line">aft[x]=BSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">UpDate</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fir=find(l).first,sec=find(l).second;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=size[fir];i&gt;=sec;i--)link[fir][i+<span class="number">1</span>]=link[fir][i];</span><br><span class="line">link[fir][sec]=val;</span><br><span class="line">size[fir]++;</span><br><span class="line"><span class="keyword">if</span>(size[fir]==(len&lt;&lt;<span class="number">1</span>))split(fir);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">len=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> block=(i<span class="number">-1</span>)/len+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> pos=i%len;</span><br><span class="line"><span class="keyword">if</span>(pos==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">pos=len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;link[block][pos]);</span><br><span class="line">size[block]++;</span><br><span class="line">pre[block]=block<span class="number">-1</span>;</span><br><span class="line">aft[block]=block+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">BSize=n%len==<span class="number">0</span>?n/len:n/len+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> opt,l,r,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;opt,&amp;l,&amp;r,&amp;c);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">0</span>)UpDate(l,r);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; p=find(r);</span><br><span class="line"><span class="keyword">int</span> fir=p.first,sec=p.second;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,link[fir][sec]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7"><a href="#7" class="headerlink" title="#7"></a>#7</h4><p>区间乘,区间加,单点询问.</p><p>第一行输入一个数字 $n$ .</p><p>第二行输入 $n$ 个数字,第 $i$ 个数字为,以空格隔开.</p><p>接下来输入 $n$ 行询问,每行输入四个数字 $opt$、$l$、$r$、$c$ ,以空格隔开.</p><p>若 $opt=0$ ,表示将位于 $[l,r]$ 的之间的数字都加 。</p><p>若 $opt=1$ ,表示将位于 $[l,r]$ 的之间的数字都乘 。</p><p>若 $opt=2$ ,表示询问 $a_r$ 的值 $\bmod 10007$( $l$ 和 $r$ 忽略).</p><p>对于每次询问，输出一行一个数字表示答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 10007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,len;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">100010</span>],block[<span class="number">100010</span>],AddMark[<span class="number">100010</span>],MulMark[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=(block[x]<span class="number">-1</span>)*len+<span class="number">1</span>;i&lt;=min(block[x]*len,n);i++)</span><br><span class="line">num[i]=(num[i]*MulMark[block[i]]+AddMark[block[i]])%mod;</span><br><span class="line">MulMark[block[x]]=<span class="number">1</span>;</span><br><span class="line">AddMark[block[x]]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=x;i&lt;=min(block[x]*len,y);i++)</span><br><span class="line">num[i]=(num[i]+val)%mod;</span><br><span class="line"><span class="keyword">if</span>(block[x]!=block[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=(block[y]<span class="number">-1</span>)*len+<span class="number">1</span>;i&lt;=min(block[y]*len,n);i++)</span><br><span class="line">num[i]=(num[i]*MulMark[block[i]]+AddMark[block[i]])%mod;</span><br><span class="line">MulMark[block[y]]=<span class="number">1</span>;</span><br><span class="line">AddMark[block[y]]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=(block[y]<span class="number">-1</span>)*len+<span class="number">1</span>;i&lt;=y;i++)</span><br><span class="line">num[i]=(num[i]+val)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=block[x]+<span class="number">1</span>;i&lt;=block[y]<span class="number">-1</span>;i++)</span><br><span class="line">AddMark[i]=(AddMark[i]+val)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=(block[x]<span class="number">-1</span>)*len+<span class="number">1</span>;i&lt;=min(block[x]*len,n);i++)</span><br><span class="line">num[i]=(num[i]*MulMark[block[i]]+AddMark[block[i]])%mod;</span><br><span class="line">MulMark[block[x]]=<span class="number">1</span>;</span><br><span class="line">AddMark[block[x]]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=x;i&lt;=min(block[x]*len,y);i++)</span><br><span class="line">num[i]=(num[i]*val)%mod;</span><br><span class="line"><span class="keyword">if</span>(block[x]!=block[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=(block[y]<span class="number">-1</span>)*len+<span class="number">1</span>;i&lt;=min(block[y]*len,n);i++)</span><br><span class="line">num[i]=(num[i]*MulMark[block[i]]+AddMark[block[i]])%mod;</span><br><span class="line">MulMark[block[y]]=<span class="number">1</span>;</span><br><span class="line">AddMark[block[y]]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=(block[y]<span class="number">-1</span>)*len+<span class="number">1</span>;i&lt;=y;i++)num[i]=(num[i]*val)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=block[x]+<span class="number">1</span>;i&lt;=block[y]<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">AddMark[i]=(AddMark[i]*val)%mod;</span><br><span class="line">MulMark[i]=(MulMark[i]*val)%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">n=read();</span><br><span class="line">len=<span class="built_in">sqrt</span>(n)/<span class="number">2</span>;</span><br><span class="line"><span class="comment">//len=n/sqrt(n*2/3);</span></span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">num[i]=read();</span><br><span class="line">num[i]%=mod;</span><br><span class="line">block[i]=(i<span class="number">-1</span>)/len+<span class="number">1</span>;</span><br><span class="line">MulMark[block[i]]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> opt,l,r,c;</span><br><span class="line">opt=read();</span><br><span class="line">l=read(),r=read(),c=read();</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">0</span>)add(l,r,c);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)mul(l,r,c);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">2</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(num[r]*MulMark[block[r]]+AddMark[block[r]])%mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8"><a href="#8" class="headerlink" title="#8"></a>#8</h4><p>区间询问等于一个数 $c$ 的元素个数,并将这个区间的所有元素改为$c$.</p><p>第一行输入一个数字 $n$ .</p><p>第二行输入 $n$ 个数字,第$i$个数字为 $a_i$ ,以空格隔开.</p><p>接下来输入 $n$ 行询问,每行输入三个数字 $l$、$r$、$c$ ,以空格隔开。</p><p>表示先查询位于 $[l,r]$ 的数字有多少个是 $c$ ,再把位于 $[l,r]$ 的数字都改为 $c$ .</p><p>对于每次询问，输出一行一个数字表示答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,len;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">100010</span>],block[<span class="number">100010</span>],change[<span class="number">100010</span>],size[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">UpDate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(change[block[x]]==<span class="number">-1</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=(block[x]<span class="number">-1</span>)*len+<span class="number">1</span>;i&lt;=min(block[x]*len,n);i++)</span><br><span class="line">num[i]=change[block[x]];</span><br><span class="line">change[block[x]]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">UpDate(x);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=x;i&lt;=min(block[x]*len,y);i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(num[i]==val)cnt++;</span><br><span class="line">num[i]=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(block[x]!=block[y])</span><br><span class="line">&#123;</span><br><span class="line">UpDate(y);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=(block[y]<span class="number">-1</span>)*len+<span class="number">1</span>;i&lt;=y;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(num[i]==val)cnt++;</span><br><span class="line">num[i]=val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=block[x]+<span class="number">1</span>;i&lt;=block[y]<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(change[i]==<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j=(i<span class="number">-1</span>)*len+<span class="number">1</span>;j&lt;=min(i*len,n);j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(num[j]==val)cnt++;</span><br><span class="line">num[j]=val;</span><br><span class="line">&#125;</span><br><span class="line">change[i]=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(change[i]==val)cnt+=size[i];</span><br><span class="line">change[i]=val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(change,<span class="number">-1</span>,<span class="keyword">sizeof</span>(change));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">len=n/<span class="built_in">sqrt</span>(n*<span class="number">2</span>/<span class="number">3</span>);</span><br><span class="line"><span class="comment">//len=sqrt(n);</span></span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,num+i);</span><br><span class="line">block[i]=(i<span class="number">-1</span>)/len+<span class="number">1</span>;</span><br><span class="line">size[block[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> l,r,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;r,&amp;c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(l,r,c));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9"><a href="#9" class="headerlink" title="#9"></a>#9</h4><p>求区间最小众数.</p><p>第一行输入一个数字 $n$ .</p><p>第二行输入 $n$ 个数字,第 $i$ 个数字为以空格隔开。</p><p>接下来输入 $n$ 行询问,每行输入两个数字 $l$,$r$ ,以空格隔开.</p><p>表示查询位于 $[l,r]$ 的数字的众数。</p><p>对于每次询问,输出一行一个数字表示答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,len,id;</span><br><span class="line"><span class="keyword">int</span> block[<span class="number">100010</span>],num[<span class="number">100010</span>],Max[<span class="number">2010</span>][<span class="number">2010</span>],val[<span class="number">100010</span>],times[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">bool</span> flag[<span class="number">100010</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v[<span class="number">100010</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;Map;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NUMBER</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num,times;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> max_=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(times,<span class="number">0</span>,<span class="keyword">sizeof</span>(times));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=(x<span class="number">-1</span>)*len+<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">times[num[i]]++;</span><br><span class="line"><span class="keyword">if</span>(times[num[i]]&gt;cnt||times[num[i]]==cnt&amp;&amp;val[num[i]]&lt;val[max_])</span><br><span class="line">&#123;</span><br><span class="line">cnt=times[num[i]];</span><br><span class="line">max_=num[i];</span><br><span class="line">&#125;</span><br><span class="line">Max[x][block[i]]=max_;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">GetTimes</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> upper_bound(v[id].begin(),v[id].end(),y)-lower_bound(v[id].begin(),v[id].end(),x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=Max[block[x]+<span class="number">1</span>][block[y]<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">int</span> cnt=GetTimes(ans,x,y);</span><br><span class="line"><span class="built_in">memset</span>(flag,<span class="literal">false</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line">flag[ans]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=x;i&lt;=min(block[x]*len,y);i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag[num[i]]==<span class="literal">true</span>)<span class="keyword">continue</span>;</span><br><span class="line">flag[num[i]]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> cnt_=GetTimes(num[i],x,y);</span><br><span class="line"><span class="keyword">if</span>(cnt_&gt;cnt||cnt_==cnt&amp;&amp;val[num[i]]&lt;val[ans])</span><br><span class="line">&#123;</span><br><span class="line">cnt=cnt_;</span><br><span class="line">ans=num[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(block[x]!=block[y])</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=(block[y]<span class="number">-1</span>)*len+<span class="number">1</span>;i&lt;=y;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag[num[i]]==<span class="literal">true</span>)<span class="keyword">continue</span>;</span><br><span class="line">flag[num[i]]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> cnt_=GetTimes(num[i],x,y);</span><br><span class="line"><span class="keyword">if</span>(cnt_&gt;cnt||cnt_==cnt&amp;&amp;val[num[i]]&lt;val[ans])</span><br><span class="line">&#123;</span><br><span class="line">cnt=cnt_;</span><br><span class="line">ans=num[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> val[ans];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="comment">//len=n/sqrt(n*2/3);</span></span><br><span class="line">len=<span class="number">80</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,num+i);</span><br><span class="line">block[i]=(i<span class="number">-1</span>)/len+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!Map[num[i]])</span><br><span class="line">&#123;</span><br><span class="line">Map[num[i]]=++id;</span><br><span class="line">val[id]=num[i];</span><br><span class="line">&#125;</span><br><span class="line">num[i]=Map[num[i]];</span><br><span class="line">v[num[i]].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=block[n];i++)prework(i);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(l,r));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10"><a href="#10" class="headerlink" title="#10"></a>#10</h4><p>带插入区间 $k$ 小值.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">7e4</span>+<span class="number">5</span>,maxk=<span class="number">505</span>,klen=<span class="number">265</span>,vlen=<span class="number">265</span>,lim=<span class="number">7e4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ts[maxn],tk[maxn],vbel[maxn],bcnt,n;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Blocks</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> sum[maxn],ksum[maxn],a[maxn],siz,pre,suf;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getpart</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;++i)</span><br><span class="line">            ++ts[a[i]],++tk[vbel[a[i]]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clrpart</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;++i)</span><br><span class="line">            ts[a[i]]=tk[vbel[a[i]]]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;blk[maxk&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> pii <span class="title">belong</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(x&gt;blk[res].siz)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!blk[res].suf) <span class="keyword">return</span> make_pair(res,x);</span><br><span class="line">        x-=blk[res].siz,res=blk[res].suf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> make_pair(res,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findkth</span><span class="params">(<span class="keyword">int</span> b1,<span class="keyword">int</span> b2,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=vlen,cnt=blk[b2].ksum[<span class="number">1</span>]-blk[b1].ksum[<span class="number">1</span>]+tk[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;cnt&lt;k;++x,res=min(res+vlen,lim),cnt+=blk[b2].ksum[x]-blk[b1].ksum[x]+tk[x]);</span><br><span class="line">    <span class="keyword">for</span>(;cnt&gt;=k;cnt-=blk[b2].sum[res]-blk[b1].sum[res]+ts[res],--res);</span><br><span class="line">    <span class="keyword">return</span> res+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pii lb=belong(l),rb=belong(r);</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(lb.first==rb.first)</span><br><span class="line">    &#123;</span><br><span class="line">        blk[lb.first].getpart(lb.second,rb.second);</span><br><span class="line">        res=findkth(<span class="number">0</span>,<span class="number">0</span>,k);</span><br><span class="line">        blk[lb.first].clrpart(lb.second,rb.second);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        blk[lb.first].getpart(lb.second,blk[lb.first].siz);</span><br><span class="line">        blk[rb.first].getpart(<span class="number">1</span>,rb.second);</span><br><span class="line">        res=findkth(lb.first,blk[rb.first].pre,k);</span><br><span class="line">        blk[rb.first].clrpart(<span class="number">1</span>,rb.second);</span><br><span class="line">        blk[lb.first].clrpart(lb.second,blk[lb.first].siz);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pii bl=belong(x);</span><br><span class="line">    <span class="keyword">int</span> lasv=blk[bl.first].a[bl.second];</span><br><span class="line">    <span class="keyword">if</span>(val==lasv) <span class="keyword">return</span>;</span><br><span class="line">    blk[bl.first].a[bl.second]=val;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=bl.first;i;i=blk[i].suf)</span><br><span class="line">    &#123;</span><br><span class="line">        --blk[i].sum[lasv];--blk[i].ksum[vbel[lasv]];</span><br><span class="line">        ++blk[i].sum[val];++blk[i].ksum[vbel[val]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ++bcnt;</span><br><span class="line">    <span class="built_in">memcpy</span>(blk[bcnt].sum,blk[x].sum,<span class="keyword">sizeof</span>(blk[x].sum));</span><br><span class="line">    <span class="built_in">memcpy</span>(blk[bcnt].ksum,blk[x].ksum,<span class="keyword">sizeof</span>(blk[x].ksum));</span><br><span class="line">    <span class="keyword">int</span> nsiz=blk[bcnt].siz=blk[x].siz=blk[x].siz&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=nsiz+<span class="number">1</span>;i&lt;=(nsiz&lt;&lt;<span class="number">1</span>);++i)</span><br><span class="line">    &#123;</span><br><span class="line">        blk[bcnt].a[i-nsiz]=blk[x].a[i];</span><br><span class="line">        --blk[x].sum[blk[x].a[i]];--blk[x].ksum[vbel[blk[x].a[i]]];</span><br><span class="line">        blk[x].a[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    blk[blk[x].suf].pre=bcnt;</span><br><span class="line">    blk[bcnt].pre=x;blk[bcnt].suf=blk[x].suf;</span><br><span class="line">    blk[x].suf=bcnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pii bl=belong(x);++blk[bl.first].siz;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=blk[bl.first].siz;i&gt;bl.second;--i) blk[bl.first].a[i]=blk[bl.first].a[i<span class="number">-1</span>];</span><br><span class="line">    blk[bl.first].a[bl.second]=val;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=bl.first;i;i=blk[i].suf)</span><br><span class="line">        ++blk[i].sum[val],++blk[i].ksum[vbel[val]];</span><br><span class="line">    <span class="keyword">if</span>(blk[bl.first].siz==(klen&lt;&lt;<span class="number">1</span>)) split(bl.first);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c=getchar())) (c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>);</span><br><span class="line">    x=c^<span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c=getchar())) x=x*<span class="number">10</span>+(c^<span class="number">48</span>);</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l,r,x,ans=<span class="number">0</span>,q;</span><br><span class="line">    <span class="keyword">char</span> opt[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lim;++i) vbel[i]=(i<span class="number">-1</span>)/vlen+<span class="number">1</span>;vbel[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    read(n);</span><br><span class="line">    x=<span class="number">1</span>;bcnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        read(blk[bcnt].a[x]);</span><br><span class="line">        <span class="keyword">if</span>(i!=n) ++x;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;klen) blk[bcnt].siz=klen,++bcnt,x=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    blk[bcnt].siz=x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=bcnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        blk[i].pre=i<span class="number">-1</span>;blk[i].suf=i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=blk[i].siz;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;=bcnt;++k)</span><br><span class="line">                ++blk[k].sum[blk[i].a[j]],++blk[k].ksum[vbel[blk[i].a[j]]];</span><br><span class="line">    &#125;</span><br><span class="line">    blk[bcnt].suf=<span class="number">0</span>;</span><br><span class="line">    read(q);</span><br><span class="line">    <span class="keyword">while</span>(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,opt);</span><br><span class="line">        read(l);read(r);l^=ans;r^=ans;</span><br><span class="line">        <span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">'Q'</span>) read(x),x^=ans,<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans=query(l,r,x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">'M'</span>) modify(l,r);</span><br><span class="line">        <span class="keyword">else</span> insert(l,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><h3 id="堆-1"><a href="#堆-1" class="headerlink" title="堆"></a>堆</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::priority_queue &lt;<span class="keyword">int</span>,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,<span class="built_in">std</span>::greater&lt;<span class="keyword">int</span>&gt; &gt;q;</span><br></pre></td></tr></table></figure><h3 id="左偏树"><a href="#左偏树" class="headerlink" title="左偏树"></a>左偏树</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ch[big][<span class="number">2</span>],val[big],dis[big],fa[big];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>||y==<span class="number">0</span>)<span class="keyword">return</span> x+y;</span><br><span class="line">    <span class="keyword">if</span>(val[x]&gt;val[y]||(val[x]==val[y]&amp;&amp;x&gt;y))swap(x,y);</span><br><span class="line">    ch[x][<span class="number">1</span>]=merge(ch[x][<span class="number">1</span>],y);</span><br><span class="line">    <span class="keyword">if</span>(dis[ch[x][<span class="number">0</span>]]&lt;dis[ch[x][<span class="number">1</span>]])swap(ch[x][<span class="number">0</span>],ch[x][<span class="number">1</span>]);</span><br><span class="line">    fa[x]=fa[ch[x][<span class="number">0</span>]]=fa[ch[x][<span class="number">1</span>]]=x;</span><br><span class="line">    dis[x]=dis[ch[x][<span class="number">1</span>]]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetFa</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==fa[x]?x:fa[x]=GetFa(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    val[x]=<span class="number">-1</span>;</span><br><span class="line">    fa[ch[x][<span class="number">0</span>]]=ch[x][<span class="number">0</span>],fa[ch[x][<span class="number">1</span>]]=ch[x][<span class="number">1</span>];</span><br><span class="line">    fa[x]=merge(ch[x][<span class="number">0</span>],ch[x][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    dis[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)val[i]=read(),fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,opt,x,y;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        opt=read();</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=read(),y=read();</span><br><span class="line">            <span class="keyword">if</span>(val[x]==<span class="number">-1</span>||val[y]==<span class="number">-1</span>||x==y)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> XFa=GetFa(x),YFa=GetFa(y);</span><br><span class="line">            merge(XFa,YFa);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x=read();</span><br><span class="line">            <span class="keyword">if</span>(val[x]==<span class="number">-1</span>)&#123;<span class="built_in">printf</span>(<span class="string">"-1\n"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">            <span class="keyword">int</span> XFa=GetFa(x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,val[XFa]);</span><br><span class="line">            pop(XFa);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单调数据结构"><a href="#单调数据结构" class="headerlink" title="单调数据结构"></a>单调数据结构</h2><h3 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),k=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)a[i]=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r&amp;&amp;q[l]&lt;i-k+<span class="number">1</span>)l++;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r&amp;&amp;a[q[r<span class="number">-1</span>]]&gt;a[i])r--;</span><br><span class="line">q[r++]=i;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=k)<span class="built_in">printf</span>(<span class="string">"%d "</span>,a[q[l]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">l=r=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r&amp;&amp;q[l]&lt;i-k+<span class="number">1</span>)l++;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r&amp;&amp;a[q[r<span class="number">-1</span>]]&lt;a[i])r--;</span><br><span class="line">q[r++]=i;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=k)<span class="built_in">printf</span>(<span class="string">"%d "</span>,a[q[l]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)hig[i]=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s.empty())s.push(hig[i]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(hig[i]&gt;=s.top())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(!s.empty()&amp;&amp;hig[i]&gt;=s.top())s.pop();</span><br><span class="line"><span class="keyword">if</span>(!s.empty())ans+=s.size();</span><br><span class="line">s.push(hig[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!s.empty())ans+=s.size();</span><br><span class="line">s.push(hig[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><h3 id="单点修改，区间查询"><a href="#单点修改，区间查询" class="headerlink" title="单点修改，区间查询"></a>单点修改，区间查询</h3><p><strong>题目描述</strong></p><p>给定数列 $a_1,a_2…a_n$ ，你需要依次进行 $q$ 个操作，操作有两类：</p><p><code>1 i x</code>：给定 $i,x$，将 $a_i$ 加上 $x$；</p><p><code>2 l r</code>：给定 $l,r$，求 $∑_{i=l}^ra_i$ 的值（换言之，$求 a_l+a_{l+1}+a_{l+2}+…+a_r$ 的值）。</p><p><strong>输入格式</strong></p><p>第一行包含 $2$ 个正整数 $n,q$，表示数列长度和询问个数。保证 ($1≤n,q≤10^6$)。</p><p>第二行 $n$ 个整数 $a_1,a_2,a_3,…a_n$，表示初始数列。保证 $|a_i|≤10^6$。</p><p>接下来 $q$ 行，每行一个操作，为以下两种之一：</p><p><code>1 i x</code>：给定 $i,x$，将 $a_i$ 加上 $x$；</p><p><code>2 l r</code>：给定 $l,r$，求 $∑_{i=l}^ra_i$ 的值。</p><p>保证 $1≤l,r≤n,|x|≤10^6$。</p><p><strong>输出格式</strong></p><p>对于每个 <code>2 l r</code> 操作输出一行，每行有一个整数，表示所求的结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,q,opt,x,y;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[N],t[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> i,<span class="keyword">long</span> <span class="keyword">long</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=n)</span><br><span class="line">&#123;</span><br><span class="line">t[i]+=w;</span><br><span class="line">i+=i&amp;-i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans+=t[i];</span><br><span class="line">i-=i&amp;-i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,a+i);</span><br><span class="line">update(i,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(q--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;opt,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>) update(x,y);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sum(y)-sum(x<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间修改，单点查询"><a href="#区间修改，单点查询" class="headerlink" title="区间修改，单点查询"></a>区间修改，单点查询</h3><p><strong>题目描述</strong></p><p>这是一道模板题。</p><p>给定数列 $a[1],a[2],…a[n]$，你需要依次进行 $q$ 个操作，操作有两类：</p><p><code>1 l r x</code>：给定 $l,r,x$，对于所有 $i∈[l,r]$，将 $a[i]$ 加上 $x$（换言之，将 $a[l],a[l+1]…a[r]$ 分别加上 x）；</p><p><code>2 i</code>：给定 $i$，求 $a[i]$ 的值。</p><p><strong>输入格式</strong></p><p>第一行包含 $2$ 个正整数 ，表示数列长度和询问个数 。 第二行 $n$ 个整数 ，表示初始数列。接下来 $m$ 行，每行一个操作，为以下两种之一：</p><p><code>1 l r x</code>：对于所有  $i∈[l,r]$，将 $a[i]$ 加上 $x$；</p><p><code>2 i</code>：给定 $i$，求 $a[i]$ 的值。</p><p>保证 $1≤l,r≤n,|x|≤10^6$。</p><p><strong>输出格式</strong></p><p>对于每个 <code>2 i</code> 操作，输出一行，每行有一个整数，表示所求的结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,opt,l,r,x;</span><br><span class="line"><span class="keyword">int</span> a[N],t[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=n)</span><br><span class="line">&#123;</span><br><span class="line">t[i]+=w;</span><br><span class="line">i+=i&amp;-i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i)</span><br><span class="line">&#123;</span><br><span class="line">ans+=t[i];</span><br><span class="line">i-=i&amp;-i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,a+i);</span><br><span class="line">update(i,a[i]-a[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(q--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;opt);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;l,&amp;r,&amp;x);</span><br><span class="line">update(l,x),update(r+<span class="number">1</span>,-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(x));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间修改，区间查询"><a href="#区间修改，区间查询" class="headerlink" title="区间修改，区间查询"></a>区间修改，区间查询</h3><p><strong>题目描述</strong></p><p>这是一道模板题。</p><p>给定数列 $a[1],a[2]…a[n]$，你需要依次进行 $q$ 个操作，操作有两类：</p><p><code>1 l r x</code>：给定 $l,r$，对于所有 $i∈[l,r]$，将 $a[i]$ 加上 $x$（换言之，将 $a[l],a[l+1]…a[r]$ 分别加上 $x$）；</p><p><code>2 l r</code>：给定 ，求 $ ∑^r_{i=l}a[i]$ 的值（换言之，求 $a[l]+a[l+1]+…a[r]$ 的值）。</p><p><strong>输入格式</strong></p><p>第一行包含 $2$ 个正整数 $n,q$，表示数列长度和询问个数。保证 $1≤n,q≤10^6$。</p><p>第二行 $n$ 个整数 $a[1],a[2],…a[n]$，表示初始数列。保证 $|a[i]|≤10^6$。</p><p>接下来 $q$ 行，每行一个操作，为以下两种之一：</p><p><code>1 l r x</code>：对于所有 $i∈[l,r]$，将 $a[i]$ 加上 $x$；</p><p><code>2 l r</code>：输出 $∑^r_{i=l}a[i]$ 的值。</p><p>保证 $1≤l,r≤10^6,|x|≤10^6$。</p><p><strong>输出格式</strong></p><p>对于每个 2 l r 操作，输出一行，每行有一个整数，表示所求的结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,opt,l,r,x;</span><br><span class="line"><span class="keyword">int</span> a[N],sum1[N],sum2[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=i;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=n)</span><br><span class="line">&#123;</span><br><span class="line">sum1[i]+=w,sum2[i]+=w*(x<span class="number">-1</span>);</span><br><span class="line">i+=i&amp;-i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,x=i;</span><br><span class="line"><span class="keyword">while</span>(i&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans+=x*sum1[i]-sum2[i];</span><br><span class="line">i-=i&amp;-i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,a+i);</span><br><span class="line">update(i,a[i]-a[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(q--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;opt);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;l,&amp;r,&amp;x);</span><br><span class="line">update(l,x),update(r+<span class="number">1</span>,-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;l,&amp;r);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(r)-query(l<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><h3 id="普通线段树"><a href="#普通线段树" class="headerlink" title="普通线段树"></a>普通线段树</h3><p><strong>题目描述</strong></p><p>如题，已知一个数列，你需要进行下面三种操作：</p><ul><li>将某区间每一个数乘上 $x$</li><li>将某区间每一个数加上 $x$</li><li>求出某区间每一个数的和</li></ul><p><strong>输入格式</strong></p><p>第一行包含三个整数 $n,m,p$，分别表示该数列数字的个数、操作的总个数和模数。</p><p>第二行包含 $n$ 个用空格分隔的整数，其中第 $i$ 个数字表示数列第 $i$ 项的初始值。</p><p>接下来 $m$ 行每行包含若干个整数，表示一个操作，具体如下：</p><p>操作 $1$： 格式：<code>1 x y k</code> 含义：将区间 $[x,y]$ 内每个数乘上 $k$</p><p>操作 $2$： 格式：<code>2 x y k</code> 含义：将区间 $[x,y]$ 内每个数加上 $k$</p><p>操作 $3$： 格式：<code>3 x y</code> 含义：输出区间 $[x,y]$ 内每个数的和对 $k$ 取模所得的结果</p><p><strong>输出格式</strong></p><p>输出包含若干行整数，即为所有操作 $3$ 的结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,p,opt,x,y,k;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,sum,mul,add;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[u].sum=(t[u&lt;&lt;<span class="number">1</span>].sum+t[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum)%p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> L=u&lt;&lt;<span class="number">1</span>,R=L|<span class="number">1</span>;</span><br><span class="line">t[L].sum=(<span class="number">1l</span>l*t[L].sum*t[u].mul+<span class="number">1l</span>l*(t[L].r-t[L].l+<span class="number">1</span>)*t[u].add)%p;</span><br><span class="line">t[R].sum=(<span class="number">1l</span>l*t[R].sum*t[u].mul+<span class="number">1l</span>l*(t[R].r-t[R].l+<span class="number">1</span>)*t[u].add)%p;</span><br><span class="line">t[L].mul=<span class="number">1l</span>l*t[L].mul*t[u].mul%p;</span><br><span class="line">t[R].mul=<span class="number">1l</span>l*t[R].mul*t[u].mul%p;</span><br><span class="line">t[L].add=(<span class="number">1l</span>l*t[L].add*t[u].mul+t[u].add)%p;</span><br><span class="line">t[R].add=(<span class="number">1l</span>l*t[R].add*t[u].mul+t[u].add)%p;</span><br><span class="line">t[u].mul=<span class="number">1</span>,t[u].add=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[u].l=l,t[u].r=r,t[u].mul=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">&#123;</span><br><span class="line">t[u].sum=a[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=t[u].l+t[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(u&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">build(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">pushup(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[u].l&gt;=l&amp;&amp;t[u].r&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">t[u].sum=<span class="number">1l</span>l*t[u].sum*k%p;</span><br><span class="line">t[u].mul=<span class="number">1l</span>l*t[u].mul*k%p;</span><br><span class="line">t[u].add=<span class="number">1l</span>l*t[u].add*k%p;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t[u].mul!=<span class="number">1</span>||t[u].add)</span><br><span class="line">pushdown(u);</span><br><span class="line"><span class="keyword">int</span> mid=t[u].l+t[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">mul(u&lt;&lt;<span class="number">1</span>,l,r,k);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">mul(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line">pushup(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[u].l&gt;=l&amp;&amp;t[u].r&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">t[u].sum=(t[u].sum+<span class="number">1l</span>l*k*(t[u].r-t[u].l+<span class="number">1</span>))%p;</span><br><span class="line">t[u].add=(t[u].add+k)%p;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t[u].mul!=<span class="number">1</span>||t[u].add)</span><br><span class="line">pushdown(u);</span><br><span class="line"><span class="keyword">int</span> mid=t[u].l+t[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">add(u&lt;&lt;<span class="number">1</span>,l,r,k);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">add(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line">pushup(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[u].l&gt;=l&amp;&amp;t[u].r&lt;=r)</span><br><span class="line"><span class="keyword">return</span> t[u].sum;</span><br><span class="line"><span class="keyword">if</span>(t[u].mul!=<span class="number">1</span>||t[u].add)</span><br><span class="line">pushdown(u);</span><br><span class="line"><span class="keyword">int</span> mid=t[u].l+t[u].r&gt;&gt;<span class="number">1</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">sum=(sum+query(u&lt;&lt;<span class="number">1</span>,l,r))%p;</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">sum=(sum+query(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r))%p;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;p);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;opt);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;k);</span><br><span class="line">mul(<span class="number">1</span>,x,y,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;k);</span><br><span class="line">add(<span class="number">1</span>,x,y,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(<span class="number">1</span>,x,y));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="李超线段树"><a href="#李超线段树" class="headerlink" title="李超线段树"></a>李超线段树</h3><p><strong>题目描述</strong></p><p>要求在平面直角坐标系下维护两个操作：</p><ol><li>在平面上加入一条线段。记第 $i$ 条被插入的线段的标号为 $i$。</li><li>给定一个数 $k$，询问与直线 $x = k$ 相交的线段中，交点纵坐标最大的线段的编号。</li></ol><p><strong>输入格式</strong></p><p><strong>本题输入强制在线</strong>。</p><p>输入的第一行是一个整数 $n$，代表操作的个数。</p><p>接下来 $n$ 行，每行若干个用空格隔开的整数，第 $(i+1)$ 行的第一个整数为 $op$，代表第 $i$ 次操作的类型。</p><p>若 $op = 0$，则后跟一个整数 $k$，代表本次操作为查询所所有与直线 $x = (k + lastans - 1) \bmod 39989 + 1$ 相交的线段中，交点纵坐标最大的线段编号。</p><p>若 $op = 1$，则后跟四个整数 $x_0, y_0, x_1, y_1$，记  $x_i’ = (x_i + lastans - 1) \bmod 39989 + 1$ ，$y_i’ = (y_i + lastans - 1) \bmod 10^9 + 1$。本次操作为插入一条两端点分别为 $(x_0’, y_0’)$，$(x_1’,y_1’)$ 的线段。</p><p>其中 $lastans$ 为上次询问的答案，初始时，$lastans = 0$。</p><p><strong>输出格式</strong></p><p>对于每次查询，输出一行一个整数，代表交点纵坐标最大的线段的编号。若不存在任何一条线段与查询直线有交，则输出 $0$；若有多条线段与查询直线的交点纵坐标都是最大的，则输出编号最小的线段，同时 $lastans$ 也应更新为编号最小的一条线段。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">39995</span>;</span><br><span class="line"><span class="keyword">int</span> n,op,k,x_0,x_1,y_0,y_1,lastans;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">double</span>,<span class="keyword">double</span>&gt; &gt;line;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,max;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[u].l=l,t[u].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(u&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">build(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> f(x,y) (x.first*y+x.second)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> g(x,y) ((x.second-y.second)/(y.first-x.first))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mid=t[u].l+t[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(t[u].l&gt;=l&amp;&amp;t[u].r&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!t[u].max)</span><br><span class="line"><span class="keyword">return</span> t[u].max=x,<span class="keyword">void</span>();</span><br><span class="line"><span class="keyword">double</span> a=f(line[x],t[u].l);</span><br><span class="line"><span class="keyword">double</span> b=f(line[x],t[u].r);</span><br><span class="line"><span class="keyword">double</span> c=f(line[t[u].max],t[u].l);</span><br><span class="line"><span class="keyword">double</span> d=f(line[t[u].max],t[u].r);</span><br><span class="line"><span class="keyword">if</span>(a&lt;=c&amp;&amp;b&lt;=d)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(a&gt;=c&amp;&amp;b&gt;=d)</span><br><span class="line"><span class="keyword">return</span> t[u].max=x,<span class="keyword">void</span>();</span><br><span class="line"><span class="keyword">double</span> p=g(line[t[u].max],line[x]);</span><br><span class="line"><span class="keyword">if</span>(a&gt;=c)</span><br><span class="line"><span class="keyword">if</span>(p&lt;=mid)</span><br><span class="line">update(u&lt;&lt;<span class="number">1</span>,l,r,x);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">update(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,t[u].max),t[u].max=x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span>(p&lt;=mid)</span><br><span class="line">update(u&lt;&lt;<span class="number">1</span>,l,r,t[u].max),t[u].max=x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">update(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,x);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">update(u&lt;&lt;<span class="number">1</span>,l,r,x);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">update(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> f(line[x],p)&gt;f(line[y],p)?x:y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[u].l==t[u].r)</span><br><span class="line"><span class="keyword">return</span> t[u].max;</span><br><span class="line"><span class="keyword">int</span> mid=t[u].l+t[u].r&gt;&gt;<span class="number">1</span>,res=t[u].max;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">res=cmp(res,query(u&lt;&lt;<span class="number">1</span>,x),x);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">res=cmp(res,query(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x),x);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> g</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,<span class="number">39989</span>);</span><br><span class="line">line.push_back(make_pair(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> online(x,y) ((x+lastans-1)%y+1)</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;op);</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">k=online(k,<span class="number">39989</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lastans=query(<span class="number">1</span>,k));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;x_0,&amp;y_0,&amp;x_1,&amp;y_1);</span><br><span class="line">x_0=online(x_0,<span class="number">39989</span>);</span><br><span class="line">y_0=online(y_0,<span class="number">1000000000</span>);</span><br><span class="line">x_1=online(x_1,<span class="number">39989</span>);</span><br><span class="line">y_1=online(y_1,<span class="number">1000000000</span>);</span><br><span class="line">            <span class="keyword">if</span>(x_0==x_1)</span><br><span class="line">                line.push_back(make_pair(<span class="number">0.0</span>,<span class="number">1.0</span>*max(y_0,y_1));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">line.push_back(make_pair(<span class="number">1.0</span>*(y_1-y_0)/(x_1-x_0),y_0<span class="number">-1.0</span>*(y_1-y_0)/(x_1-x_0)*x_0));</span><br><span class="line">update(<span class="number">1</span>,min(x_0,x_1),max(x_0,x_1),line.size()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">#undef online</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="吉老师线段树"><a href="#吉老师线段树" class="headerlink" title="吉老师线段树"></a>吉老师线段树</h3><p><strong>题目描述</strong></p><p>给出一个长度为 $n$ 的数列 $A$，同时定义一个辅助数组 $B$，$B$ 开始与 $A$ 完全相同。接下来进行了 $m$ 次操作，操作有五种类型，按以下格式给出：</p><ul><li><code>1 l r k</code>：对于所有的 $i\in[l,r]$，将 $A_i$ 加上 $k$（$k$ 可以为负数）。</li><li><code>2 l r v</code>：对于所有的 $i\in[l,r]$，将 $A_i$变成 $\min(A_i,v)$。</li><li><code>3 l r</code>：求 $\sum_{i=l}^{r}A_i$。</li><li><code>4 l r</code>：对于所有的 $i\in[l,r]$，求 $A_i$ 的最大值。</li><li><code>5 l r</code>：对于所有的 $i\in[l,r]$，求 $B_i$ 的最大值。</li></ul><p>在每一次操作后，我们都进行一次更新，让 $B_i\gets\max(B_i,A_i)$。</p><p><strong>输入格式</strong></p><p>第一行包含两个正整数 $n,m$，分别表示数列 $A$ 的长度和操作次数。</p><p>第二行包含 $n$ 个整数 $A_1,A_2,\cdots,A_n$，表示数列 $A$。</p><p>接下来 $m$ 行，每行行首有一个整数 $op$，表示操作类型；接下来两个或三个整数表示操作参数，格式见【题目描述】。</p><p><strong>输出格式</strong></p><p>对于 $op\in\{3,4,5\}$ 的操作，输出一行包含一个整数，表示这个询问的答案。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">5</span>,INF=<span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,op,l,r,k,v;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,a,b,c,d,cnt;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> max,tmx,se,sum;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[u].sum+=<span class="number">1l</span>l*t[u].cnt*a+<span class="number">1l</span>l*(t[u].r-t[u].l+<span class="number">1</span>-t[u].cnt)*c;</span><br><span class="line">t[u].max=max(t[u].max,t[u].tmx+b);</span><br><span class="line">t[u].b=max(t[u].b,t[u].a+b);</span><br><span class="line">t[u].tmx+=a,t[u].a+=a;</span><br><span class="line">t[u].d=max(t[u].d,t[u].c+d);</span><br><span class="line"><span class="keyword">if</span>(t[u].se!=INF)</span><br><span class="line">t[u].se+=c;</span><br><span class="line">t[u].c+=c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> L=u&lt;&lt;<span class="number">1</span>,R=L|<span class="number">1</span>;</span><br><span class="line">t[u].sum=t[L].sum+t[R].sum;</span><br><span class="line">t[u].max=max(t[L].max,t[R].max);</span><br><span class="line">t[u].tmx=max(t[L].tmx,t[R].tmx);</span><br><span class="line"><span class="keyword">if</span>(t[L].tmx==t[R].tmx)</span><br><span class="line">t[u].se=max(t[L].se,t[R].se),t[u].cnt=t[L].cnt+t[R].cnt;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t[L].tmx&gt;t[R].tmx)</span><br><span class="line">t[u].se=max(t[L].se,t[R].tmx),t[u].cnt=t[L].cnt;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t[u].se=max(t[L].tmx,t[R].se),t[u].cnt=t[R].cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> L=u&lt;&lt;<span class="number">1</span>,R=L|<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(t[L].tmx==t[R].tmx)</span><br><span class="line">&#123;</span><br><span class="line">calc(L,t[u].a,t[u].b,t[u].c,t[u].d);</span><br><span class="line">    calc(R,t[u].a,t[u].b,t[u].c,t[u].d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t[L].tmx&gt;t[R].tmx)</span><br><span class="line">&#123;</span><br><span class="line">calc(L,t[u].a,t[u].b,t[u].c,t[u].d);</span><br><span class="line">calc(R,t[u].c,t[u].d,t[u].c,t[u].d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">calc(L,t[u].c,t[u].d,t[u].c,t[u].d);</span><br><span class="line">calc(R,t[u].a,t[u].b,t[u].c,t[u].d);</span><br><span class="line">&#125;</span><br><span class="line">t[u].a=t[u].b=t[u].c=t[u].d=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[u].l=l,t[u].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">&#123;</span><br><span class="line">t[u].sum=t[u].max=t[u].tmx=a[l];</span><br><span class="line">t[u].se=-INF,t[u].cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(u&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">build(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">pushup(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[u].l&gt;=l&amp;&amp;t[u].r&lt;=r)</span><br><span class="line"><span class="keyword">return</span> calc(u,k,k,k,k);</span><br><span class="line"><span class="keyword">if</span>(t[u].a||t[u].b||t[u].c||t[u].d)</span><br><span class="line">pushdown(u);</span><br><span class="line"><span class="keyword">int</span> mid=t[u].l+t[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">update(u&lt;&lt;<span class="number">1</span>,l,r,k);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">update(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line">pushup(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[u].tmx&lt;=v)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(t[u].l&gt;=l&amp;&amp;t[u].r&lt;=r&amp;&amp;t[u].se&lt;v)</span><br><span class="line"><span class="keyword">return</span> calc(u,v-t[u].tmx,v-t[u].tmx,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(t[u].a||t[u].b||t[u].c||t[u].d)</span><br><span class="line">pushdown(u);</span><br><span class="line"><span class="keyword">int</span> mid=t[u].l+t[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">modify(u&lt;&lt;<span class="number">1</span>,l,r,v);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">modify(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,v);</span><br><span class="line">pushup(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query3</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[u].l&gt;=l&amp;&amp;t[u].r&lt;=r)</span><br><span class="line"><span class="keyword">return</span> t[u].sum;</span><br><span class="line"><span class="keyword">if</span>(t[u].a||t[u].b||t[u].c||t[u].d)</span><br><span class="line">pushdown(u);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> mid=t[u].l+t[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">res+=query3(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">res+=query3(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query4</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[u].l&gt;=l&amp;&amp;t[u].r&lt;=r)</span><br><span class="line"><span class="keyword">return</span> t[u].tmx;</span><br><span class="line"><span class="keyword">if</span>(t[u].a||t[u].b||t[u].c||t[u].d)</span><br><span class="line">pushdown(u);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res=-INF;</span><br><span class="line"><span class="keyword">int</span> mid=t[u].l+t[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">res=max(res,query4(u&lt;&lt;<span class="number">1</span>,l,r));</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">res=max(res,query4(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query5</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[u].l&gt;=l&amp;&amp;t[u].r&lt;=r)</span><br><span class="line"><span class="keyword">return</span> t[u].max;</span><br><span class="line"><span class="keyword">if</span>(t[u].a||t[u].b||t[u].c||t[u].d)</span><br><span class="line">pushdown(u);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res=-INF;</span><br><span class="line"><span class="keyword">int</span> mid=t[u].l+t[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">res=max(res,query5(u&lt;&lt;<span class="number">1</span>,l,r));</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">res=max(res,query5(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;op,&amp;l,&amp;r);</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">update(<span class="number">1</span>,l,r,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v);</span><br><span class="line">modify(<span class="number">1</span>,l,r,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query3(<span class="number">1</span>,l,r));</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">4</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query4(<span class="number">1</span>,l,r));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query5(<span class="number">1</span>,l,r));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可持久化权值线段树1（可持久化数组）"><a href="#可持久化权值线段树1（可持久化数组）" class="headerlink" title="可持久化权值线段树1（可持久化数组）"></a>可持久化权值线段树1（可持久化数组）</h3><p><strong>题目描述</strong></p><p>如题，你需要维护这样的一个长度为 $N$ 的数组，支持如下几种操作</p><ol><li>在某个历史版本上修改某一个位置上的值</li><li>访问某个历史版本上的某一位置的值</li></ol><p>此外，每进行一次操作（<strong>对于操作2，即为生成一个完全一样的版本，不作任何改动</strong>），就会生成一个新的版本。版本编号即为当前操作的编号（从1开始编号，版本0表示初始状态数组）</p><p><strong>输入格式</strong></p><p>输入的第一行包含两个正整数 $N, M$， 分别表示数组的长度和操作的个数。</p><p>第二行包含 $N$ 个整数，依次为初始状态下数组各位的值（依次为 $a_i$，$1 \leq i \leq N$）。</p><p>接下来 $M$ 行每行包含3或4个整数，代表两种操作之一（ $i$ 为基于的历史版本号）：</p><ol><li>对于操作1，格式为 $v_i  1  {loc}_i  value_i$，即为在版本 $v_i$ 的基础上，将 $a_{loc_i}$ 修改为 $value_i$</li><li>对于操作2，格式为 $v_i  2  {loc}_i$，即访问版本 $v_i$ 中的 $a_{loc_i}$ 的值，生成一样版本的对象应为 $v_i$</li></ol><p><strong>输出格式</strong></p><p>输出包含若干行，依次为每个操作2的结果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,tot,v,opt,loc,value;</span><br><span class="line"><span class="keyword">int</span> a[N],root[N],L[N&lt;&lt;<span class="number">5</span>],R[N&lt;&lt;<span class="number">5</span>],val[N&lt;&lt;<span class="number">5</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u=++tot;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">&#123;</span><br><span class="line">val[u]=a[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(L[u],l,mid);</span><br><span class="line">build(R[u],mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;u,<span class="keyword">int</span> pre,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u=++tot;</span><br><span class="line">L[u]=L[pre],R[u]=R[pre],val[u]=val[pre];</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">&#123;</span><br><span class="line">val[u]=d;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">update(L[u],L[pre],l,mid,x,d);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">update(R[u],R[pre],mid+<span class="number">1</span>,r,x,d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line"><span class="keyword">return</span> val[u];</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(k&lt;=mid)</span><br><span class="line"><span class="keyword">return</span> query(L[u],l,mid,k);</span><br><span class="line"><span class="keyword">return</span> query(R[u],mid+<span class="number">1</span>,r,k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</span><br><span class="line">build(root[<span class="number">0</span>],<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;v,&amp;opt,&amp;loc);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;value);</span><br><span class="line">update(root[i],root[v],<span class="number">1</span>,n,loc,value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(root[i]=root[v],<span class="number">1</span>,n,loc));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可持久化线段树-2（主席树）"><a href="#可持久化线段树-2（主席树）" class="headerlink" title="可持久化线段树 2（主席树）"></a>可持久化线段树 2（主席树）</h3><p><strong>题目描述</strong></p><p>如题，给定 $n$ 个整数构成的序列 $a$，将对于指定的闭区间 $[l, r]$  查询其区间内的第 $k$ 小值。</p><p><strong>输入格式</strong></p><p>第一行包含两个整数，分别表示序列的长度 $n$ 和查询的个数 $m$。<br>第二行包含 $n$ 个整数，第 $i$ 个整数表示序列的第 $i$ 个元素 $a_i$。<br>接下来 $m$ 行每行包含三个整数 $l, r, k$ , 表示查询区间 $[l, r]$ 内的第 $k$ 小值。</p><p><strong>输出格式</strong></p><p>对于每次询问，输出一行一个整数表示答案。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,cnt,tot,l,r,k;</span><br><span class="line"><span class="keyword">int</span> a[N],b[N],T[N],L[N&lt;&lt;<span class="number">5</span>],R[N&lt;&lt;<span class="number">5</span>],sum[N&lt;&lt;<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> u=++tot;</span><br><span class="line"><span class="keyword">if</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">L[u]=build(l,mid);</span><br><span class="line">R[u]=build(mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pre,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=++tot;</span><br><span class="line">L[u]=L[pre],R[u]=R[pre],sum[u]=sum[pre]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">L[u]=update(L[pre],l,mid,x);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">R[u]=update(R[pre],mid+<span class="number">1</span>,r,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=r)</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">int</span> x=sum[L[v]]-sum[L[u]],mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&gt;=k)</span><br><span class="line"><span class="keyword">return</span> query(L[u],L[v],l,mid,k);</span><br><span class="line"><span class="keyword">return</span> query(R[u],R[v],mid+<span class="number">1</span>,r,k-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i),b[i]=a[i];</span><br><span class="line">sort(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">cnt=unique(b+<span class="number">1</span>,b+n+<span class="number">1</span>)-(b+<span class="number">1</span>);</span><br><span class="line">T[<span class="number">0</span>]=build(<span class="number">1</span>,cnt);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> rak=lower_bound(b+<span class="number">1</span>,b+cnt+<span class="number">1</span>,a[i])-b;</span><br><span class="line">T[i]=update(T[i<span class="number">-1</span>],<span class="number">1</span>,cnt,rak);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;r,&amp;k);</span><br><span class="line"><span class="keyword">int</span> ans=query(T[l<span class="number">-1</span>],T[r],<span class="number">1</span>,cnt,k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,b[ans]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h2><h3 id="普通平衡树"><a href="#普通平衡树" class="headerlink" title="普通平衡树"></a>普通平衡树</h3><p><strong>题目描述</strong></p><p>您需要写一种数据结构（可参考题目标题），来维护一些数，其中需要提供以下操作：</p><ol><li>插入 $x$  数</li><li>删除 $x$ 数(若有多个相同的数，因只删除一个)</li><li>查询 $x$ 数的排名(排名定义为比当前数小的数的个数 $+1$ )</li><li>查询排名为 $x$ 的数</li><li>求 $x$ 的前驱(前驱定义为小于 $x$，且最大的数)</li><li>求 $x$ 的后继(后继定义为大于 $x$，且最小的数)</li></ol><p><strong>输入格式</strong></p><p>第一行为 $n$，表示操作的个数,下面 $n$ 行每行有两个数 $\text{opt}$ 和 $x$，$\text{opt}$ 表示操作的序号( $1 \leq \text{opt} \leq 6$ )</p><p><strong>输出格式</strong></p><p>对于操作 $3,4,5,6$ 每行输出一个数，表示对应答案</p><p>（以下部分代码为强制在线加强版）</p><h4 id="splay"><a href="#splay" class="headerlink" title="splay"></a>splay</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>,INF=<span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">int</span> n,opt,x,root,tot;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> fa,val,cnt,size;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s.empty())</span><br><span class="line"><span class="keyword">return</span> ++tot;</span><br><span class="line"> <span class="keyword">int</span> x=s.top();</span><br><span class="line"> s.pop();</span><br><span class="line"> <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[x].size=t[t[x].ch[<span class="number">0</span>]].size+t[t[x].ch[<span class="number">1</span>]].size+t[x].cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y=t[x].fa,z=t[y].fa,k=(x==t[y].ch[<span class="number">1</span>]);</span><br><span class="line">t[z].ch[y==t[z].ch[<span class="number">1</span>]]=x,t[x].fa=z;</span><br><span class="line">t[y].ch[k]=t[x].ch[!k],t[t[x].ch[!k]].fa=y;</span><br><span class="line">t[x].ch[!k]=y,t[y].fa=x;</span><br><span class="line">pushup(y),pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(t[x].fa!=to)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=t[x].fa,z=t[y].fa;</span><br><span class="line"><span class="keyword">if</span>(z!=to)</span><br><span class="line">(x==t[y].ch[<span class="number">0</span>])^(y==t[z].ch[<span class="number">0</span>])?rotate(x):rotate(y);</span><br><span class="line">rotate(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!to) root=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=root;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">if</span>(t[t[u].ch[<span class="number">0</span>]].size&gt;=k)</span><br><span class="line">u=t[u].ch[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t[t[u].ch[<span class="number">0</span>]].size+t[u].cnt&gt;=k)</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">k-=t[t[u].ch[<span class="number">0</span>]].size+t[u].cnt,u=t[u].ch[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=root;</span><br><span class="line"><span class="keyword">while</span>(x!=t[u].val&amp;&amp;t[u].ch[x&gt;t[u].val])</span><br><span class="line">u=t[u].ch[x&gt;t[u].val];</span><br><span class="line">splay(u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rak</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">find(x);</span><br><span class="line"><span class="keyword">return</span> t[t[root].ch[<span class="number">0</span>]].size+(t[root].val&lt;x)*t[root].cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">bool</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">find(x);</span><br><span class="line"><span class="keyword">if</span>(t[root].val&lt;x&amp;&amp;!k)</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line"><span class="keyword">if</span>(t[root].val&gt;x&amp;&amp;k)</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line"><span class="keyword">int</span> u=t[root].ch[k];</span><br><span class="line"><span class="keyword">while</span>(t[u].ch[!k])</span><br><span class="line">u=t[u].ch[!k];</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=root,fa=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(u&amp;&amp;t[u].val!=x)</span><br><span class="line">fa=u,u=t[u].ch[x&gt;t[u].val];</span><br><span class="line"><span class="keyword">if</span>(u)</span><br><span class="line">++t[u].cnt;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">u=newnode();</span><br><span class="line">t[fa].ch[x&gt;t[fa].val]=u;</span><br><span class="line">t[u]=(node)&#123;&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,fa,x,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">splay(u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=next(x,<span class="number">0</span>),r=next(x,<span class="number">1</span>);</span><br><span class="line">splay(l,<span class="number">0</span>),splay(r,l);</span><br><span class="line"><span class="keyword">if</span>(t[t[r].ch[<span class="number">0</span>]].cnt&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">--t[t[r].ch[<span class="number">0</span>]].cnt;</span><br><span class="line">splay(t[r].ch[<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">s.push(t[r].ch[<span class="number">0</span>]);</span><br><span class="line">t[r].ch[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">splay(r,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">insert(INF),insert(-INF);</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;opt,&amp;x);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">insert(x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">erase(x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,rak(x));</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">4</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,t[kth(x+<span class="number">1</span>)].val);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">5</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,t[next(x,<span class="number">0</span>)].val);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,t[next(x,<span class="number">1</span>)].val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fhq"><a href="#fhq" class="headerlink" title="fhq"></a>fhq</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,root,opt,t,x,y,z;</span><br><span class="line"><span class="keyword">int</span> ch[N][<span class="number">3</span>],pri[N],va[N],size[N],tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">size[x]=<span class="number">1</span>+size[ch[x][<span class="number">0</span>]]+size[ch[x][<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">size[++tot]=<span class="number">1</span>;</span><br><span class="line">pri[tot]=rand();</span><br><span class="line">va[tot]=v;</span><br><span class="line"><span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> x|y;</span><br><span class="line"><span class="keyword">if</span>(pri[x]&lt;pri[y])</span><br><span class="line">&#123;</span><br><span class="line">ch[x][<span class="number">1</span>]=merge(ch[x][<span class="number">1</span>],y);</span><br><span class="line">update(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ch[y][<span class="number">0</span>]=merge(x,ch[y][<span class="number">0</span>]);</span><br><span class="line">update(y);</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> k,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!now) x=y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(va[now]&lt;=k)</span><br><span class="line">&#123;</span><br><span class="line">x=now;</span><br><span class="line">split(ch[now][<span class="number">1</span>],k,ch[now][<span class="number">1</span>],y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">y=now;</span><br><span class="line">split(ch[now][<span class="number">0</span>],k,x,ch[now][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">update(now);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k&lt;=size[ch[now][<span class="number">0</span>]])</span><br><span class="line">now=ch[now][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k==size[ch[now][<span class="number">0</span>]]+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> now;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">k-=size[ch[now][<span class="number">0</span>]]+<span class="number">1</span>;</span><br><span class="line">now=ch[now][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;opt,&amp;t);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">split(root,t,x,y);</span><br><span class="line">root=merge(merge(x,newnode(t)),y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">split(root,t,x,z);</span><br><span class="line">split(x,t<span class="number">-1</span>,x,y);</span><br><span class="line">y=merge(ch[y][<span class="number">0</span>],ch[y][<span class="number">1</span>]);</span><br><span class="line">root=merge(merge(x,y),z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">split(root,t<span class="number">-1</span>,x,y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,size[x]+<span class="number">1</span>);</span><br><span class="line">root=merge(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">4</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,va[kth(root,t)]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">split(root,t<span class="number">-1</span>,x,y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,va[kth(x,size[x])]);</span><br><span class="line">root=merge(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">split(root,t,x,y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,va[kth(y,<span class="number">1</span>)]);</span><br><span class="line">root=merge(x,y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="WBLT"><a href="#WBLT" class="headerlink" title="WBLT"></a>WBLT</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> newnode(a,b,c,d) (&amp;(*st[utot++]=node(a,b,c,d)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> merge(a,b) newnode(a-&gt;size+b-&gt;size,b-&gt;val,a,b)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e6</span>+<span class="number">5</span>,ratio=<span class="number">4</span>,INF=<span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">int</span> opt,x,n,m,las,tot,utot;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> size,val;</span><br><span class="line">    node *ch[<span class="number">2</span>];</span><br><span class="line">    node(<span class="keyword">int</span> size,<span class="keyword">int</span> val,node *lc,node *rc)</span><br><span class="line">:size(size),val(val) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ch[<span class="number">0</span>]=lc;<span class="keyword">this</span>-&gt;ch[<span class="number">1</span>]=rc;</span><br><span class="line">    &#125;</span><br><span class="line">    node()&#123;&#125;</span><br><span class="line">&#125;*rt,*st[N*<span class="number">3</span>],*null,tt[N*<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(node *u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u-&gt;ch[<span class="number">0</span>]-&gt;size==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">    u-&gt;size=u-&gt;ch[<span class="number">0</span>]-&gt;size+u-&gt;ch[<span class="number">1</span>]-&gt;size;</span><br><span class="line">    u-&gt;val=u-&gt;ch[<span class="number">1</span>]-&gt;val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(node *u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u-&gt;ch[<span class="number">0</span>]-&gt;size&gt;u-&gt;ch[<span class="number">1</span>]-&gt;size*ratio)</span><br><span class="line">    &#123;</span><br><span class="line">    u-&gt;ch[<span class="number">1</span>]=merge(u-&gt;ch[<span class="number">0</span>]-&gt;ch[<span class="number">1</span>],u-&gt;ch[<span class="number">1</span>]);</span><br><span class="line">st[--utot]=u-&gt;ch[<span class="number">0</span>];</span><br><span class="line">u-&gt;ch[<span class="number">0</span>]=u-&gt;ch[<span class="number">0</span>]-&gt;ch[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(u-&gt;ch[<span class="number">1</span>]-&gt;size&gt;u-&gt;ch[<span class="number">0</span>]-&gt;size*ratio)</span><br><span class="line">    &#123;</span><br><span class="line">    u-&gt;ch[<span class="number">0</span>]=merge(u-&gt;ch[<span class="number">0</span>],u-&gt;ch[<span class="number">1</span>]-&gt;ch[<span class="number">0</span>]);</span><br><span class="line">st[--utot]=u-&gt;ch[<span class="number">1</span>];</span><br><span class="line">u-&gt;ch[<span class="number">1</span>]=u-&gt;ch[<span class="number">1</span>]-&gt;ch[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node *u,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u-&gt;size==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        u-&gt;ch[<span class="number">0</span>]=newnode(<span class="number">1</span>,min(u-&gt;val,val),null,null);</span><br><span class="line">        u-&gt;ch[<span class="number">1</span>]=newnode(<span class="number">1</span>,max(u-&gt;val,val),null,null);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">insert(val&gt;u-&gt;ch[<span class="number">0</span>]-&gt;val?u-&gt;ch[<span class="number">1</span>]:u-&gt;ch[<span class="number">0</span>],val);</span><br><span class="line">    pushup(u);</span><br><span class="line">rotate(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(node *u,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u-&gt;ch[<span class="number">0</span>]-&gt;size==<span class="number">1</span>&amp;&amp;u-&gt;ch[<span class="number">0</span>]-&gt;val==val)</span><br><span class="line">    &#123;</span><br><span class="line">    st[--utot]=u-&gt;ch[<span class="number">0</span>];</span><br><span class="line">st[--utot]=u-&gt;ch[<span class="number">1</span>];</span><br><span class="line">*u=*u-&gt;ch[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(u-&gt;ch[<span class="number">1</span>]-&gt;size==<span class="number">1</span>&amp;&amp;u-&gt;ch[<span class="number">1</span>]-&gt;val==val)</span><br><span class="line">    &#123;</span><br><span class="line">    st[--utot]=u-&gt;ch[<span class="number">0</span>];</span><br><span class="line">st[--utot]=u-&gt;ch[<span class="number">1</span>];</span><br><span class="line">*u=*u-&gt;ch[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">erase(val&gt;u-&gt;ch[<span class="number">0</span>]-&gt;val?u-&gt;ch[<span class="number">1</span>]:u-&gt;ch[<span class="number">0</span>],val);</span><br><span class="line">    pushup(u);</span><br><span class="line">rotate(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(node *u,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u-&gt;size==<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> u-&gt;val;</span><br><span class="line">    <span class="keyword">if</span>(size&gt;u-&gt;ch[<span class="number">0</span>]-&gt;size)</span><br><span class="line"><span class="keyword">return</span> kth(u-&gt;ch[<span class="number">1</span>],size-u-&gt;ch[<span class="number">0</span>]-&gt;size);</span><br><span class="line"><span class="keyword">return</span> kth(u-&gt;ch[<span class="number">0</span>],size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rnkx</span><span class="params">(node *u,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u-&gt;size==<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(val&gt;u-&gt;ch[<span class="number">0</span>]-&gt;val)</span><br><span class="line"><span class="keyword">return</span> u-&gt;ch[<span class="number">0</span>]-&gt;size+rnkx(u-&gt;ch[<span class="number">1</span>],val);</span><br><span class="line"><span class="keyword">return</span> rnkx(u-&gt;ch[<span class="number">0</span>],val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> kth(rt,rnkx(rt,x)<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">suf</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> kth(rt,rnkx(rt,x+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> node *<span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line"><span class="keyword">return</span> newnode(<span class="number">1</span>,a[l],null,null);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    node *u=newnode(<span class="number">0</span>,<span class="number">0</span>,build(l,mid),build(mid+<span class="number">1</span>,r));</span><br><span class="line">    pushup(u);<span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</span><br><span class="line">    sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">    a[++n]=INF;</span><br><span class="line">    null=<span class="keyword">new</span> node(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=N*<span class="number">2</span>;++i)</span><br><span class="line">st[i]=&amp;tt[i];</span><br><span class="line">    rt=build(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;opt,&amp;x);</span><br><span class="line">x^=las;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">insert(rt,x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">erase(rt,x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line">las=rnkx(rt,x),tot^=las;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">4</span>)</span><br><span class="line">las=kth(rt,x),tot^=las;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">5</span>)</span><br><span class="line">las=pre(x),tot^=las;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">las=suf(x),tot^=las;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,tot);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文艺平衡树"><a href="#文艺平衡树" class="headerlink" title="文艺平衡树"></a>文艺平衡树</h3><p><strong>题目描述 </strong></p><p>您需要写一种数据结构（可参考题目标题），来维护一个有序数列。</p><p>其中需要提供以下操作：翻转一个区间，例如原有序序列是 $5 4 3 2 1$，翻转区间是 $[2,4]$ 的话，结果是 $5 2 3 4 1$。</p><p><strong>输入格式 </strong></p><p>第一行两个正整数 $n,m$，表示序列长度与操作个数。序列中第 $i$ 项初始为 $i$。<br>接下来 $m$ 行，每行两个正整数 $l,r$，表示翻转的区间。</p><p><strong>输出格式 </strong></p><p>输出一行 $n$ 个正整数，表示原始序列经过 $m$ 次变换后的结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,l,r,root,tot;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> son[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> fa,cnt,val,size;</span><br><span class="line"><span class="keyword">bool</span> rev;</span><br><span class="line">&#125;t[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span>;</span><br><span class="line">    t[x].size=t[t[x].son[<span class="number">0</span>]].size+t[t[x].son[<span class="number">1</span>]].size+t[x].cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x||!t[x].rev) <span class="keyword">return</span>;</span><br><span class="line">    t[t[x].son[<span class="number">1</span>]].rev^=<span class="number">1</span>,t[t[x].son[<span class="number">0</span>]].rev^=<span class="number">1</span>;</span><br><span class="line">    swap(t[x].son[<span class="number">1</span>],t[x].son[<span class="number">0</span>]);</span><br><span class="line">    t[x].rev=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y=t[x].fa,z=t[y].fa,k=(x==t[y].ch[<span class="number">1</span>]);</span><br><span class="line">t[z].ch[y==t[z].ch[<span class="number">1</span>]]=x,t[x].fa=z;</span><br><span class="line">t[y].ch[k]=t[x].ch[!k],t[t[x].ch[!k]].fa=y;</span><br><span class="line">t[x].ch[!k]=y,t[y].fa=x;</span><br><span class="line">pushup(y),pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> &amp;root,<span class="keyword">int</span> x,<span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(t[x].fa!=to)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=t[x].fa,z=t[y].fa;</span><br><span class="line"><span class="keyword">if</span>(z!=to)</span><br><span class="line">(x==t[y].ch[<span class="number">0</span>])^(y==t[z].ch[<span class="number">0</span>])?rotate(x):rotate(y);</span><br><span class="line">rotate(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!to)</span><br><span class="line">root=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=root,fa=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(u&amp;&amp;t[u].val!=x)</span><br><span class="line">fa=u,u=t[u].son[x&gt;t[u].val];</span><br><span class="line"><span class="keyword">if</span>(u) ++t[u].cnt;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">u=++tot;</span><br><span class="line"><span class="keyword">if</span>(fa) t[fa].son[x&gt;t[fa].val]=u;</span><br><span class="line">t[u]=(node)&#123;&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,fa,<span class="number">1</span>,x,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">splay(u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u=root;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pushdown(u);</span><br><span class="line">        <span class="keyword">if</span>(t[t[u].son[<span class="number">0</span>]].size&gt;=x)</span><br><span class="line">u=t[u].son[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t[t[u].son[<span class="number">0</span>]].size+t[u].cnt==x)</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">x-=t[t[u].son[<span class="number">0</span>]].size+t[u].cnt,u=t[u].son[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l=find(l),r=find(r);</span><br><span class="line">    splay(l,<span class="number">0</span>),splay(r,l);</span><br><span class="line">    t[t[r].son[<span class="number">0</span>]].rev^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pushdown(u);</span><br><span class="line">    <span class="keyword">if</span>(t[u].son[<span class="number">0</span>])</span><br><span class="line">dfs(t[u].son[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(t[u].val&lt;n+<span class="number">2</span>&amp;&amp;t[u].val&gt;<span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,t[u].val<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(t[u].son[<span class="number">1</span>])</span><br><span class="line">dfs(t[u].son[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">2</span>;++i)</span><br><span class="line">    insert(i);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">    reverse(l,r+<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">    DFS(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可持久化平衡树"><a href="#可持久化平衡树" class="headerlink" title="可持久化平衡树"></a>可持久化平衡树</h3><p><strong>题目描述</strong></p><p>您需要写一种数据结构（可参考题目标题），来维护一个可重整数集合，其中需要提供以下操作（ <strong>对于各个以往的历史版本</strong> ）：</p><p>1、 插入 $x$</p><p>2、 删除 $x$（若有多个相同的数，应只删除一个，<strong>如果没有请忽略该操作</strong>）</p><p>3、 查询 $x$ 的排名（排名定义为比当前数小的数的个数 $+1$）</p><p>4、查询排名为 $x$ 的数</p><p>5、 求 $x$ 的前驱（前驱定义为小于 $x$，且最大的数，<strong>如不存在输出</strong> $-2^{31}+1$）</p><p>6、求 $x$ 的后继（后继定义为大于 $x$，且最小的数，<strong>如不存在输出</strong> $2^{31}-1$ ）</p><p><strong>和原本平衡树不同的一点是，每一次的任何操作都是基于某一个历史版本，同时生成一个新的版本。（操作3, 4, 5, 6即保持原版本无变化）</strong></p><p>每个版本的编号即为操作的序号（版本0即为初始状态，空树）</p><p><strong>输入格式</strong></p><p>第一行包含一个正整数 $n$ ，表示操作的总数。</p><p>接下来 $n$ 行，每行包含三个整数，第 $i$ 行记为 $v_i, \text{opt}_i, x_i$。</p><p>$v_i$ 表示基于的过去版本号，$\text{opt}_i$ 表示操作的序号， $x_i$ 表示参与操作的数值</p><p><strong>输出格式</strong></p><p>每行包含一个整数，依次为各个 $3,4,5,6$ 操作所对应的答案</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> newnode(a,b,c,d) (&amp;(*stk[tot++]=node(a,b,c,d)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> merge(a,b) newnode(a-&gt;size+b-&gt;size,b-&gt;val,a,b)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">5</span>,ratio=<span class="number">4</span>,INF=<span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">int</span> opt,v,x,t,tot;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> size,val;</span><br><span class="line">    node *lc,*rc;</span><br><span class="line">    node(<span class="keyword">int</span> size,<span class="keyword">int</span> val,node *lc,node *rc)</span><br><span class="line">:size(size),val(val),lc(lc),rc(rc) &#123;&#125;</span><br><span class="line">    node() &#123;&#125;</span><br><span class="line">&#125;*rt[N],*stk[N*<span class="number">40</span>],utk[N*<span class="number">40</span>],*null;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(node *u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!u-&gt;lc-&gt;size)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">    u-&gt;size=u-&gt;lc-&gt;size+u-&gt;rc-&gt;size;</span><br><span class="line">    u-&gt;val=u-&gt;rc-&gt;val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> node *<span class="title">rotate</span><span class="params">(node *u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *v=newnode(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">*v=*u;</span><br><span class="line">    <span class="keyword">if</span>(v-&gt;lc-&gt;size &gt; v-&gt;rc-&gt;size*ratio)</span><br><span class="line">    &#123;</span><br><span class="line">        v-&gt;lc=rotate(v-&gt;lc);</span><br><span class="line">        v-&gt;rc=rotate(v-&gt;rc);</span><br><span class="line">        v-&gt;rc=merge(v-&gt;lc-&gt;rc,v-&gt;rc);</span><br><span class="line">        v-&gt;lc=v-&gt;lc-&gt;lc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(v-&gt;rc-&gt;size &gt; v-&gt;lc-&gt;size*ratio)</span><br><span class="line">    &#123;</span><br><span class="line">        v-&gt;lc=rotate(v-&gt;lc);</span><br><span class="line">        v-&gt;rc=rotate(v-&gt;rc);</span><br><span class="line">        v-&gt;lc=merge(v-&gt;lc,v-&gt;rc-&gt;lc);</span><br><span class="line">        v-&gt;rc=v-&gt;rc-&gt;rc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> node *<span class="title">insert</span><span class="params">(node *u,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *v=newnode(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">*v=*u;</span><br><span class="line">    <span class="keyword">if</span>(v-&gt;size==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v-&gt;lc=newnode(<span class="number">1</span>,min(val,v-&gt;val),null,null);</span><br><span class="line">        v-&gt;rc=newnode(<span class="number">1</span>,max(val,v-&gt;val),null,null);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(val&gt;v-&gt;lc-&gt;val)</span><br><span class="line">v-&gt;rc=insert(v-&gt;rc,val);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">v-&gt;lc=insert(v-&gt;lc,val);</span><br><span class="line">    pushup(v);</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> node *<span class="title">erase</span><span class="params">(node *u,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *v=newnode(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">*v=*u;</span><br><span class="line">    <span class="keyword">if</span>(v-&gt;size==<span class="number">1</span>&amp;&amp;v-&gt;val!=val)</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(v-&gt;lc-&gt;size==<span class="number">1</span>&amp;&amp;v-&gt;lc-&gt;val==val)</span><br><span class="line">        v=v-&gt;rc;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(v-&gt;rc-&gt;size==<span class="number">1</span>&amp;&amp;v-&gt;rc-&gt;val==val)</span><br><span class="line">        v=v-&gt;lc;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(val&gt;v-&gt;lc-&gt;val)</span><br><span class="line">v-&gt;rc=erase(v-&gt;rc,val);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">v-&gt;lc=erase(v-&gt;lc,val);</span><br><span class="line">    pushup(v);</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">kth</span><span class="params">(node *u,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u-&gt;size==<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> u-&gt;val;</span><br><span class="line">    <span class="keyword">if</span>(k&gt; u-&gt;lc-&gt;size)</span><br><span class="line"><span class="keyword">return</span> kth(u-&gt;rc,k-u-&gt;lc-&gt;size);</span><br><span class="line"><span class="keyword">return</span> kth(u-&gt;lc,k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rnk</span><span class="params">(node *u,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u-&gt;size==<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(val&gt;u-&gt;lc-&gt;val)</span><br><span class="line">    <span class="keyword">return</span> rnk(u-&gt;rc,val)+u-&gt;lc-&gt;size;</span><br><span class="line"><span class="keyword">return</span> rnk(u-&gt;lc,val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> val,<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> kth(rt[h],rnk(rt[h],val)<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">nxt</span><span class="params">(<span class="keyword">int</span> val,<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> kth(rt[h],rnk(rt[h],val+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t*<span class="number">40</span>;++i)</span><br><span class="line">stk[i]=&amp;utk[i];</span><br><span class="line">    null=<span class="keyword">new</span> node(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    rt[<span class="number">0</span>]=newnode(<span class="number">1</span>,INF,null,null);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;v,&amp;opt,&amp;x);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">rt[i]=rotate(insert(rt[v],x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">rt[i]=rotate(erase(rt[v],x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,rnk(rt[v],x)),rt[i]=rt[v];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">4</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,kth(rt[v],x)),rt[i]=rt[v];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">5</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,pre(x,v)),rt[i]=rt[v];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,nxt(x,v)),rt[i]=rt[v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可持久化文艺平衡树"><a href="#可持久化文艺平衡树" class="headerlink" title="可持久化文艺平衡树"></a>可持久化文艺平衡树</h3><p><strong>题目描述</strong></p><p>您需要写一种数据结构，来维护一个序列，其中需要提供以下操作（<strong>对于各个以往的历史版本</strong>）：</p><ol><li>在第 $p$ 个数后插入数 $x$。</li><li>删除第 $p$ 个数。</li><li>翻转区间 $[l,r]$，例如原序列是 $\{5,4,3,2,1\}$，翻转区间 $[2,4]$ 后，结果是 $\{5,2,3,4,1\}$。</li><li>查询区间 $[l,r]$ 中所有数的和。</li></ol><p><strong>和原本平衡树不同的一点是，每一次的任何操作都是基于某一个历史版本，同时生成一个新的版本（操作 $4$ 即保持原版本无变化），新版本即编号为此次操作的序号。</strong></p><p><strong>本题强制在线。</strong></p><p><strong>输入格式</strong></p><p>第一行包含一个整数 $n$，表示操作的总数。</p><p>接下来 $n$ 行，每行前两个整数 $v_i, \mathrm{opt}_i$ 表示基于的过去版本号（$0 \le v_i &lt; i$），$\mathrm{opt}_i$ 表示操作的序号（$1 \le \mathrm{opt}_i \le 4$）。</p><p>若 $\mathrm{opt}_i=1$，则接下来两个整数 $p_i, x_i$，表示操作为在第 $p_i$ 个数后插入数 $x$ 。<br>若 $\mathrm{opt}_i=2$，则接下来一个整数 $p_i$，表示操作为删除第 $p_i$ 个数。<br>若 $\mathrm{opt}_i=3$，则接下来两个整数 $l_i, r_i$，表示操作为翻转区间 $[l_i, r_i]$。<br>若 $\mathrm{opt}_i=4$，则接下来两个整数 $l_i, r_i$，表示操作为查询区间 $[l_i, r_i]$ 的和。</p><p><strong>强制在线规则：</strong><br><strong>令当前操作之前的最后一次 $4$ 操作的答案为 $lastans$（如果之前没有 $4$ 操作，则 $lastans=0$）。</strong><br><strong>则此次操作的 $p_i,x_i$ 或 $l_i,r_i$ 均按位异或上 $lastans$ 即可得到真实的 $p_i,x_i$  或 $l_i,r_i$。</strong></p><p><strong>输出格式</strong></p><p>对于每个序号为 $4$ 的查询操作，输出一行一个数表示区间的和。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,v,opt,pos,x,l,r,last,a,b,c,d,cnt;</span><br><span class="line"><span class="keyword">int</span> T[<span class="number">200010</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> ls,rs,key,v,size,p,sum;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls(i) t[i].ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs(i) t[i].rs</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> key(i) t[i].key</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> v(i) t[i].v</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> size(i) t[i].size</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> p(i) t[i].p</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sum(i) t[i].sum</span></span><br><span class="line">&#125;t[<span class="number">30000020</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[a]=t[b];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">size(i)=size(ls(i))+size(rs(i))+<span class="number">1</span>;</span><br><span class="line">sum(i)=sum(ls(i))+sum(rs(i))+v(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p(i))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> RS=<span class="number">0</span>,LS=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ls(i))</span><br><span class="line">&#123;</span><br><span class="line">RS=++cnt;</span><br><span class="line">copy(RS,ls(i));</span><br><span class="line">p(RS)^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(rs(i))</span><br><span class="line">&#123;</span><br><span class="line">LS=++cnt;</span><br><span class="line">copy(LS,rs(i));</span><br><span class="line">p(LS)^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ls(i)=LS;</span><br><span class="line">rs(i)=RS;</span><br><span class="line">p(i)=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> now=++cnt;</span><br><span class="line"><span class="keyword">if</span>(!x||!y)</span><br><span class="line">copy(now,x+y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(key(x)&lt;key(y))</span><br><span class="line">&#123;</span><br><span class="line">pushdown(x);</span><br><span class="line">copy(now,x);</span><br><span class="line">rs(now)=merge(rs(now),y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pushdown(y);</span><br><span class="line">copy(now,y);</span><br><span class="line">ls(now)=merge(x,ls(y));</span><br><span class="line">&#125;</span><br><span class="line">pushup(now);</span><br><span class="line"><span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split_rank</span><span class="params">(<span class="keyword">int</span> pre,<span class="keyword">int</span> k,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!pre)</span><br><span class="line">&#123;</span><br><span class="line">x=y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> now=++cnt;</span><br><span class="line">pushdown(pre);</span><br><span class="line">copy(now,pre);</span><br><span class="line"><span class="keyword">if</span>(size(ls(now))&gt;=k)</span><br><span class="line">&#123;</span><br><span class="line">y=now;</span><br><span class="line">split_rank(ls(now),k,x,ls(now));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">x=now;</span><br><span class="line">split_rank(rs(now),k-size(ls(now))<span class="number">-1</span>,rs(now),y);</span><br><span class="line">&#125;</span><br><span class="line">pushup(now);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;v,&amp;opt);</span><br><span class="line">T[i]=T[v];</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;pos,&amp;x);</span><br><span class="line">pos^=last,x^=last;</span><br><span class="line">split_rank(T[v],pos,a,b);</span><br><span class="line">v(++cnt)=x,key(cnt)=rand();</span><br><span class="line">size(cnt)=<span class="number">1</span>,sum(cnt)=x;</span><br><span class="line">T[i]=merge(merge(a,cnt),b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pos);</span><br><span class="line">pos^=last;</span><br><span class="line">split_rank(T[v],pos<span class="number">-1</span>,a,b);</span><br><span class="line">split_rank(b,<span class="number">1</span>,c,d);</span><br><span class="line">T[i]=merge(a,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">l^=last,r^=last;</span><br><span class="line">split_rank(T[v],l<span class="number">-1</span>,a,b);</span><br><span class="line">split_rank(b,r-l+<span class="number">1</span>,c,d);</span><br><span class="line">p(c)^=<span class="number">1</span>;</span><br><span class="line">T[i]=merge(a,merge(c,d));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">l^=last,r^=last;</span><br><span class="line">split_rank(T[v],l<span class="number">-1</span>,a,b);</span><br><span class="line">split_rank(b,r-l+<span class="number">1</span>,c,d);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,last=sum(c));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树套树"><a href="#树套树" class="headerlink" title="树套树"></a>树套树</h2><h3 id="二维树状数组"><a href="#二维树状数组" class="headerlink" title="二维树状数组"></a>二维树状数组</h3><p><strong>题目描述</strong></p><p>这是一道模板题。</p><p>给定一个大小为 $n×m$ 的零矩阵，直到输入文件结束，你需要进行若干个操作，操作有两类：</p><p><code>1 a b c d x</code>，表示将左上角为 ($a$ 行,$b$ 列)，右下角为 ($c$ 行,$d$ 列) 的子矩阵全部加上 $x$；</p><p><code>2 a b c d</code>，表示询问左上角为 ($a$ 行,$b$ 列)，右下角为 ($c$ 行,$d$ 列) 为顶点的子矩阵的所有数字之和。</p><p><strong>输入格式</strong></p><p>第一行两个正整数 $n,m$，其中 $n,m$ 分别表示矩阵的行数与列数。</p><p>接下来若干行直到文件结束，均代表你需要进行的操作。</p><p><strong>输出格式</strong></p><p>对于每个 $2$ 操作，输出一行代表查询的结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2055</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,opt,a,b,c,d,x;</span><br><span class="line"><span class="keyword">int</span> t1[N][N],t2[N][N],t3[N][N],t4[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=i&amp;-i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=y;j&lt;=m;j+=j&amp;-j)</span><br><span class="line">&#123;</span><br><span class="line">t1[i][j]+=k;</span><br><span class="line">t2[i][j]+=k*x;</span><br><span class="line">t3[i][j]+=k*y;</span><br><span class="line">t4[i][j]+=k*x*y; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&gt;<span class="number">0</span>;i-=i&amp;-i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=y;j&gt;<span class="number">0</span>;j-=j&amp;-j)</span><br><span class="line">ans+=(x+<span class="number">1</span>)*(y+<span class="number">1</span>)*t1[i][j]-(y+<span class="number">1</span>)*t2[i][j]-(x+<span class="number">1</span>)*t3[i][j]+t4[i][j];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld%lld"</span>,&amp;opt,&amp;a,&amp;b,&amp;c,&amp;d)!=EOF)</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;x);</span><br><span class="line">update(a,b,x);</span><br><span class="line">            update(a,d+<span class="number">1</span>,-x);</span><br><span class="line">            update(c+<span class="number">1</span>,b,-x);</span><br><span class="line">            update(c+<span class="number">1</span>,d+<span class="number">1</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">int</span> ans=query(c,d)-query(c,b<span class="number">-1</span>)-query(a<span class="number">-1</span>,d)+query(a<span class="number">-1</span>,b<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="树状数组套主席树（带修主席树）"><a href="#树状数组套主席树（带修主席树）" class="headerlink" title="树状数组套主席树（带修主席树）"></a>树状数组套主席树（带修主席树）</h3><p><strong>题目描述</strong></p><p>给定一个含有 $n$ 个数的序列 $a_1,a_2 \dots a_n$，需要支持两种操作：</p><ul><li><code>Q l r k</code> 表示查询下标在区间 $[l,r]$ 中的第 $k$ 小的数</li><li><code>C x y</code> 表示将 $a_x$ 改为 $y$</li></ul><p><strong>输入格式</strong></p><p>第一行两个正整数 $n,m$，表示序列长度与操作个数。<br>第二行 $n$ 个整数，表示 $a_1,a_2 \dots a_n$。<br>接下来 $m$ 行，每行表示一个操作，都为上述两种中的一个。</p><p><strong>输出格式</strong></p><p>对于每一次询问，输出一行一个整数表示答案。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,tot,l,r,k,x,y;</span><br><span class="line"><span class="keyword">char</span> opt;</span><br><span class="line"><span class="keyword">int</span> a[N],root[N],L[N&lt;&lt;<span class="number">7</span>],R[N&lt;&lt;<span class="number">7</span>],S[N&lt;&lt;<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;u,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==<span class="number">0</span>) u=++tot;</span><br><span class="line">    S[u]+=d;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) update(L[u],l,mid,x,d);</span><br><span class="line">    <span class="keyword">else</span> update(R[u],mid+<span class="number">1</span>,r,x,d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=i&amp;-i)</span><br><span class="line">        update(root[i],<span class="number">0</span>,<span class="number">1e9</span>,a[x],<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=i&amp;-i)</span><br><span class="line">        update(root[i],<span class="number">0</span>,<span class="number">1e9</span>,y,<span class="number">1</span>);</span><br><span class="line">    a[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t1=<span class="number">0</span>,t2=<span class="number">0</span>,x[<span class="number">35</span>],y[<span class="number">35</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i;i-=i&amp;-i)</span><br><span class="line">x[++t1]=root[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=r;i;i-=i&amp;-i)</span><br><span class="line">y[++t2]=root[i];</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> ll=<span class="number">0</span>,rr=<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">while</span>(ll&lt;rr)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=<span class="number">0</span>,mid=ll+rr&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t1;++i)</span><br><span class="line">temp-=S[L[x[i]]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t2;++i)</span><br><span class="line">temp+=S[L[y[i]]];</span><br><span class="line">        <span class="keyword">if</span>(k&lt;=temp)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t1;++i)</span><br><span class="line">x[i]=L[x[i]];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t2;++i)</span><br><span class="line">y[i]=L[y[i]];</span><br><span class="line">            rr=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t1;++i)</span><br><span class="line">x[i]=R[x[i]];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t2;++i)</span><br><span class="line">y[i]=R[y[i]];</span><br><span class="line">            k-=temp,ll=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ll;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j+=j&amp;-j)</span><br><span class="line">            update(root[j],<span class="number">0</span>,<span class="number">1e9</span>,a[i],<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"\n%c"</span>,&amp;opt);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="string">'Q'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;r,&amp;k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(l<span class="number">-1</span>,r,k));</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">modify(x,y);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线段树套平衡树（二逼平衡树）"><a href="#线段树套平衡树（二逼平衡树）" class="headerlink" title="线段树套平衡树（二逼平衡树）"></a>线段树套平衡树（二逼平衡树）</h3><p><strong>题目描述</strong></p><p>您需要写一种数据结构（可参考题目标题），来维护一个有序数列，其中需要提供以下操作：</p><ol><li>查询k在区间内的排名</li><li>查询区间内排名为 $k$ 的值</li><li>修改某一位值上的数值</li><li>查询k在区间内的前驱(<strong>前驱定义为严格小于 $x$ ，且最大的数，若不存在输出 $-2147483647$</strong>)</li><li>查询k在区间内的后继(<strong>后继定义为严格大于 $x$，且最小的数，若不存在输出 $2147483647$</strong>)</li></ol><p>#注意上面两条要求和tyvj或者bzoj不一样，请注意</p><p><strong>输入格式</strong></p><p>第一行两个数 $n,m$ 表示长度为 $n$ 的有序序列和 $m$ 个操作</p><p>第二行有 $n$ 个数，表示有序序列</p><p>下面有 $m$ 行，$opt$ 表示操作标号</p><p>若 $opt=1$ 则为操作 $1$，之后有三个数 $l,r,k$ 表示查询k在区间 $[l,r]$ 的排名</p><p>若 $opt=2$ 则为操作 $2$，之后有三个数 $l,r,k$ 表示查询区间 $[l,r]$ 内排名为 $k$ 的数</p><p>若 $opt=3$ 则为操作 $3$，之后有两个数 $pos,k$ 表示将 $pos$ 位置的数修改为 $k$</p><p>若 $opt=4$ 则为操作 $4$，之后有三个数 $l,r,k$ 表示查询区间 $[l,r]$ 内 $k$ 的前驱</p><p>若 $opt=5$ 则为操作 $5$，之后有三个数 $l,r,k$ 表示查询区间 $[l,r]$ 内 $k$ 的后继</p><p><strong>输出格式</strong></p><p>对于操作 $1,2,4,5$ 各输出一行，表示查询结果<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>,INF=<span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,opt,l,r,pos,k;</span><br><span class="line"><span class="keyword">int</span> x[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> balance</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> fa,val,cnt,size;</span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">2</span>];</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s.empty())</span><br><span class="line"><span class="keyword">return</span> ++tot;</span><br><span class="line"><span class="keyword">int</span> x=s.top();</span><br><span class="line">s.pop();</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[x].size=t[t[x].ch[<span class="number">0</span>]].size+t[t[x].ch[<span class="number">1</span>]].size+t[x].cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y=t[x].fa,z=t[y].fa,k=(x==t[y].ch[<span class="number">1</span>]);</span><br><span class="line">t[z].ch[y==t[z].ch[<span class="number">1</span>]]=x,t[x].fa=z;</span><br><span class="line">t[y].ch[k]=t[x].ch[!k],t[t[x].ch[!k]].fa=y;</span><br><span class="line">t[x].ch[!k]=y,t[y].fa=x;</span><br><span class="line">pushup(y),pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> &amp;root,<span class="keyword">int</span> x,<span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(t[x].fa!=to)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=t[x].fa,z=t[y].fa;</span><br><span class="line"><span class="keyword">if</span>(z!=to)</span><br><span class="line">(x==t[y].ch[<span class="number">0</span>])^(y==t[z].ch[<span class="number">0</span>])?rotate(x):rotate(y);</span><br><span class="line">rotate(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!to)</span><br><span class="line">root=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> &amp;root,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=root;</span><br><span class="line"><span class="keyword">while</span>(x!=t[u].val&amp;&amp;t[u].ch[x&gt;t[u].val])</span><br><span class="line">u=t[u].ch[x&gt;t[u].val];</span><br><span class="line">splay(root,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rak</span><span class="params">(<span class="keyword">int</span> &amp;root,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">find(root,x);</span><br><span class="line"><span class="keyword">return</span> t[t[root].ch[<span class="number">0</span>]].size+(t[root].val&lt;x)*t[root].cnt<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">(<span class="keyword">int</span> &amp;root,<span class="keyword">int</span> x,<span class="keyword">bool</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">find(root,x);</span><br><span class="line"><span class="keyword">if</span>(t[root].val&lt;x&amp;&amp;!k)</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line"><span class="keyword">if</span>(t[root].val&gt;x&amp;&amp;k)</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line"><span class="keyword">int</span> u=t[root].ch[k];</span><br><span class="line"><span class="keyword">while</span>(t[u].ch[!k])</span><br><span class="line">u=t[u].ch[!k];</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;root,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=root,fa=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(u&amp;&amp;t[u].val!=x)</span><br><span class="line">fa=u,u=t[u].ch[x&gt;t[u].val];</span><br><span class="line"><span class="keyword">if</span>(u)</span><br><span class="line">++t[u].cnt;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">u=newnode();</span><br><span class="line"><span class="keyword">if</span>(!root) root=u;</span><br><span class="line">t[fa].ch[x&gt;t[fa].val]=u;</span><br><span class="line">t[u].fa=fa,t[u].cnt=t[u].size=<span class="number">1</span>,t[u].val=x;</span><br><span class="line">&#125;</span><br><span class="line">splay(root,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> &amp;root,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=next(root,x,<span class="number">0</span>),r=next(root,x,<span class="number">1</span>);</span><br><span class="line">splay(root,l,<span class="number">0</span>),splay(root,r,l);</span><br><span class="line"><span class="keyword">if</span>(t[t[r].ch[<span class="number">0</span>]].cnt&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">--t[t[r].ch[<span class="number">0</span>]].cnt;</span><br><span class="line">splay(root,t[r].ch[<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">s.push(t[r].ch[<span class="number">0</span>]);</span><br><span class="line">t[r].ch[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">splay(root,r,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> segment</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,root;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[u].l=l,t[u].r=r;</span><br><span class="line">balance::insert(t[u].root,INF);</span><br><span class="line">balance::insert(t[u].root,-INF);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;++i)</span><br><span class="line">balance::insert(t[u].root,x[i]);</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid=t[u].l+t[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(u&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">build(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rak</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[u].l&gt;=l&amp;&amp;t[u].r&lt;=r)</span><br><span class="line"><span class="keyword">return</span> balance::rak(t[u].root,k);</span><br><span class="line"><span class="keyword">int</span> mid=t[u].l+t[u].r&gt;&gt;<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">ans+=rak(u&lt;&lt;<span class="number">1</span>,l,r,k);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">ans+=rak(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> L=<span class="number">0</span>,R=<span class="number">1e8</span>,ans;</span><br><span class="line"><span class="keyword">while</span>(L&lt;=R)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid=L+R&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(rak(<span class="number">1</span>,l,r,mid)+<span class="number">1</span>&lt;=k)</span><br><span class="line">ans=mid,L=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">R=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pos,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">balance::erase(t[u].root,x[pos]);</span><br><span class="line">balance::insert(t[u].root,k);</span><br><span class="line"><span class="keyword">if</span>(t[u].l==t[u].r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid=t[u].l+t[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=mid)</span><br><span class="line">modify(u&lt;&lt;<span class="number">1</span>,pos,k);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">modify(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,pos,k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">bool</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[u].l&gt;=l&amp;&amp;t[u].r&lt;=r)</span><br><span class="line"><span class="keyword">return</span> balance::t[balance::next(t[u].root,x,k)].val;</span><br><span class="line"><span class="keyword">int</span> mid=t[u].l+t[u].r&gt;&gt;<span class="number">1</span>,ans=(k?INF:-INF);</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid)</span><br><span class="line">ans=(k?min(ans,next(u&lt;&lt;<span class="number">1</span>,l,r,x,k)):max(ans,next(u&lt;&lt;<span class="number">1</span>,l,r,x,k)));</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid)</span><br><span class="line">ans=(k?min(ans,next(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,x,k)):max(ans,next(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,x,k)));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,x+i);</span><br><span class="line">segment::build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;opt);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;r,&amp;k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,segment::rak(<span class="number">1</span>,l,r,k)+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;r,&amp;k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,segment::kth(l,r,k));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;pos,&amp;k);</span><br><span class="line">segment::modify(<span class="number">1</span>,pos,k);</span><br><span class="line">x[pos]=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;r,&amp;k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,segment::next(<span class="number">1</span>,l,r,k,<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;r,&amp;k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,segment::next(<span class="number">1</span>,l,r,k,<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> big=<span class="number">200010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">HashMap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> size=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> head[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,next;</span><br><span class="line">&#125;e[big&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="keyword">return</span> u%big;&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span>&amp; <span class="keyword">operator</span> [](<span class="keyword">int</span> u)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> hu=hash(u);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(head[hu]);i;i=e[i].next)<span class="keyword">if</span>(e[i].u==u)<span class="keyword">return</span> e[i].v;</span><br><span class="line">e[++size]=(_Data)&#123;u,<span class="number">-1</span>,head[hu]&#125;,head[hu]=size;</span><br><span class="line"><span class="keyword">return</span> e[size].v;</span><br><span class="line">&#125;</span><br><span class="line">_HashMap()&#123;size=<span class="number">0</span>,<span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span> head);&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="ST表"><a href="#ST表" class="headerlink" title="ST表"></a>ST表</h3><p>若运算 $opt$ 有 $x ~ opt ~ x = x$ 则可通过ST表处理.</p><p>如 $\max$,$\gcd$.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ST</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,n_=n-n%<span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n_;i+=<span class="number">3</span>)st[<span class="number">0</span>][i]=i,st[<span class="number">0</span>][i+<span class="number">1</span>]=i+<span class="number">1</span>,st[<span class="number">0</span>][i+<span class="number">2</span>]=i+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(i=n_+<span class="number">1</span>;i&lt;=n;++i)st[<span class="number">0</span>][i]=i;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">20</span>;++j)</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> &amp;l=st[j<span class="number">-1</span>][i],&amp;r=st[j<span class="number">-1</span>][i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))];</span><br><span class="line">st[j][i]=a[l]&gt;=a[r]?l:r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">LOG2</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ret;</span><br><span class="line">__asm__ __volatile__ (<span class="string">"bsrl %1, %%eax"</span>:<span class="string">"=a"</span>(ret):<span class="string">"m"</span>(x));</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">STQuery</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k=LOG2(r-l+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> &amp;l_=st[k][l],&amp;r_=st[k][r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> a[l_]&gt;=a[r_]?l_:r_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[x]==x) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> fa[x]=find(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fx=find(x),fy=find(x);</span><br><span class="line"><span class="keyword">if</span>(size[fx]&gt;size[fy]) swap(fx,fy);</span><br><span class="line">fa[fx]=fy;</span><br><span class="line">size[fy]+=size[fx];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LCT"><a href="#LCT" class="headerlink" title="LCT"></a>LCT</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100010</span>],r=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a[r++]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">r--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a[r<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">r=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(r==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[x].sum=tree[tree[x].son[<span class="number">0</span>]].sum^tree[tree[x].son[<span class="number">1</span>]].sum^tree[x].v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">revsion</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">swap(tree[x].son[<span class="number">0</span>],tree[x].son[<span class="number">1</span>]);</span><br><span class="line">tree[x].rev^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> tree[tree[x].fa].son[<span class="number">1</span>]==x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!tree[x].rev) <span class="keyword">return</span> ;</span><br><span class="line">tree[x].rev=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(tree[x].son[<span class="number">0</span>]) revsion(tree[x].son[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>(tree[x].son[<span class="number">1</span>]) revsion(tree[x].son[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[x].fa=y;</span><br><span class="line">tree[y].son[k]=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">notroot</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (tree[tree[x].fa].son[<span class="number">1</span>]==x||tree[tree[x].fa].son[<span class="number">0</span>]==x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fa=tree[x].fa,ffa=tree[fa].fa;</span><br><span class="line"><span class="keyword">int</span> c=find(x),cc=find(fa);</span><br><span class="line"><span class="keyword">if</span>(notroot(fa))</span><br><span class="line">&#123;</span><br><span class="line">tree[ffa].son[cc]=x;</span><br><span class="line">&#125;</span><br><span class="line">tree[x].fa=ffa;</span><br><span class="line">connect(tree[x].son[c^<span class="number">1</span>],fa,c);</span><br><span class="line">connect(fa,x,c^<span class="number">1</span>);</span><br><span class="line">pushup(fa);pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y=x;</span><br><span class="line">s.clear();</span><br><span class="line">s.push(x);</span><br><span class="line"><span class="keyword">while</span>(notroot(y))</span><br><span class="line">s.push(y=tree[y].fa);</span><br><span class="line"><span class="keyword">while</span>(!s.empty())</span><br><span class="line">&#123;</span><br><span class="line">pushdown(s.top());</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(notroot(x))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> fa=tree[x].fa;</span><br><span class="line"><span class="keyword">if</span>(notroot(fa))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(find(x)==find(fa)) rotate(fa);</span><br><span class="line"><span class="keyword">else</span> rotate(x);</span><br><span class="line">&#125;</span><br><span class="line">rotate(x);</span><br><span class="line">&#125;</span><br><span class="line">pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;x;i=x,x=tree[x].fa)</span><br><span class="line">&#123;</span><br><span class="line">splay(x);</span><br><span class="line">tree[x].son[<span class="number">1</span>]=i;</span><br><span class="line">pushup(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findroot</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">access(x);</span><br><span class="line">splay(x);</span><br><span class="line"><span class="keyword">while</span>(tree[x].son[<span class="number">0</span>])</span><br><span class="line">pushdown(x),x=tree[x].son[<span class="number">0</span>];</span><br><span class="line">splay(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">access(x);</span><br><span class="line">splay(x);</span><br><span class="line">revsion(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">makeroot(x);</span><br><span class="line">access(y);</span><br><span class="line">splay(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">makeroot(x);</span><br><span class="line"><span class="keyword">if</span>(findroot(y)!=x)</span><br><span class="line">tree[x].fa=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">makeroot(x);</span><br><span class="line"><span class="keyword">if</span>(findroot(y)==x&amp;&amp;tree[y].fa==x&amp;&amp;!tree[y].son[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">tree[y].fa=tree[x].son[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">pushup(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线性基"><a href="#线性基" class="headerlink" title="线性基"></a>线性基</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">63</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!(x&gt;&gt;i)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(!p[i])</span><br><span class="line">&#123;</span><br><span class="line">p[i]=x;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">x^=p[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="KD-tree"><a href="#KD-tree" class="headerlink" title="KD-tree"></a>KD-tree</h3><p>现在有 $n$ 个四维空间中的点,请求出一条最长的路径,满足任意一维坐标都是单调不降的.注意路径起点是任意选择的,并且路径与输入顺序无关(路径顺序不一定要满足在输入中是升序).</p><p>路径的长度是经过的点的数量,任意点只能经过一次,</p><p>第一行一个整数 $n$ .</p><p>接下来 $n$ 行,每行四个整数 $a_i,b_i,c_i,d_i$ ,表示四维坐标.</p><p>一行一个整数,表示最长路径的长度.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>,K=<span class="number">3</span>,inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> alpha=<span class="number">0.8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nowd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> d[K],w;</span><br><span class="line">    Point(<span class="keyword">int</span> x=<span class="number">0</span>,<span class="keyword">int</span> y=<span class="number">0</span>,<span class="keyword">int</span> z=<span class="number">0</span>) &#123;d[<span class="number">0</span>]=x;d[<span class="number">1</span>]=y;d[<span class="number">2</span>]=z;&#125;</span><br><span class="line">    <span class="keyword">int</span> &amp; <span class="keyword">operator</span> [] (<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) &#123;<span class="keyword">return</span> d[x];&#125;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">operator</span> [] (<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) <span class="keyword">const</span> &#123;<span class="keyword">return</span> d[x];&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point &amp;x) <span class="keyword">const</span> &#123;<span class="keyword">return</span> d[nowd]&lt;x[nowd];&#125;</span><br><span class="line">&#125;a[maxn],b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Point &amp;x,<span class="keyword">const</span> Point &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.w!=y.w) <span class="keyword">return</span> x.w&lt;y.w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;++i)</span><br><span class="line">        <span class="keyword">if</span>(x[i]!=y[i]) <span class="keyword">return</span> x[i]&lt;y[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Point val,mx,mi;</span><br><span class="line">    <span class="keyword">int</span> siz;</span><br><span class="line">    Node *ch[<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        siz=ch[<span class="number">0</span>]-&gt;siz+ch[<span class="number">1</span>]-&gt;siz+<span class="number">1</span>;</span><br><span class="line">        mx.w=max(val.w,max(ch[<span class="number">0</span>]-&gt;mx.w,ch[<span class="number">1</span>]-&gt;mx.w));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            mi[i]=min(val[i],min(ch[<span class="number">0</span>]-&gt;mi[i],ch[<span class="number">1</span>]-&gt;mi[i]));</span><br><span class="line">            mx[i]=max(val[i],max(ch[<span class="number">0</span>]-&gt;mx[i],ch[<span class="number">1</span>]-&gt;mx[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">unbalanced</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> ch[<span class="number">0</span>]-&gt;siz&gt;siz*alpha||ch[<span class="number">1</span>]-&gt;siz&gt;siz*alpha;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">in</span><span class="params">(<span class="keyword">const</span> Point &amp;x,<span class="keyword">const</span> Point &amp;y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;++i)</span><br><span class="line">            <span class="keyword">if</span>(x[i]&gt;mi[i]||y[i]&lt;mx[i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">out</span><span class="params">(<span class="keyword">const</span> Point &amp;x,<span class="keyword">const</span> Point &amp;y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;++i)</span><br><span class="line">            <span class="keyword">if</span>(y[i]&lt;mi[i]||x[i]&gt;mx[i]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">at</span><span class="params">(<span class="keyword">const</span> Point &amp;x,<span class="keyword">const</span> Point &amp;y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;++i)</span><br><span class="line">            <span class="keyword">if</span>(val[i]&lt;x[i]||val[i]&gt;y[i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;memory_Pool[maxn],*tail,*null,*rt,*recy[maxn];</span><br><span class="line"><span class="keyword">int</span> topr,cnt,ans,n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c=getchar())) (c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>);</span><br><span class="line">    x=c^<span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c=getchar())) x=x*<span class="number">10</span>+(c^<span class="number">48</span>);</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initkdt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tail=memory_Pool;</span><br><span class="line">    null=tail++;</span><br><span class="line">    null-&gt;ch[<span class="number">0</span>]=null-&gt;ch[<span class="number">1</span>]=null;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;++i)</span><br><span class="line">        null-&gt;mi[i]=inf,null-&gt;mx[i]=-inf;</span><br><span class="line">    rt=null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Node *<span class="title">newnode</span><span class="params">(<span class="keyword">const</span> Point &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *u=topr?recy[--topr]:tail++;</span><br><span class="line">    u-&gt;ch[<span class="number">0</span>]=u-&gt;ch[<span class="number">1</span>]=null;</span><br><span class="line">    u-&gt;val=u-&gt;mx=u-&gt;mi=x;u-&gt;siz=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recycle</span><span class="params">(Node *u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==null) <span class="keyword">return</span>;</span><br><span class="line">    recycle(u-&gt;ch[<span class="number">0</span>]);</span><br><span class="line">    b[++cnt]=u-&gt;val;</span><br><span class="line">    recy[topr++]=u;</span><br><span class="line">    recycle(u-&gt;ch[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> null;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;nowd=d;</span><br><span class="line">    nth_element(b+l,b+mid,b+r+<span class="number">1</span>);</span><br><span class="line">    Node *u=newnode(b[mid]);</span><br><span class="line">    u-&gt;ch[<span class="number">0</span>]=build(l,mid<span class="number">-1</span>,(d+<span class="number">1</span>)%K);</span><br><span class="line">    u-&gt;ch[<span class="number">1</span>]=build(mid+<span class="number">1</span>,r,(d+<span class="number">1</span>)%K);</span><br><span class="line">    u-&gt;pushup();<span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rebuild</span><span class="params">(Node *&amp;u,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    recycle(u);</span><br><span class="line">    u=build(<span class="number">1</span>,cnt,d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node **<span class="title">insert</span><span class="params">(Node *&amp;u,<span class="keyword">const</span> Point &amp;x,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==null) <span class="keyword">return</span> u=newnode(x),&amp;null;</span><br><span class="line">    Node **bad=insert(u-&gt;ch[u-&gt;val[d]&lt;x[d]],x,(d+<span class="number">1</span>)%K);</span><br><span class="line">    u-&gt;pushup();</span><br><span class="line">    <span class="keyword">if</span>(u-&gt;unbalanced()) bad=&amp;u,nowd=d;</span><br><span class="line">    <span class="keyword">return</span> bad;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> Point &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node **bad=insert(rt,x,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(*bad==null) <span class="keyword">return</span>;</span><br><span class="line">    rebuild(*bad,nowd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(Node *u,<span class="keyword">const</span> Point &amp;x,<span class="keyword">const</span> Point &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==null||u-&gt;mx.w&lt;=ans||u-&gt;out(x,y)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(u-&gt;in(x,y)) <span class="keyword">return</span> ans=max(ans,u-&gt;mx.w),<span class="keyword">void</span>();</span><br><span class="line">    <span class="keyword">if</span>(u-&gt;at(x,y)) ans=max(ans,u-&gt;val.w);</span><br><span class="line">    query(u-&gt;ch[<span class="number">0</span>],x,y);query(u-&gt;ch[<span class="number">1</span>],x,y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">const</span> Point &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    query(rt,Point(-inf,-inf,-inf),x);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        read(a[i].w),read(a[i][<span class="number">0</span>]),read(a[i][<span class="number">1</span>]),read(a[i][<span class="number">2</span>]);</span><br><span class="line">    sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        a[i].w=<span class="number">0</span>;</span><br><span class="line">    initkdt();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        ans=max(ans,a[i].w=query(a[i])+<span class="number">1</span>),insert(a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:背板大王&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.lemir3.red/categories/总结/"/>
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/总结/数据结构/"/>
    
    
    <category term="总结" scheme="https://www.lemir3.red/tags/总结/"/>
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
  </entry>
  
  <entry>
    <title>「总结」10272020机房赛</title>
    <link href="https://www.lemir3.red/2020/10/27/zong-jie-10272020-ji-fang-sai/"/>
    <id>https://www.lemir3.red/2020/10/27/zong-jie-10272020-ji-fang-sai/</id>
    <published>2020-10-27T08:53:28.000Z</published>
    <updated>2020-10-27T09:18:19.427Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:无</p><a id="more"></a><h1 id="10272020机房赛"><a href="#10272020机房赛" class="headerlink" title="10272020机房赛"></a>10272020机房赛</h1><p>等会还要考一场,题解没时间写了,直接把赛后题解搬过来方便以后看吧.</p><h2 id="T1-签到-check"><a href="#T1-签到-check" class="headerlink" title="T1 签到(check)"></a>T1 签到(check)</h2><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p> 这道题数据范围比较小，所以我们可以直接暴力枚举答案。</p><h2 id="T2-染色-color"><a href="#T2-染色-color" class="headerlink" title="T2 染色(color)"></a>T2 染色(color)</h2><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p> 考虑质数可以分为 $2$ 和奇质数。</p><p> 我们考虑奇偶性染色，便可以满足所有的奇质数。因为有 $2$ 的存在，我们必须按照$\mod 4$ 的方式染色。</p><p> 那答案有没有可能小于 $4$ 呢？考虑 $1, 3, 6, 8$，任意两个数的差都是质数。所以答案不能为 $3$。</p><p> 当 $n$ 小于 $8$ 的时候爆搜。</p><p> 时间复杂度 $O(n)$（$n \geq 8$），$O(4^n)$（$n &lt; 8$）。</p><h2 id="T3-序列-array"><a href="#T3-序列-array" class="headerlink" title="T3 序列(array)"></a>T3 序列(array)</h2><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p> 首先我们有贪心策略：若 $a_i \leq a_j$，则 $b_i \geq b_j$。</p><p> 我们将 $a$ 排序，枚举有多少个 $b$ 达到了上界 $n$。</p><p> 若 $s$ 个达到了上界。我们设 $b_{s+1} = x$，则答案为</p><script type="math/tex; mode=display">in + x+\lfloor\frac{D-n\sum_{i=1}^sa_i-a_{s+1}x}{\sum_{i=s+2}^na_i}\rfloor (k+m-i-1)</script><p> 后面是形如 $x + a\lfloor \frac {bx+c}d\rfloor $ （$a \geq 0$） 的形式。这个函数形如锯齿状，有三种可能达到最大值。</p><ol><li><p>开始的第一个峰。</p></li><li><p>结束的最后一个峰。</p></li><li><p>结束点。</p><p>放在题中就是</p></li><li><p>尽可能提高 $\min{b_i}$，零头去提高 $b_s$。</p></li><li><p>尽可能提高 $b_s$，零头去提高 $\min b_i$（虽然零头显然不足以提高）。</p></li><li><p>让 $\min b_i$ 增加 $1$，剩下全部去提高 $b_s$。</p><p>时间复杂度 $O(Tn \log n)$。</p></li></ol><h2 id="T4-树上询问-query"><a href="#T4-树上询问-query" class="headerlink" title="T4 树上询问(query)"></a>T4 树上询问(query)</h2><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p> 考虑将链拆为两端 $a$ 到 $lca(a,b)$ 与 $lca(a,b)$ 到 $b$。</p><p> 记 $dep(x)$ 表示 $x$ 的深度。</p><p>  $a$ 到 $lca(a,b)$ 上的答案就是 $dep(x) - dep(a)=x$ 的 $x$ 个数，也就是说 $dep(x)-x=dep(a)$ 的 $x$ 个数，另一段的类似，这里只讨论这一段。</p><p> 注意到前面这个是一个常数，令 $b_x=dep(x)-x$，所以就是查链上有多少点 $x$ 满足 $b_x$ 为常数 $dep(a)$，这个差分一下，可以变成查点到根路径上有多少个点满足 $b_x$ 为常数。</p><p> 将询问离线，做一个树上前缀和，维护一个数组，表示每个 $b_x$ 的出现次数，然后DFS，DFS到 $x$ 时将 $b_x$ 插入到这个数组中，DFS出 $x$ 的时候将 $b_x$ 给删去，DFS到一个点的时候处理所有被离线到这个点的询问即可。</p><p> 总时间复杂度 $O(n+m)$。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>T1考虑了下快速幂的性质,魔改了一下拆指数的过程用来二分check就过了,就花了打代码和测几组特殊数据的时间.</p><p>T2开始想用图论,但是观察数据范围发现数据的跨度非常大,估计是个规律题给了不少高复杂度的暴力分,于是推了几组数据发现因为$4$是最小的合数,长度大于$7$的数列答案一定都是$4$,然后简单构造一下,小于$7$的规律就是用$1$不是质数的特点来构造.</p><p>T3看到题不久就发现答案是个单峰函数,想用三分来求,但是三分太久没写不会写了,于是写了个枚举并且随机选点然后对剩下的数跑背包取最大值的做法,但是背包的数组开小了没拿到分.其实想到单峰之后再往后考虑最值的三种取法就是题解里面的线性做法了,只是处理起来比较麻烦.</p><p>写T4剩一个小时左右,没想到用深度来转化链上的位置,虽说是个比较常见的套路但没怎么用过,想出这个就可以直接离线树上差分了,然后树上前缀和求出答案.所以因为不知道怎么做这个信息的差分,想出来的做法都和链的长度有关,于是就直接去枚举链了,拿了75pts.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:无&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.lemir3.red/categories/总结/"/>
    
    
    <category term="总结" scheme="https://www.lemir3.red/tags/总结/"/>
    
  </entry>
  
  <entry>
    <title>「总结」10262020机房赛</title>
    <link href="https://www.lemir3.red/2020/10/26/zong-jie-10262020-ji-fang-sai/"/>
    <id>https://www.lemir3.red/2020/10/26/zong-jie-10262020-ji-fang-sai/</id>
    <published>2020-10-26T08:06:25.000Z</published>
    <updated>2020-10-26T08:59:46.557Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:拉 垮 大 王 历 险 记</p><a id="more"></a><h1 id="10262020机房赛"><a href="#10262020机房赛" class="headerlink" title="10262020机房赛"></a>10262020机房赛</h1><p>deco的题,我好菜啊.</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>正解是个4维前缀和转移的数位dp,场上想到贡献的数只有2,3,5,7然后用数位dp搞但实在是不会写,于是做了个组合的思路,复杂度上有点瓶颈想不出来,拿了1e6的50pts.</p><p>就可以发现的是,如果一个数的数位积小于等于$k$,因为有$\gcd(a , b) \leq \min \{ a , b \}$,那么范围内所有合法的数都可以贡献进数对,否则的话需要减去一些$\gcd$大于$k$的数对.</p><p>设当前的数位积为$a$,我们通过枚举$a$大于$k$的约数(含$a$)的方式来减去这一部分数对,所以先预处理好范围内数位积为某个数的数的数量.</p><p>如果能用组合快速预处理就可以过这道题了,但是$n$是1e18的,感觉没什么做法,<del>或者另外写个数位dp?</del></p><h3 id="代码-50pts"><a href="#代码-50pts" class="headerlink" title="代码(50pts)"></a>代码(50pts)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">600010</span>,p=<span class="number">998244353</span>;</span><br><span class="line">lxl n,k,ans,distence,to;</span><br><span class="line">lxl vis[big],size[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">dig</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">cnt</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(x)cnt*=(x%<span class="number">10</span>),x/=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPow</span><span class="params">(lxl a,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl di=dig(i);</span><br><span class="line"><span class="keyword">if</span>(!di)<span class="keyword">continue</span>;</span><br><span class="line">++distence,++size[di],to=<span class="built_in">std</span>::max(to,di);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),k=read();</span><br><span class="line">prework();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=to;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl di=i;</span><br><span class="line">ans=(ans+size[i]*distence%p)%p;</span><br><span class="line"><span class="keyword">if</span>(di&gt;k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">lxl <span class="title">deco</span><span class="params">(<span class="built_in">sqrt</span>(di))</span></span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=deco;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k*j&gt;=di)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(di%j)<span class="keyword">continue</span>;</span><br><span class="line"><span class="function">lxl <span class="title">kl</span><span class="params">(di/j)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(kl);k&lt;=to;k+=kl)</span><br><span class="line"><span class="keyword">if</span>(!vis[k])ans=(ans-size[i]*size[k]%p+p)%p,vis[k]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(j&gt;k)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(j);k&lt;=to;k+=j)</span><br><span class="line"><span class="keyword">if</span>(!vis[k])ans=(ans-size[i]*size[k]%p+p)%p,vis[k]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=deco;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k*j&gt;=di)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(di%j)<span class="keyword">continue</span>;</span><br><span class="line"><span class="function">lxl <span class="title">kl</span><span class="params">(di/j)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(kl);k&lt;=to;k+=kl)</span><br><span class="line"><span class="keyword">if</span>(vis[k])vis[k]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(j&gt;k)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(j);k&lt;=to;k+=j)</span><br><span class="line"><span class="keyword">if</span>(vis[k])vis[k]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>推一下那个变化的式子发现每次变化是把$i$变到$2i  ~ \textrm{mod} ~ n+1$上去,然后变化$k$次就是$i2^{k} ~  \textrm{mod} ~ n+1$.</p><p>因为第一个数回到$1$上,所以$2^k \equiv 1 ~  \textrm{mod} ~ (n+1)$,那么对于所有$i$有$i2^k \equiv i ~ \textrm{mod} ~ (n+1)$,判断第一个数是否归位即可.</p><p>那么要做的事情是判断$n$是否是使得$2^k \equiv 1 ~ \textrm{mod} ~ (n+1)$的最小$k$.</p><p>首先根据欧拉定理有$2^{\varphi(n+1)} \equiv 1 ~ \textrm{mod} ~ (n+1)$,因为$n \geq \varphi(n+1)$当且仅当$n+1$是质数,所以先判断一下.</p><p>$n$现在已经满足条件了,但是不一定是最小的,但是因为有$2^k \equiv ( 2^{k} )^{\frac{n}{k}} \equiv 1 \quad \textrm{mod} ~ (n+1)$,最小的$k$一定是$n$的约数</p><p>将$n$进行唯一分解$p_1^{k_1} p_2^{k_2} \cdots p_n^{k_n}$,因为$k$是$n$的约数所以$k$一定是$\frac{n}{p1} , \frac{n}{p_2} , \cdots , \frac{n}{p_n}$中的某个数的约数,而且只要这个数合法$k$就合法,所以枚举$n$的质因子即可.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl small=<span class="number">1e6</span>+<span class="number">10</span>,big=<span class="number">1e7</span>+<span class="number">10</span>;</span><br><span class="line">lxl A,ans;</span><br><span class="line">lxl prime[small],muq[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;big;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!muq[i])prime[++prime[<span class="number">0</span>]]=i,muq[i]=i;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=prime[<span class="number">0</span>];++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(prime[j]*i&gt;big)<span class="keyword">break</span>;</span><br><span class="line">muq[i*prime[j]]=prime[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPow</span><span class="params">(lxl a,lxl b,lxl p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%p)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a%p);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">prework();</span><br><span class="line">A=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=A;i+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(muq[i+<span class="number">1</span>]!=i+<span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="function">lxl <span class="title">tmp</span><span class="params">(i)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(tmp&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(FastPow(<span class="number">2</span>,i/muq[tmp],i+<span class="number">1</span>)==<span class="number">1</span>)<span class="keyword">goto</span> end;</span><br><span class="line">tmp/=muq[tmp];</span><br><span class="line">&#125;</span><br><span class="line">ans+=i;</span><br><span class="line">end:;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.5lf\n"</span>,(<span class="keyword">double</span>)ans/(<span class="keyword">double</span>)(A/<span class="number">2</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><p>不会.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>T1开始想的是用数位dp,但是实现起来不太会然后想了个组合的做法拿了50pts,做法有个瓶颈不会所以没法做1e18的数据.因为开始的时候看了后面两个题都没有什么思路这题就做得有点久,没意料到一档50分是1e6,一档50分是1e18的题会有35分的数据n小于1e3,本来以为暴力肯定没分的,到头来就比暴力高了15pts.</p><p>然后时间剩一个小时四十分钟觉得T3更好拿分T2写了个模拟就去写T3了,但是合并的时候没处理到0挂掉了,而且没去推T2那个30pts的式子,其实那个式子推起来不难而且再往后想一点就正解了,推到后面打个表也行.</p><p>问题就主要出在没做T2上,T2拿了个最低的10pts,以后就算时间不多看到这种出现式子的题还是得处理一下,后面的做法都是随着式子循序渐进的.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:拉 垮 大 王 历 险 记&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.lemir3.red/categories/总结/"/>
    
    
    <category term="总结" scheme="https://www.lemir3.red/tags/总结/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu5590_赛车游戏</title>
    <link href="https://www.lemir3.red/2020/10/24/jie-ti-bao-gao-luogu5590-sai-che-you-xi/"/>
    <id>https://www.lemir3.red/2020/10/24/jie-ti-bao-gao-luogu5590-sai-che-you-xi/</id>
    <published>2020-10-24T01:52:41.000Z</published>
    <updated>2020-10-24T02:07:32.444Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:拓扑序上约束最短路dis</p><a id="more"></a><h1 id="luogu5590-赛车游戏"><a href="#luogu5590-赛车游戏" class="headerlink" title="luogu5590_赛车游戏"></a>luogu5590_赛车游戏</h1><p><a href="https://www.luogu.com.cn/problem/P5590" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>因为每条边的长度不超过$9$,所以只要$dis_v - dis_u \leq 9$,我们都可以通过改一条边权使得两条路径(原先经过$v$的路径,由$u$经过$v$的路径)等长.</p><p>所以有:</p><script type="math/tex; mode=display">1 \leq dis_v -dis_u \leq 9</script><p>那么我们将$dis$视为变量进行差分约束:</p><script type="math/tex; mode=display">dis_v - dis_u \leq 9\\dis_u - dis_v \leq -1</script><p>然后判断图中是否有负环即可.</p><p>需要注意的是我们约束的点必须是在$1$到$n$的路径上的,所以将图反向建一次,分别以$1$和$n$为起点遍历整个图,同时被遍历到的点即为$1$到$n$路径上的点.</p><p>然后对这些点重新建出图,按这张图的拓扑序来约束即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> In(x) (vis[0][x]&amp;&amp;vis[1][x])</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">1010</span>,large=<span class="number">2010</span>;</span><br><span class="line">lxl n,m;</span><br><span class="line">lxl vis[<span class="number">2</span>][big],dis[big],inq[big],in[big],uu[large],vv[large],degree[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl EdgeSize;</span><br><span class="line">lxl head[big];</span><br><span class="line">_Graph()&#123;<span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head),EdgeSize=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next,w;</span><br><span class="line">&#125;e[large];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v,lxl w=<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize]=(_Edge)&#123;v,head[u],w&#125;;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;G[<span class="number">3</span>],P;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;lxl&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(lxl u,lxl sign)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[sign][u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(G[sign].head[u]);~i;i=G[sign].e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=G[sign].e[i].v;</span><br><span class="line"><span class="keyword">if</span>(vis[sign][v])<span class="keyword">continue</span>;</span><br><span class="line">dfs(v,sign);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dis),<span class="built_in">memset</span>(inq,<span class="number">0</span>,<span class="keyword">sizeof</span> inq),<span class="built_in">memset</span>(in,<span class="number">0</span>,<span class="keyword">sizeof</span> in);</span><br><span class="line">dis[<span class="number">1</span>]=<span class="number">0</span>,inq[<span class="number">1</span>]=<span class="literal">true</span>,q.push(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">lxl u=q.front();q.pop(),inq[u]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(P.head[u]);~i;i=P.e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=P.e[i].v,w=P.e[i].w;</span><br><span class="line"><span class="keyword">if</span>(dis[v]&gt;dis[u]+w)</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]+w;</span><br><span class="line"><span class="keyword">if</span>(++in[v]&gt;n+<span class="number">2</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(!inq[v])q.push(v),inq[v]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line"><span class="keyword">if</span>(In(uu[i])&amp;&amp;In(vv[i]))</span><br><span class="line">G[<span class="number">2</span>].EdgeAdd(uu[i],vv[i]),++degree[vv[i]];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="keyword">if</span>(!degree[i]&amp;&amp;In(i))q.push(i);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">lxl u=q.front();q.pop();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(G[<span class="number">2</span>].head[u]);~i;i=G[<span class="number">2</span>].e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=G[<span class="number">2</span>].e[i].v;</span><br><span class="line">--degree[v],P.EdgeAdd(u,v,<span class="number">9</span>),P.EdgeAdd(v,u,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(!degree[v])q.push(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">uu[i]=read(),vv[i]=read();</span><br><span class="line">G[<span class="number">0</span>].EdgeAdd(uu[i],vv[i]),G[<span class="number">1</span>].EdgeAdd(vv[i],uu[i]);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);<span class="keyword">if</span>(!vis[<span class="number">0</span>][n])&#123;<span class="built_in">printf</span>(<span class="string">"-1\n"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">dfs(n,<span class="number">1</span>),build();</span><br><span class="line"><span class="keyword">if</span>(!SPFA())&#123;<span class="built_in">printf</span>(<span class="string">"-1\n"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=n;++i)debugi(vis[0][i]);endl;</span></span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=n;++i)debugi(vis[1][i]);endl;</span></span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=n;++i)debug(dis[i]),debug(from[i]),endl;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,n,m);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(In(uu[i])&amp;&amp;In(vv[i]))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld %lld %lld\n"</span>,uu[i],vv[i],<span class="number">1l</span>l*<span class="built_in">abs</span>(dis[uu[i]]-dis[vv[i]]));</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld %lld 1\n"</span>,uu[i],vv[i]);</span><br><span class="line"><span class="comment">// if(i==106)printf("check\n");</span></span><br><span class="line">&#125;</span><br><span class="line">end:;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10 10</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">5 6</span></span><br><span class="line"><span class="comment">6 7</span></span><br><span class="line"><span class="comment">7 8</span></span><br><span class="line"><span class="comment">8 9</span></span><br><span class="line"><span class="comment">9 10</span></span><br><span class="line"><span class="comment">1 10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">11 11</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">5 6</span></span><br><span class="line"><span class="comment">6 7</span></span><br><span class="line"><span class="comment">7 8</span></span><br><span class="line"><span class="comment">8 9</span></span><br><span class="line"><span class="comment">9 11</span></span><br><span class="line"><span class="comment">1 11</span></span><br><span class="line"><span class="comment">10 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:拓扑序上约束最短路dis&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="图论-差分约束" scheme="https://www.lemir3.red/categories/图论/图论-差分约束/"/>
    
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="差分约束" scheme="https://www.lemir3.red/tags/差分约束/"/>
    
  </entry>
  
  <entry>
    <title>「总结」10232020newcoder赛</title>
    <link href="https://www.lemir3.red/2020/10/23/zong-jie-10232020newcoder-sai/"/>
    <id>https://www.lemir3.red/2020/10/23/zong-jie-10232020newcoder-sai/</id>
    <published>2020-10-23T07:34:06.000Z</published>
    <updated>2020-10-23T09:26:39.753Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:T1日常挂分</p><a id="more"></a><h1 id="10232020newcoder赛"><a href="#10232020newcoder赛" class="headerlink" title="10232020newcoder赛"></a>10232020newcoder赛</h1><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>小凯的疑惑题,发现取模的规律就直接秒,没发现就老实打暴力40pts.</p><p>但是考场上想了半个小时就跳了,离结束一个小时回来看灵光一闪把规理找到了.</p><p>就是$ans = c \times 2^k \quad \textrm{mod}  ~ (a+b+c)$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line">lxl T,a,b,c,k,all,cua,cuc,len;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPow</span><span class="params">(lxl a,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%all)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a%all);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T=read();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">a=read(),b=read(),c=read(),k=read();</span><br><span class="line">all=a+b+c,a=a+b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,c*FastPow(<span class="number">2</span>,k)%all);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>做法挺多的,一种思路是只用考虑路径上最大的边,所以可以建出kruscal重构树,一个点的子树都是合法的,然后树上倍增,每个点bitset或者线段树合并维护颜色.</p><p>然后我的做法是用dijkstra的思路求出到达一个点需要经过最大的边,然后求每种颜色的最小需要的边权即可.</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 4557430888798830399</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">500010</span>,small=<span class="number">610</span>;</span><br><span class="line">lxl n,m,q,x,opt,EdgeSize,cnt,M,ans;</span><br><span class="line">lxl c[big],head[big],can[small],dis[big],vis[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next,w;</span><br><span class="line">&#125;e[big&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="built_in">std</span>::priority_queue&lt;<span class="built_in">std</span>::pair&lt;lxl,lxl&gt; &gt;que;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v,w) EdgeAdd(u,v,w),EdgeAdd(v,u,w)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v,lxl w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize]=(_Edge)&#123;v,head[u],w&#125;;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(lxl s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dis);</span><br><span class="line">dis[s]=<span class="number">0</span>,que.push(<span class="built_in">std</span>::make_pair(<span class="number">0</span>,s));</span><br><span class="line"><span class="keyword">while</span>(!que.empty())</span><br><span class="line">&#123;</span><br><span class="line">lxl u=que.top().second;que.pop();</span><br><span class="line"><span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(  <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v,w=e[i].w;</span><br><span class="line"><span class="keyword">if</span>(dis[v]&gt;<span class="built_in">std</span>::max(w,dis[u]))</span><br><span class="line">dis[v]=<span class="built_in">std</span>::max(dis[u],w),que.push(<span class="built_in">std</span>::make_pair(-dis[v],v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head),<span class="built_in">memset</span>(can,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> can);</span><br><span class="line">n=read(),m=read(),q=read(),x=read(),opt=read();</span><br><span class="line"><span class="keyword">if</span>(opt)M=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)c[i]=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read(),w=read();</span><br><span class="line">add(u,v,w);</span><br><span class="line">&#125;</span><br><span class="line">dijkstra(x);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)can[c[i]]=<span class="built_in">std</span>::min(can[c[i]],dis[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=q;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl l=read(),r=read();</span><br><span class="line"><span class="keyword">if</span>(opt)l=(l^ans)%M+<span class="number">1</span>,r=(r^ans)%M+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r)<span class="built_in">std</span>::swap(l,r);</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(  <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;small;++i)</span><br><span class="line"><span class="keyword">if</span>(can[i]&lt;=r)ans+=<span class="built_in">std</span>::min(r-can[i]+<span class="number">1</span>,r-l+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>不太会正解,但考场上做了个90pts做法:</p><p>把改变的点存下来,询问的时候遍历这些点,lca求询问点和改变点的距离判断是否已经被扩展到.</p><p>看上去很丑但真的有90pts…</p><h3 id="代码-90pts"><a href="#代码-90pts" class="headerlink" title="代码(90pts)"></a>代码(90pts)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl n,m,now,EdgeSize;</span><br><span class="line">lxl head[big],dep[big],size[big],son[big],fa[big],top[big];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;lxl,lxl&gt; &gt;pachy;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next;</span><br><span class="line">&#125;e[big&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v) EdgeAdd(u,v),EdgeAdd(v,u)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize]=(_Edge)&#123;v,head[u]&#125;;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(lxl u,lxl father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fa[u]=father,dep[u]=dep[father]+<span class="number">1</span>;</span><br><span class="line">size[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==father)<span class="keyword">continue</span>;</span><br><span class="line">dfs1(v,u);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(size[v]&gt;size[son[u]])son[u]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(lxl u,lxl top_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">top[u]=top_;</span><br><span class="line"><span class="keyword">if</span>(son[u])dfs2(son[u],top_);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa[u]||v==son[u])<span class="keyword">continue</span>;</span><br><span class="line">dfs2(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">LCA</span><span class="params">(lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])<span class="built_in">std</span>::swap(x,y);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y])<span class="built_in">std</span>::swap(x,y);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read();</span><br><span class="line">add(u,v);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">0</span>),dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++now,++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl opt=read(),x=read();</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)pachy.push_back(<span class="built_in">std</span>::make_pair(x,now));</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">2</span>)pachy.clear();</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=pachy.begin();it!=pachy.end();++it)</span><br><span class="line">&#123;</span><br><span class="line">lxl y=it-&gt;first,w=it-&gt;second;</span><br><span class="line">lxl lca=LCA(y,x);</span><br><span class="line"><span class="keyword">if</span>(dep[x]+dep[y]-dep[lca]-dep[fa[lca]]&lt;=now-w+<span class="number">1</span>)&#123;<span class="built_in">printf</span>(<span class="string">"wrxcsd\n"</span>);<span class="keyword">goto</span> end;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"orzFsYo\n"</span>);</span><br><span class="line">end:;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h2><p>阶乘做法都不会.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>T1的规律看得有点久,不过因为T2想得快没对后面做题产生什么影响.</p><p>快速幂乘出来之后忘取模了,掉了20pts.</p><p>T2很快就想了出来,用dijkstra来建出一个类似最短路树的结构然后前缀和.和qt一样把最大值开小了只拿了60pts,以后赋INF还是用memset赋个0x3f输出来看看再手动赋好了.</p><p>T3很数据结构,因为带个全局撤销的操作觉得很容易就被卡了所以没想出什么高效维护撤销的方法,看题解用了标记永久化线段树来维护扩散信息.场上写了个每次存下来改变的点,查询的时候查改变点与当前点树上距离的做法,本来直接就有90pts的但是看时间多觉得写几个subtask要稳一点,但是把sub3的判定写错了,sub4也给判成sub3做了,就掉了sub4的15pts.</p><p>T4看了一会不怎么会就没写.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:T1日常挂分&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.lemir3.red/categories/总结/"/>
    
    
    <category term="总结" scheme="https://www.lemir3.red/tags/总结/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu3150_pb的游戏（1）</title>
    <link href="https://www.lemir3.red/2020/10/22/jie-ti-bao-gao-luogu3150-pb-de-you-xi-1/"/>
    <id>https://www.lemir3.red/2020/10/22/jie-ti-bao-gao-luogu3150-pb-de-you-xi-1/</id>
    <published>2020-10-22T09:14:15.000Z</published>
    <updated>2020-10-22T09:25:00.442Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:简单博弈论</p><a id="more"></a><h1 id="luogu3150-pb的游戏（1）"><a href="#luogu3150-pb的游戏（1）" class="headerlink" title="luogu3150_pb的游戏（1）"></a>luogu3150_pb的游戏（1）</h1><p><a href="https://www.luogu.com.cn/problem/P3150" target="_blank" rel="noopener">题面</a></p><p>竟然评入门题,可以说是样例大幅降低难度了…</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>考虑胜利条件,我们发现$2$是一个必胜局面.</p><p>若当前局面为偶数,可以选择让对手拿到一个偶数局面或者一个奇数局面,但当当前局面为奇数时,对手一定可以拿到一个偶数局面,而必胜局面是一个偶数局面,所以如果先手拿到了偶数局面,就可以通过不断地给对方奇数局面的方式必胜,否则先手则必须在第一轮给后手提供偶数局面,先手必败.</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line">lxl T,n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T=read();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">n=read();</span><br><span class="line"><span class="built_in">printf</span>(n&amp;<span class="number">1</span>?<span class="string">"zs wins\n"</span>:<span class="string">"pb wins\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:简单博弈论&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-博弈论" scheme="https://www.lemir3.red/categories/数学/数学-博弈论/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="博弈论" scheme="https://www.lemir3.red/tags/博弈论/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」「SDOI2017」数字表格</title>
    <link href="https://www.lemir3.red/2020/10/22/jie-ti-bao-gao-sdoi2017-shu-zi-biao-ge/"/>
    <id>https://www.lemir3.red/2020/10/22/jie-ti-bao-gao-sdoi2017-shu-zi-biao-ge/</id>
    <published>2020-10-22T08:28:26.000Z</published>
    <updated>2020-10-22T09:09:35.960Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:指数上进行反演变化</p><a id="more"></a><h1 id="「SDOI2017」数字表格"><a href="#「SDOI2017」数字表格" class="headerlink" title="「SDOI2017」数字表格"></a>「SDOI2017」数字表格</h1><p><a href="https://loj.ac/problem/2000" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>求:</p><script type="math/tex; mode=display">\prod_{i = 1}^{n} \prod_{j = 1}^{m} f_{\gcd(i , j)}</script><p>其中$f$为斐波拉契数列.</p><p>枚举约数后进行反演,默认$n&lt;m$:</p><script type="math/tex; mode=display">\begin{aligned}\prod_{i = 1}^{n} \prod_{j = 1}^{m} f_{\gcd(i , j)}\\& = \prod_{d = 1}^{n} \prod_{i = 1}^{\lfloor \frac{n}{d} \rfloor} \prod_{j=1}^{\lfloor \frac{m}{d} \rfloor} f_{d}^{\epsilon(\gcd(i,j))}\\& = \prod_{d = 1}^{n} \prod_{i = 1}^{\lfloor \frac{n}{d} \rfloor} \prod_{j=1}^{\lfloor \frac{m}{d} \rfloor} f_{d}^{\sum_{l | \gcd(i , j)}\mu(l)}\\& = \prod_{d = 1}^{n} \prod_{i = 1}^{\lfloor \frac{n}{d} \rfloor} \prod_{j=1}^{\lfloor \frac{m}{d} \rfloor} f_{d}^{\sum_{l | i , l | j}\mu(l)}\\& = \prod_{d=1}^{n} f_{d}^{\sum_{l = 1}^{\lfloor \frac{n}{d} \rfloor} \mu(l) \sum_{i = 1}^{\lfloor \frac{n}{dl} \rfloor} \sum_{j = 1}^{\lfloor \frac{m}{dl} \rfloor} 1}\\& = \prod_{d = 1}^{n} f_{d}^{\sum_{l=1}^{\lfloor \frac{n}{d} \rfloor} \mu(l) \lfloor \frac{n}{dl} \rfloor \lfloor \frac{m}{dl} \rfloor}\end{aligned}</script><p>$O(n)$枚举$d$,每次$O(\sqrt{n})$数论分块求出$f_d$的指数,再用快速模指数算法$O(logn)$算出结果累乘进结果.</p><p>因为数据组数的规模达到了1e3所以无法通过本题,仅能获得60pts.</p><p>观察数据规模发现单次询问需要做到$O(\sqrt{n})$,于是考虑化简,一个经典方法是式子中出现了$dl$这类两个约数相乘时,改为枚举这两个约数的积,设$T=dl$:</p><script type="math/tex; mode=display">\begin{aligned}\prod_{d = 1}^{n} f_{d}^{\sum_{l=1}^{\lfloor \frac{n}{d} \rfloor} \mu(l) \lfloor \frac{n}{dl} \rfloor \lfloor \frac{m}{dl} \rfloor}\\& = \prod_{T = 1}^{n} \prod_{d | T}f_{d}^{\mu(\frac{T}{d}) \lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor}\\& = \prod_{T = 1}^{n} \big[ \prod_{d | T}f_{d}^{\mu(\frac{T}{d})} \big ] ^{ \lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor}\end{aligned}</script><p>设$\textrm{sum}(T) = \prod_{d | T}f_{d}^{\mu(\frac{T}{d})}$:</p><script type="math/tex; mode=display">\begin{aligned}\prod_{T = 1}^{n} \big[ \prod_{d | T}f_{d}^{\mu(\frac{T}{d})} \big ] ^{ \lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor}\\& = \prod_{T = 1}^{n} \textrm{sum}(T) ^{ \lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor}\end{aligned}</script><p>只要能求出$\textrm{sum}(T)$的前缀积,就能$O(\sqrt{n})$求解了.</p><p>注意到$\text{sum}(T)$由$T$的约数贡献,那么我们枚举约数$d$以及它的倍数$T$,将$f_{d}^{\mu(\frac{T}{d})}$乘进$\textrm{sum}(T)$.</p><p>因为$\mu(\frac{T}{d})$仅存在$1,-1,0$三种取值,$1$和$0$的情况都好算,$-1$的情况是$f_{d}$的逆元,预处理一下即可.</p><p>再算出$\textrm{sum}(T)$的前缀积和关于模数的乘法逆元就好了.</p><p>还有一点优化是通过扩展欧拉定理优化快速模指数算法,因为模数是一个质数,$a$与$m$互质,所以$a^b \equiv a^{b ~ \textrm{mod} ~ \varphi(m)} \quad (\textrm{mod} ~ m)$.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"assert.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">1000010</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">lxl T,n,m;</span><br><span class="line">lxl mu[big],feb[big],prime[big],vis[big],pref[big],invfeb[big],invpref[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPow</span><span class="params">(lxl a,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">b=(b+mod<span class="number">-1</span>)%(mod<span class="number">-1</span>);</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%mod)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a%mod);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">feb[<span class="number">1</span>]=feb[<span class="number">2</span>]=<span class="number">1</span>;<span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">3</span>);i&lt;big;++i)feb[i]=(feb[i<span class="number">-1</span>]+feb[i<span class="number">-2</span>])%mod;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;big;++i)invfeb[i]=FastPow(feb[i],mod<span class="number">-2</span>),pref[i]=<span class="number">1</span>;</span><br><span class="line">pref[<span class="number">0</span>]=mu[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;big;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])prime[++prime[<span class="number">0</span>]]=i,mu[i]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=prime[<span class="number">0</span>];++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(prime[j]*i&gt;big)<span class="keyword">break</span>;</span><br><span class="line">vis[prime[j]*i]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(i%prime[j])mu[i*prime[j]]=-mu[i];</span><br><span class="line"><span class="keyword">else</span> &#123;mu[i*prime[j]]=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;big;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(i);j&lt;big;j+=i)</span><br><span class="line"><span class="keyword">if</span>(mu[j/i]==<span class="number">1</span>)pref[j]=pref[j]*feb[i]%mod;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mu[j/i]==<span class="number">-1</span>)pref[j]=pref[j]*invfeb[i]%mod;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;big;++i)pref[i]=pref[i]*pref[i<span class="number">-1</span>]%mod;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;big;++i)invpref[i]=FastPow(pref[i],mod<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("product7.in","r",stdin);</span></span><br><span class="line"><span class="comment">// double st=clock();</span></span><br><span class="line">prework();</span><br><span class="line"><span class="comment">// double ed=clock();printf("using time:%llfms\n",ed-st);</span></span><br><span class="line">T=read();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="function">lxl <span class="title">ans</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> l(<span class="number">1</span>),r(<span class="number">0</span>);l&lt;=<span class="built_in">std</span>::min(n,m);l=r+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl nl=n/l,ml=m/l;</span><br><span class="line">r=<span class="built_in">std</span>::min(n/nl,m/ml);</span><br><span class="line">ans=ans*FastPow(pref[r]*invpref[l<span class="number">-1</span>]%mod,nl*ml)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*-*-*-*-*-*</span></span><br><span class="line"><span class="comment">in:</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">1000000 1000000</span></span><br><span class="line"><span class="comment">out:</span></span><br><span class="line"><span class="comment">297837367</span></span><br><span class="line"><span class="comment">*-*-*-*-*-*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:指数上进行反演变化&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-数论" scheme="https://www.lemir3.red/categories/数学/数学-数论/"/>
    
    <category term="数学-数论-莫比乌斯反演" scheme="https://www.lemir3.red/categories/数学/数学-数论/数学-数论-莫比乌斯反演/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="数论" scheme="https://www.lemir3.red/tags/数论/"/>
    
    <category term="莫比乌斯反演" scheme="https://www.lemir3.red/tags/莫比乌斯反演/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu1985_[USACO07OPEN]翻转棋</title>
    <link href="https://www.lemir3.red/2020/10/22/jie-ti-bao-gao-luogu1985-usaco07open-fan-zhuan-qi/"/>
    <id>https://www.lemir3.red/2020/10/22/jie-ti-bao-gao-luogu1985-usaco07open-fan-zhuan-qi/</id>
    <published>2020-10-22T01:17:21.000Z</published>
    <updated>2020-10-22T01:23:55.385Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:枚举第一行状态判断合法</p><a id="more"></a><h1 id="luogu1985-USACO07OPEN-翻转棋"><a href="#luogu1985-USACO07OPEN-翻转棋" class="headerlink" title="luogu1985_[USACO07OPEN]翻转棋"></a>luogu1985_[USACO07OPEN]翻转棋</h1><p><a href="https://www.luogu.com.cn/problem/P1985" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>假设现在我们已经做到了一个确定的行,那么可以发现这一行哪些位置要翻转只能和上一行有关.</p><p>因为上一行如果有位置没被翻,那么就只能靠这一行来翻了,如果有位置已经被翻了,那么这一行也一定不能去翻,不然以后就改不了了.</p><p>所以说只要枚举第一行哪些位置需要翻,就可以确定之后每一行的状态了,因为这样做确保了一行上面的所有行都要翻完,所以判断一下最后一行是否被翻完即可.</p><p>一次提交跑出57ms,比次优解快一倍.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">15</span>;</span><br><span class="line">lxl n,m;</span><br><span class="line">lxl a[big],b[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(lxl xs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl last(xs),tmp(a[0]);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">b[i]=xs=last;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;m;++j)</span><br><span class="line"><span class="keyword">if</span>(xs&amp;(<span class="number">1</span>&lt;&lt;j))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j<span class="number">-1</span>&gt;=<span class="number">0</span>)tmp^=(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>));</span><br><span class="line">tmp^=(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line"><span class="keyword">if</span>(j+<span class="number">1</span>&lt;m)tmp^=(<span class="number">1</span>&lt;&lt;(j+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">last=tmp,tmp=a[i+<span class="number">1</span>]^xs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> !last;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;n;<span class="built_in">endl</span>,++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;m;++j)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,(b[i]&gt;&gt;j)&amp;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl tmp[big];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;m;++j)</span><br><span class="line">tmp[m-j<span class="number">-1</span>]=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;m;++j)a[i]=(a[i]&lt;&lt;<span class="number">1</span>)|tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;(<span class="number">1</span>&lt;&lt;m);++i)</span><br><span class="line"><span class="keyword">if</span>(check(i))&#123;print();<span class="keyword">goto</span> end;&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"IMPOSSIBLE\n"</span>);</span><br><span class="line">end:;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*-*-*-*-*-*</span></span><br><span class="line"><span class="comment">in:</span></span><br><span class="line"><span class="comment">4 4</span></span><br><span class="line"><span class="comment">0 0 0 0</span></span><br><span class="line"><span class="comment">0 0 1 0</span></span><br><span class="line"><span class="comment">0 1 1 1</span></span><br><span class="line"><span class="comment">0 0 1 0</span></span><br><span class="line"><span class="comment">out:</span></span><br><span class="line"><span class="comment">0 0 0 0</span></span><br><span class="line"><span class="comment">0 0 0 0</span></span><br><span class="line"><span class="comment">0 0 1 0</span></span><br><span class="line"><span class="comment">0 0 0 0</span></span><br><span class="line"><span class="comment">*-*-*-*-*-*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*-*-*-*-*-*</span></span><br><span class="line"><span class="comment">in:</span></span><br><span class="line"><span class="comment">3 3</span></span><br><span class="line"><span class="comment">0 1 0</span></span><br><span class="line"><span class="comment">1 1 1</span></span><br><span class="line"><span class="comment">0 1 0</span></span><br><span class="line"><span class="comment">out:</span></span><br><span class="line"><span class="comment">0 0 0</span></span><br><span class="line"><span class="comment">0 1 0</span></span><br><span class="line"><span class="comment">0 0 0</span></span><br><span class="line"><span class="comment">*-*-*-*-*-*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*-*-*-*-*-*</span></span><br><span class="line"><span class="comment">in:</span></span><br><span class="line"><span class="comment">3 3</span></span><br><span class="line"><span class="comment">1 1 0</span></span><br><span class="line"><span class="comment">1 0 1</span></span><br><span class="line"><span class="comment">0 1 1</span></span><br><span class="line"><span class="comment">out:</span></span><br><span class="line"><span class="comment">1 0 0</span></span><br><span class="line"><span class="comment">0 0 0</span></span><br><span class="line"><span class="comment">0 0 1</span></span><br><span class="line"><span class="comment">*-*-*-*-*-*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:枚举第一行状态判断合法&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://www.lemir3.red/categories/其他/"/>
    
    
    <category term="其他" scheme="https://www.lemir3.red/tags/其他/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu1282_多米诺骨牌</title>
    <link href="https://www.lemir3.red/2020/10/21/jie-ti-bao-gao-luogu1282-duo-mi-nuo-gu-pai/"/>
    <id>https://www.lemir3.red/2020/10/21/jie-ti-bao-gao-luogu1282-duo-mi-nuo-gu-pai/</id>
    <published>2020-10-21T12:46:43.000Z</published>
    <updated>2020-10-21T12:57:23.655Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:模型转化后dp</p><a id="more"></a><h1 id="luogu1282-多米诺骨牌"><a href="#luogu1282-多米诺骨牌" class="headerlink" title="luogu1282_多米诺骨牌"></a>luogu1282_多米诺骨牌</h1><p><a href="https://www.luogu.com.cn/problem/P1282" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先把这个翻转的模型转化一下,先把所有位置都转化到上面大于下面,然后算出两边的差值,记录有多少位置是需要翻转的.</p><p>现在翻转一个位置,设上面的数字为$a$,下面的为$b$,这样就可以让差值减少$2 \times ( a - b )$,如果原先就是上面的数大于下面的数的话,这样做的代价为$1$,否则为$-1$,最后加上之前算出的翻转的值即可.</p><p>现在需要解决的问题是在让差值减少得最小的情况下让代价尽量小,设$fill_{i , j}$表示考虑前面的$i$个位置,当前的差值能否被刚好减少$j$,$f_{i , j}$表示考虑前面的$i$个位置,当前的差值被刚好减少了$j$时的最小代价,每次继承状态然后简单转移一下.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 4557430888798830399</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl small=<span class="number">1010</span>,big=<span class="number">10010</span>;</span><br><span class="line">lxl n,sum,all;</span><br><span class="line">lxl v[big],w[big],f[small][big],fill[small][big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("P1282_2.in","r",stdin);</span></span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl a=read(),b=read();</span><br><span class="line"><span class="keyword">if</span>(a&gt;b)v[i]=<span class="number">2</span>*(a-b),sum+=a-b,w[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> v[i]=<span class="number">2</span>*(b-a),sum+=b-a,w[i]=<span class="number">-1</span>,++all;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=sum;++j)</span><br><span class="line">&#123;</span><br><span class="line">f[i][j]=f[i<span class="number">-1</span>][j],fill[i][j]=fill[i<span class="number">-1</span>][j];</span><br><span class="line"><span class="keyword">if</span>(fill[i<span class="number">-1</span>][j-v[i]]||!(j-v[i]))</span><br><span class="line">!fill[i][j]?fill[i][j]=<span class="literal">true</span>,f[i][j]=f[i<span class="number">-1</span>][j-v[i]]+w[i]:f[i][j]=<span class="built_in">std</span>::min(f[i][j],f[i<span class="number">-1</span>][j-v[i]]+w[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(sum);~(i<span class="number">-1</span>);--i)<span class="keyword">if</span>(fill[n][i])&#123;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,all+f[n][i]);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">6 1</span></span><br><span class="line"><span class="comment">1 5</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">3 1</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:模型转化后dp&lt;/p&gt;</summary>
    
    
    
    <category term="动态规划" scheme="https://www.lemir3.red/categories/动态规划/"/>
    
    
    <category term="动态规划" scheme="https://www.lemir3.red/tags/动态规划/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu1072_Hankson_的趣味题</title>
    <link href="https://www.lemir3.red/2020/10/21/jie-ti-bao-gao-luogu1072-hankson-de-qu-wei-ti/"/>
    <id>https://www.lemir3.red/2020/10/21/jie-ti-bao-gao-luogu1072-hankson-de-qu-wei-ti/</id>
    <published>2020-10-21T08:41:37.000Z</published>
    <updated>2020-10-22T08:52:50.606Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:推性质后枚举</p><a id="more"></a><h1 id="luogu1072-Hankson-的趣味题"><a href="#luogu1072-Hankson-的趣味题" class="headerlink" title="luogu1072_Hankson_的趣味题"></a>luogu1072_Hankson_的趣味题</h1><p><a href="https://www.luogu.com.cn/problem/P1072" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>意思是要求:</p><script type="math/tex; mode=display">\begin{cases}\gcd(x , a_0) = a_1\\\textrm{lcm} ( x ,b_0 )  = b_1 \end{cases}</script><p>那么转化一下就是:</p><script type="math/tex; mode=display">\begin{cases}\gcd(x , a_0) = a_1\\\frac {x \cdot b_0}{\gcd(x ,b_0)}  = b_1 \end{cases}\\\rightarrow\\\begin{cases}\gcd(\frac{x}{a1} , \frac{a_0}{a_1}) = 1\\\gcd(\frac{b1}{x} , \frac{b_1}{b_0}) = 1\end{cases}</script><p>然后枚举$b_1$的约数作为$x$,判断一下是否满足是$a_1$的倍数和两个等式即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line">lxl T,a0,a1,b0,b1;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">gcd</span><span class="params">(lxl a,lxl b)</span></span>&#123;<span class="keyword">return</span> !b?a:gcd(b,a%b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T=read();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">lxl <span class="title">ans</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">a0=read(),a1=read(),b0=read(),b1=read();</span><br><span class="line">b0=b1/b0,a0=a0/a1;</span><br><span class="line">lxl len=<span class="built_in">sqrt</span>(b1);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> x(<span class="number">1</span>);x&lt;=len;++x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b1%x)<span class="keyword">continue</span>;</span><br><span class="line">lxl x1=x,x2=b1/x;</span><br><span class="line"><span class="keyword">if</span>(!(b1%x1))</span><br><span class="line"><span class="keyword">if</span>(!(x1%a1))</span><br><span class="line"><span class="keyword">if</span>(gcd(b1/x1,b0)==<span class="number">1</span>&amp;&amp;gcd(x1/a1,a0)==<span class="number">1</span>)</span><br><span class="line">++ans;</span><br><span class="line"><span class="keyword">if</span>(x1==x2)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(!(b1%x2))</span><br><span class="line"><span class="keyword">if</span>(!(x2%a1))</span><br><span class="line"><span class="keyword">if</span>(gcd(b1/x2,b0)==<span class="number">1</span>&amp;&amp;gcd(x2/a1,a0)==<span class="number">1</span>)</span><br><span class="line">++ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:推性质后枚举&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-数论" scheme="https://www.lemir3.red/categories/数学/数学-数论/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="数论" scheme="https://www.lemir3.red/tags/数论/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」UVA12983_The_Battle_of_Chibi</title>
    <link href="https://www.lemir3.red/2020/10/21/jie-ti-bao-gao-uva12983-the-battle-of-chibi/"/>
    <id>https://www.lemir3.red/2020/10/21/jie-ti-bao-gao-uva12983-the-battle-of-chibi/</id>
    <published>2020-10-21T08:11:01.000Z</published>
    <updated>2020-10-21T08:28:58.227Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:树状数组优化转移</p><a id="more"></a><h1 id="UVA12983-The-Battle-of-Chibi"><a href="#UVA12983-The-Battle-of-Chibi" class="headerlink" title="UVA12983_The_Battle_of_Chibi"></a>UVA12983_The_Battle_of_Chibi</h1><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=4866" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>设$f_{i , j}$表示在以第$i$位作为序列的结尾时出现长度为$j$的上升子序列的个数,那么显然有转移:</p><script type="math/tex; mode=display">f_{i , j} = f_{k , j - 1} + 1 ~ ( ~ a_k < a_i ~ , ~ k < i ~ )</script><p>这样转移是$O( n^2 m )$的,时间上无法接受,但是我们发现,既然是由$i$之前小于$a_i$的位置来转移,那么我们可以在之前的转移中就把这样的转移位置存进树状数组中,具体来说,对于每一个$j$,我们开一颗树状数组,如果$f_{k , j}$有值,那么在$j$这一颗树状数组的$a_k$位置上插入$f_{k , j}$,之后的转移就可以直接在需要的$j$对应的树状数组上查询了,时间复杂度为$O(nmlogn)$.</p><p>注意对$a$离散化.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">1010</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">lxl T,n,m,case_;</span><br><span class="line">lxl f[big][big],a[big],b[big],t[big][big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl *T,lxl x,lxl k)</span></span>&#123;<span class="keyword">for</span>(;x&lt;big;x+=lowbit(x))T[x]=(T[x]+k)%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">query</span><span class="params">(lxl *T,lxl x)</span></span>&#123;<span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;<span class="keyword">for</span>(;x;x-=lowbit(x))sum=(sum+T[x])%mod;<span class="keyword">return</span> sum;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("data.txt","r",stdin);</span></span><br><span class="line"><span class="comment">// freopen("data.out","w",stdout);</span></span><br><span class="line">T=read();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(t,<span class="number">0</span>,<span class="keyword">sizeof</span> t),<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=b[i]=read();</span><br><span class="line"><span class="built_in">std</span>::sort(b+<span class="number">1</span>,b+<span class="number">1</span>+n);lxl len=<span class="built_in">std</span>::unique(b+<span class="number">1</span>,b+<span class="number">1</span>+n)-b<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=<span class="built_in">std</span>::lower_bound(b+<span class="number">1</span>,b+<span class="number">1</span>+len,a[i])-b;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="built_in">std</span>::min((lxl)i,m));j&gt;=<span class="number">2</span>;--j)</span><br><span class="line">&#123;</span><br><span class="line">lxl add=query(t[j<span class="number">-1</span>],a[i]<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(add)f[i][j]=add,modify(t[j],a[i],add);</span><br><span class="line">&#125;</span><br><span class="line">f[i][<span class="number">1</span>]=<span class="number">1</span>,modify(t[<span class="number">1</span>],a[i],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">lxl ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)ans=(ans+f[i][m])%mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%lld: %lld\n"</span>,++case_,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 5 3</span></span><br><span class="line"><span class="comment">1 3 4 2 5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">3 2</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">7 4</span></span><br><span class="line"><span class="comment">1 7 7 8 6 4 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:树状数组优化转移&lt;/p&gt;</summary>
    
    
    
    <category term="动态规划" scheme="https://www.lemir3.red/categories/动态规划/"/>
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/动态规划/数据结构/"/>
    
    <category term="数据结构-树状数组" scheme="https://www.lemir3.red/categories/动态规划/数据结构/数据结构-树状数组/"/>
    
    
    <category term="动态规划" scheme="https://www.lemir3.red/tags/动态规划/"/>
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="树状数组" scheme="https://www.lemir3.red/tags/树状数组/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」CF1288D_Minimax_Problem</title>
    <link href="https://www.lemir3.red/2020/10/20/jie-ti-bao-gao-cf1288d-minimax-problem/"/>
    <id>https://www.lemir3.red/2020/10/20/jie-ti-bao-gao-cf1288d-minimax-problem/</id>
    <published>2020-10-20T13:30:39.000Z</published>
    <updated>2020-10-20T13:43:47.531Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:二分答案后将序列按大小逻辑关系转化成二进制串求解</p><a id="more"></a><h1 id="CF1288D-Minimax-Problem"><a href="#CF1288D-Minimax-Problem" class="headerlink" title="CF1288D_Minimax_Problem"></a>CF1288D_Minimax_Problem</h1><p><a href="https://codeforces.com/contest/1288/problem/D" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题意是找$n$个长度为$m$的序列中的两个序列,其中对位取最大值形成的新序列中的最小值要尽量大.</p><p>这种限制套路性地想到用二分答案,二分一个新序列中的最小值,然后发现要找的两个序列中必须满足在某一位上至少有其中一个大于二分的这个值.</p><p>这里有一个逻辑关系,考虑$m$的最值为$8$,把每个序列按照这个逻辑关系压成二进制串,然后相当于是在$n$个数中找2个数or等于$2^m - 1$.</p><p>可以开一个桶,记录下当前有的二进制串,然后枚举每一个数,取它的补集,判断桶中是否有这个数.</p><p>有点不对劲,因为是or,所以可能两个数的某一位上都是$1$,这样做是没法求出的,所以说得取补集的超集来判断.</p><p>求一个集的超集就取它的补集,然后枚举补集的子集,将枚举到的子集和原集并起来.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl small=<span class="number">10</span>,midd=<span class="number">300</span>,big=<span class="number">300010</span>;</span><br><span class="line">lxl n,m,choa,chob;</span><br><span class="line">lxl a[big][small],bit[big],<span class="built_in">map</span>[midd];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(lxl lim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(<span class="built_in">map</span>,<span class="number">0</span>,<span class="keyword">sizeof</span> <span class="built_in">map</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">bit[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;m;++j)</span><br><span class="line">bit[i]=(bit[i]&lt;&lt;<span class="number">1</span>)|(a[i][j]&gt;=lim);</span><br><span class="line"><span class="keyword">if</span>(bit[i]==(<span class="number">1</span>&lt;&lt;m)<span class="number">-1</span>)&#123;choa=chob=i;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line"><span class="built_in">map</span>[bit[i]]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl all=(<span class="number">1</span>&lt;&lt;m)<span class="number">-1</span>;</span><br><span class="line">lxl want=all^bit[i];</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[want])&#123;choa=i,chob=<span class="built_in">map</span>[want];<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(bit[i]);j;j=bit[i]&amp;(j<span class="number">-1</span>))</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[want|j])&#123;choa=i,chob=<span class="built_in">map</span>[want|j];<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;m;++j)</span><br><span class="line">a[i][j]=read();</span><br><span class="line">lxl l(0),r(1e9),mid,ansa,ansb;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid))ansa=choa,ansb=chob,l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,ansa,ansb);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:二分答案后将序列按大小逻辑关系转化成二进制串求解&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://www.lemir3.red/categories/其他/"/>
    
    <category term="其他-二分" scheme="https://www.lemir3.red/categories/其他/其他-二分/"/>
    
    
    <category term="其他" scheme="https://www.lemir3.red/tags/其他/"/>
    
    <category term="二分" scheme="https://www.lemir3.red/tags/二分/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」UVA515_King</title>
    <link href="https://www.lemir3.red/2020/10/20/jie-ti-bao-gao-uva515-king/"/>
    <id>https://www.lemir3.red/2020/10/20/jie-ti-bao-gao-uva515-king/</id>
    <published>2020-10-20T12:37:22.000Z</published>
    <updated>2020-10-20T12:44:11.943Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:转化成前缀和后差分约束</p><a id="more"></a><h1 id="UVA515-King"><a href="#UVA515-King" class="headerlink" title="UVA515_King"></a>UVA515_King</h1><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=456" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>想完后都开始写代码了才发现这题写过了…</p><p>发现给出的信息是变量的区间和,那么我们转化成前缀和.</p><p>也就是:</p><script type="math/tex; mode=display">a_x + a_{x+1} + a_{x+2} + \cdots + a_{y} < k\\\rightarrow pre_{y} -pre_{x-1} \leq k + 1\\a_{x} + a_{x+1} + a_{x+2} + \cdots + a_{y} > k\\\rightarrow pre_{x-1} - pre_{y} \leq 1-k</script><p>然后建一个源点连向所有点方便遍历,判负环即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">110</span>;</span><br><span class="line">lxl n,m,EdgeSize;</span><br><span class="line">lxl head[big],dis[big],in[big],vis[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next,w;</span><br><span class="line">&#125;e[big*big];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;lxl&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v,lxl w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize]=(_Edge)&#123;v,head[u],w&#125;;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0xcc</span>,<span class="keyword">sizeof</span> dis),<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis),dis[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line">q.push(n+<span class="number">1</span>),vis[n+<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">lxl u=q.front();q.pop(),vis[u]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v,w=e[i].w;</span><br><span class="line"><span class="keyword">if</span>(dis[v]&lt;dis[u]+w)</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]+w;</span><br><span class="line"><span class="keyword">if</span>(++in[v]&gt;n+<span class="number">2</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])q.push(v),vis[v]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">114514</span>)</span><br><span class="line">&#123;</span><br><span class="line">n=read();<span class="keyword">if</span>(!n)<span class="keyword">break</span>;</span><br><span class="line">m=read();</span><br><span class="line">EdgeSize=<span class="number">0</span>,<span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head),<span class="built_in">memset</span>(in,<span class="number">0</span>,<span class="keyword">sizeof</span> in);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl a=read(),b=read(),k;</span><br><span class="line"><span class="keyword">char</span> opt[<span class="number">10</span>];<span class="built_in">scanf</span>(<span class="string">"%s"</span>,opt+<span class="number">1</span>);</span><br><span class="line">k=read();</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">1</span>]==<span class="string">'g'</span>)EdgeAdd(a<span class="number">-1</span>,a+b,k+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> EdgeAdd(a+b,a<span class="number">-1</span>,<span class="number">1</span>-k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;=n;++i)EdgeAdd(n+<span class="number">1</span>,i,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(SPFA()?<span class="string">"lamentable kingdom\n"</span>:<span class="string">"successful conspiracy\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:转化成前缀和后差分约束&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="图论-差分约束" scheme="https://www.lemir3.red/categories/图论/图论-差分约束/"/>
    
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="差分约束" scheme="https://www.lemir3.red/tags/差分约束/"/>
    
  </entry>
  
  <entry>
    <title>「总结」CF1366D_Two_Divisors</title>
    <link href="https://www.lemir3.red/2020/10/20/zong-jie-cf1366d-two-divisors/"/>
    <id>https://www.lemir3.red/2020/10/20/zong-jie-cf1366d-two-divisors/</id>
    <published>2020-10-20T09:49:30.000Z</published>
    <updated>2020-10-20T10:32:10.398Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:考虑线性筛性质和算术基本定理</p><a id="more"></a><h1 id="CF1366D-Two-Divisors"><a href="#CF1366D-Two-Divisors" class="headerlink" title="CF1366D_Two_Divisors"></a>CF1366D_Two_Divisors</h1><p><a href="https://codeforces.com/problemset/problem/1366/D" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先如果$a$是质数的话肯定是无解的,因为大于一的约数都凑不够.</p><p>然后考虑算术基本定理下$a$的分解:</p><script type="math/tex; mode=display">a = p_1^{k_1} p_2^{k_2} p_3^{k_3} \cdots p_n^{k_n}</script><p>取$\{ p_1 , p_2 , p_3 , \cdots p_k \}$作为一组,$\{ p_{k + 1} , p_{k + 2} , p_{k + 3} \cdots p_{n}  \}$作为一组,可以发现,因为两边的质数互不相交,所以加起来之后一定与$p_1^{k_1} p_2^{k_2} p_3^{k_3} \cdots p_n^{k_n}$互质.</p><p>其实就是把质数当成空间的基,做一个由全体质数构成的空间的由$a$分解出的质数构成的子空间,取两组交为空并为原子空间的基底的基底就是解了.</p><p>然后可以直接埃筛做,第一次的因子存下来作为一组,后面的因子乘起来作为一组.</p><p>然后我考虑了线筛求出一个数的最小质因子求解,具体看代码吧.</p><p>注意如果$a$分解后只有一个质数,那么也是无解的.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">500010</span>,large=<span class="number">1e7</span>+<span class="number">10</span>;</span><br><span class="line">lxl n;</span><br><span class="line">lxl a[big],prime[big],ans[<span class="number">2</span>][big],mdiv[large];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;large;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!mdiv[i])prime[++prime[<span class="number">0</span>]]=i,mdiv[i]=i;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=prime[<span class="number">0</span>];++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(prime[j]*i&gt;large)<span class="keyword">break</span>;</span><br><span class="line">mdiv[prime[j]*i]=prime[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">prework();</span><br><span class="line">n=read();<span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line"><span class="keyword">if</span>(mdiv[a[i]]==a[i])ans[<span class="number">0</span>][i]=ans[<span class="number">1</span>][i]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">lxl ans1(mdiv[a[i]]),ans2(<span class="number">1</span>),tmp(a[i]);</span><br><span class="line">lxl p=mdiv[tmp];<span class="keyword">while</span>(!(tmp%p))tmp/=p;</span><br><span class="line"><span class="keyword">while</span>(tmp&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans2*=mdiv[tmp],p=mdiv[tmp];</span><br><span class="line"><span class="keyword">while</span>(!(tmp%p))tmp/=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans2==<span class="number">1</span>)ans[<span class="number">0</span>][i]=ans[<span class="number">1</span>][i]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> ans[<span class="number">0</span>][i]=ans1,ans[<span class="number">1</span>][i]=ans2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="built_in">printf</span>(<span class="string">"%lld "</span>,ans[<span class="number">0</span>][i]);<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="built_in">printf</span>(<span class="string">"%lld "</span>,ans[<span class="number">1</span>][i]);<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:考虑线性筛性质和算术基本定理&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-数论" scheme="https://www.lemir3.red/categories/数学/数学-数论/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="数论" scheme="https://www.lemir3.red/tags/数论/"/>
    
  </entry>
  
</feed>
