<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lemir3&#39;s blog</title>
  
  
  <link href="https://www.lemir3.red/atom.xml" rel="self"/>
  
  <link href="https://www.lemir3.red/"/>
  <updated>2020-10-19T09:45:29.648Z</updated>
  <id>https://www.lemir3.red/</id>
  
  <author>
    <name>lemir3</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「解题报告」CF1425E_Excitation_of_Atoms</title>
    <link href="https://www.lemir3.red/2020/10/19/jie-ti-bao-gao-cf1425e-excitation-of-atoms/"/>
    <id>https://www.lemir3.red/2020/10/19/jie-ti-bao-gao-cf1425e-excitation-of-atoms/</id>
    <published>2020-10-19T09:36:21.000Z</published>
    <updated>2020-10-19T09:45:29.648Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:分类讨论贪心</p><a id="more"></a><h1 id="CF1425E-Excitation-of-Atoms"><a href="#CF1425E-Excitation-of-Atoms" class="headerlink" title="CF1425E_Excitation_of_Atoms"></a>CF1425E_Excitation_of_Atoms</h1><p><a href="https://codeforces.com/contest/1425/problem/E" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>分类讨论5种情况进行贪心,粘份官方题解吧.</p><blockquote><p>Notice that for $K=2$, we can always make an excitation route starting from any atom in $i$ in $1 \leq i &lt; N$ that excites all atoms. So, for $K&gt;2$, we can always make the routes by toggling bonds. So, there are three cases:</p><p>If $K=0$, it is optimal to excite only one atom. We try to excite atom $i$ for every $i$ and calculate the gained energy using prefix sum.</p><p>If $K \geq 2$, we can either excite one atom $i$ in $1 \leq i &lt; N$, which will excite all atoms or excite only the last atom (which can be optimal if it has the lowest $D$).</p><p>$K=1$ is a tricky one. there are 5 cases to consider:</p><ol><li>change $E_{N−1}$ to $1$. Then excite the atom with the $D_i$ in $1 \leq i &lt; N$. Also, excite atom $N$ if the energy gained is positive.</li><li>change $Ei$ to $1$ and then excite atom $i$ and $i+1$ for $(1 &lt; i &lt; N)$. It is optimal to excite $i+1$ because if not, it will be worse than case 1.</li><li>Change $E_1$ to $3$ and then excite $1$ and $2$.</li><li>Change $E_1$ to $N$ and then excite atom $i$, for $(1 &lt; i \leq N)$</li><li>Change $E_i$ to $i+2$ and then excite atom $1$, for $(1 &lt; i &lt; N)$. Note that this is only optimal if we excite atom $1$, else it is worse than case $4$.</li></ol><p>Handling all these cases will get you <strong>accepted</strong></p><p><strong>Time complexity: O(N)</strong></p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl n,k,ans;</span><br><span class="line">lxl a[big],b[big],suf[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">check0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl max=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n);i;--i)max=<span class="built_in">std</span>::max(max,suf[i]-b[i]);</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">check2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl min=INF;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;n;++i)min=<span class="built_in">std</span>::min(min,b[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">std</span>::max(a[n]-b[n],suf[<span class="number">1</span>]-min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">check1a</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl min=INF;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;n;++i)min=<span class="built_in">std</span>::min(min,b[i]);</span><br><span class="line">lxl ans=(suf[<span class="number">1</span>]-a[n])-min;</span><br><span class="line">lxl add=<span class="built_in">std</span>::max(<span class="number">0l</span>l,a[n]-b[n]);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">std</span>::max(add,ans+add);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">check1b</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl min=INF,min2=INF;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;n;++i)</span><br><span class="line"><span class="keyword">if</span>(b[i]&lt;=min)min2=min,min=b[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b[i]&lt;=min2)min2=b[i];</span><br><span class="line"><span class="keyword">return</span> suf[<span class="number">1</span>]-min-min2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">check1c</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl max=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n);i&gt;=<span class="number">2</span>;--i)max=<span class="built_in">std</span>::max(max,suf[i]-b[i]);</span><br><span class="line">lxl min=INF;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;n;++i)min=<span class="built_in">std</span>::min(min,a[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">std</span>::max(max,suf[<span class="number">1</span>]-min-b[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),k=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=read(),suf[i]=a[i];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)b[i]=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n);i;--i)suf[i]+=suf[i+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>)ans=check0();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k&gt;=<span class="number">2</span>)ans=check2();</span><br><span class="line"><span class="keyword">else</span> ans=<span class="built_in">std</span>::max(<span class="built_in">std</span>::max(check1a(),check1b()),check1c());</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,<span class="built_in">std</span>::max(ans,<span class="number">0l</span>l));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 2</span></span><br><span class="line"><span class="comment">1 2 4 8</span></span><br><span class="line"><span class="comment">1 5 3 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:分类讨论贪心&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://www.lemir3.red/categories/其他/"/>
    
    <category term="其他-贪心" scheme="https://www.lemir3.red/categories/其他/其他-贪心/"/>
    
    
    <category term="贪心" scheme="https://www.lemir3.red/tags/贪心/"/>
    
    <category term="其他" scheme="https://www.lemir3.red/tags/其他/"/>
    
  </entry>
  
  <entry>
    <title>「总结」10192020机房赛</title>
    <link href="https://www.lemir3.red/2020/10/19/zong-jie-10192020-ji-fang-sai/"/>
    <id>https://www.lemir3.red/2020/10/19/zong-jie-10192020-ji-fang-sai/</id>
    <published>2020-10-19T07:13:05.000Z</published>
    <updated>2020-10-19T08:08:21.169Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:《旧试题》</p><a id="more"></a><h1 id="10192020机房赛"><a href="#10192020机房赛" class="headerlink" title="10192020机房赛"></a>10192020机房赛</h1><p>这套题是18年我校和中山的联考题,而且我是去年和高二一起考过的,当时做了100+0+75…</p><p>然后今天又搬出来考T1漏情况T3写太久没时间想T2,70+40+100打铁了…</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>设数位的和为$x$,数字长为$n$,那么操作后的数可以表示为:</p><script type="math/tex; mode=display">x \times 10^0 + x \times 10^1 + x \times 10^2 + \cdots + x \times 10^{n-1}\\= ( 10^0 + 10^1 + 10^2 + \cdots + 10^{n-1} ) \times x</script><p>那么就很显然的是最小质因子是在$x$中或者$\frac{10^n - 1}{9}$中.</p><p>线性筛筛一下质数即可.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%lf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugc(x) printf(<span class="meta-string">"debug:%c\n"</span>,x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">500010</span>;</span><br><span class="line"><span class="keyword">char</span> c[big];</span><br><span class="line">lxl n,sum,ans=INF;</span><br><span class="line">lxl prime[big],vis[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c=getchar();</span><br><span class="line">lxl f=<span class="number">1</span>,x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x*<span class="number">10</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPow</span><span class="params">(lxl a,lxl b,lxl mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%mod)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a%mod);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;big;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])prime[++prime[<span class="number">0</span>]]=i;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=prime[<span class="number">0</span>];++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(prime[j]*i&gt;big)<span class="keyword">break</span>;</span><br><span class="line">vis[prime[j]*i]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">prework();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,c+<span class="number">1</span>),n=<span class="built_in">strlen</span>(c+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)sum+=c[i]-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=sum;++i)<span class="keyword">if</span>(!(sum%i))&#123;ans=i;<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=prime[<span class="number">0</span>];++i)</span><br><span class="line"><span class="keyword">if</span>(FastPow(<span class="number">10</span>,n,<span class="number">9</span>*prime[i])==<span class="number">1</span>)&#123;ans=<span class="built_in">std</span>::min(ans,prime[i]);<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>因为是和中序遍历有关,所以序列中的一段可以作为树的一部分,这样就可以设出区间dp的状态.</p><p>设$L_{l,r}$表示由$r$作为根,区间$[l,r-1]$作为$r$的左子树是否合法,$R_{l,r}$表示$l$作为根,区间$[l+1,r]$作为$l$的右子树是否合法,那么就得到转移:</p><script type="math/tex; mode=display">L_{l , r} = L_{l , k} ~ \& ~ R_{k , r - 1} ~ ( ~ \gcd(a_k , a_r) = 1 , l \leq k \leq r ~ )\\R_{l , r} = L_{l +  1 , k} ~ \& ~ R_{k , r} ~ ( ~ \gcd(a_k , a_r) = 1 , l \leq k \leq r ~ )</script><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">510</span>;</span><br><span class="line">lxl T,n;</span><br><span class="line">lxl l[big][big],r[big][big],a[big],can[big][big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">gcd</span><span class="params">(lxl a,lxl b)</span></span>&#123;<span class="keyword">return</span> !b?a:gcd(b,a%b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T=read();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(l,<span class="number">0</span>,<span class="keyword">sizeof</span> l),<span class="built_in">memset</span>(r,<span class="number">0</span>,<span class="keyword">sizeof</span> r);</span><br><span class="line"><span class="built_in">memset</span>(can,<span class="number">0</span>,<span class="keyword">sizeof</span> can);</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(i+<span class="number">1</span>);j&lt;=n;++j)</span><br><span class="line">can[i][j]=can[j][i]=(gcd(a[i],a[j])!=<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)l[i][i]=r[i][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> len(<span class="number">2</span>);len&lt;=n;++len)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> _l(<span class="number">1</span>);_l+len<span class="number">-1</span>&lt;=n;++_l)</span><br><span class="line">&#123;</span><br><span class="line">lxl _r=_l+len<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(_l);k&lt;=_r;++k)</span><br><span class="line">l[_l][_r]|=l[_l][k]&amp;r[k][_r<span class="number">-1</span>]&amp;can[_r][k],</span><br><span class="line">r[_l][_r]|=l[_l+<span class="number">1</span>][k]&amp;r[k][_r]&amp;can[_l][k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">ans</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="keyword">if</span>(l[<span class="number">1</span>][i]&amp;r[i][n])&#123;ans=<span class="literal">true</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="built_in">printf</span>(ans?<span class="string">"Yes\n"</span>:<span class="string">"No\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>点与一个区间中的各点求lca,很显然是要差分一下.</p><p>把询问$(l,r)$拆成$(1,l-1)$和$(1,r)$,vector存下每个点要处理的询问点.</p><p>顺序枚举加入一个点,将它到根的路径上权值+1,询问一个点就询问这个点到根节点路径的权值和,因为一个点到根的路径权值+1后,到根的路径上的一个点到根的权值和就为这个点的深度,查询点到根的路径上与原来加入的点的路径重合的这些点,它们到根的权值加起来就是lca的深度贡献了.</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>,mod=<span class="number">201314</span>;</span><br><span class="line">lxl n,m,EdgeSize,IdCnt,root,NodeCnt;</span><br><span class="line">lxl head[big],dep[big],size[big],top[big],son[big],fa[big],ans[big],id[big],t[big];</span><br><span class="line">lxl sum[big&lt;&lt;<span class="number">2</span>],c[<span class="number">2</span>][big&lt;&lt;<span class="number">2</span>],tag[big&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl id,x,opt;</span><br><span class="line">&#125;q[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next;</span><br><span class="line">&#125;e[big];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;_Query&gt;pachy[big];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar() (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> x=<span class="number">0</span>;T f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"> <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"> <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) &#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"> x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize]=(_Edge)&#123;v,head[u]&#125;;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(lxl u,lxl fat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fa[u]=fat,dep[u]=dep[fat]+<span class="number">1</span>,size[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line">dfs1(v,u);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(size[v]&gt;size[son[u]])son[u]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(lxl u,lxl top_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">top[u]=top_,id[u]=++IdCnt;</span><br><span class="line"><span class="keyword">if</span>(son[u])dfs2(son[u],top_);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==son[u])<span class="keyword">continue</span>;</span><br><span class="line">dfs2(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(lxl &amp;t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t=++NodeCnt;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">build(c[<span class="number">0</span>][t],l,mid),build(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(lxl t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!tag[t])<span class="keyword">return</span>;</span><br><span class="line">lxl mid((l+r)&gt;&gt;1),lson=c[0][t],rson=c[1][t];</span><br><span class="line">sum[lson]=(sum[lson]+tag[t]*(mid-l+<span class="number">1</span>)%mod)%mod,sum[rson]=(sum[rson]+tag[t]*(r-mid)%mod)%mod;</span><br><span class="line">tag[lson]=(tag[lson]+tag[t])%mod,tag[rson]=(tag[rson]+tag[t])%mod;</span><br><span class="line">tag[t]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl y,lxl k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)</span><br><span class="line">&#123;</span><br><span class="line">tag[t]=(tag[t]+k)%mod;</span><br><span class="line">sum[t]=(sum[t]+(r-l+<span class="number">1</span>)*k%mod)%mod;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">PushDown(t,l,r);</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)modify(c[<span class="number">0</span>][t],l,mid,x,y,k);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid)modify(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y,k);</span><br><span class="line">sum[t]=sum[c[<span class="number">0</span>][t]]+sum[c[<span class="number">1</span>][t]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">query</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)<span class="keyword">return</span> sum[t];</span><br><span class="line">PushDown(t,l,r);</span><br><span class="line">lxl mid((l+r)&gt;&gt;1),all(0);</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)all=(all+query(c[<span class="number">0</span>][t],l,mid,x,y))%mod;</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid)all=(all+query(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y))%mod;</span><br><span class="line"><span class="keyword">return</span> all;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddToRoot</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">while</span>(x)modify(root,<span class="number">1</span>,n,id[top[x]],id[x],<span class="number">1</span>),x=fa[top[x]];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">QueryToRoot</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(x)sum=(sum+query(root,<span class="number">1</span>,n,id[top[x]],id[x]))%mod,x=fa[top[x]];</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">read(n),read(m);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl x;read(x);</span><br><span class="line">EdgeAdd(x,i);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">0</span>),dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">build(root,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl l,r,z;read(l),read(r),read(z);</span><br><span class="line">pachy[l<span class="number">-1</span>].push_back((_Query)&#123;i,z,<span class="number">-1</span>&#125;);</span><br><span class="line">pachy[r].push_back((_Query)&#123;i,z,<span class="number">1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">AddToRoot(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=pachy[i].begin();it!=pachy[i].end();++it)</span><br><span class="line">&#123;</span><br><span class="line">lxl nid=it-&gt;id,nx=it-&gt;x,nopt=it-&gt;opt;</span><br><span class="line"><span class="keyword">if</span>(~nopt)ans[nid]=(ans[nid]+QueryToRoot(nx))%mod;</span><br><span class="line"><span class="keyword">else</span> ans[nid]=(ans[nid]-QueryToRoot(nx)+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看T1觉得很显然,没在草稿纸上写就直接去分解数位和了,然后就没处理$\frac{10^n - 1}{9}$的约数,只拿了70分.</p><p>只要稍微写一下那个式子的形式就可以发现另外一部分是可以合并的,然后也有可能贡献约数,做数论题还是得多动笔.</p><p>然后写T2,觉得确定答案应该是在确定中序遍历后通过调整树的形态来求出,于是写了个递归建树,然后每次枚举到一个不合法的节点,用类似splay旋转的方式来调整形态,理论上只用做$O(n^2)$次,每次的复杂度是$O(logn)$,但是写完T3到最后时候才发现调整形态的判定没写好,而且参数写大了导致后面T了几个点,拿了30,正解是dp,感觉这做法挺怪的而且也没人写类似的.</p><p>写T3的时候剩2个小时,刚开始觉得是通过子树关系来优化区间求lca,把询问做到$O(logn)$,想了十多分钟发现可以直接差分离线做,把每个点到根节点的路径权值+1然后查询的时候就有深度的贡献了,拿了100.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:《旧试题》&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.lemir3.red/categories/总结/"/>
    
    
    <category term="总结" scheme="https://www.lemir3.red/tags/总结/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」CF1426F_Number_of_Subsequences</title>
    <link href="https://www.lemir3.red/2020/10/18/jie-ti-bao-gao-cf1426f-number-of-subsequences/"/>
    <id>https://www.lemir3.red/2020/10/18/jie-ti-bao-gao-cf1426f-number-of-subsequences/</id>
    <published>2020-10-18T13:36:28.000Z</published>
    <updated>2020-10-18T13:46:41.878Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:数列组合计数题<br><a id="more"></a></p><h1 id="CF1426F-Number-of-Subsequences"><a href="#CF1426F-Number-of-Subsequences" class="headerlink" title="CF1426F_Number_of_Subsequences"></a>CF1426F_Number_of_Subsequences</h1><p><a href="https://codeforces.com/problemset/problem/1426/F" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>因为是求所有的序列情况下的所有对数,所以可以很好地组合计数.</p><p>考虑固定一个”b”,它可以是序列中原本就有的,或者是我们选定的”?”,它的贡献可以分成四部分:</p><ul><li>序列中左边原本有的”a”和右边原本就有的”c”的组合.</li><li>序列中左边原本有的”a”和右边选定一个”?”作为”c”的组合.</li><li>序列中左边选定一个”?”作为”a”和右边原本就有的”c”的组合.</li><li>纯粹由两边”?”选定出的组合.</li></ul><p>可以发现因为每一种的贡献是独立的,不必考虑其他的”?”选定了什么.</p><p>那么我们设左边的”a”有$n$个,右边的”c”有$m$个,左边的”?”有$x$个,右边的”?”有$y$个,那么一个固定的”b”的贡献为:</p><script type="math/tex; mode=display">n \cdot m + n \cdot y \cdot 3^{x + y - 1} + m \cdot x \cdot 3^{x + y - 1} + x \cdot y \cdot 3^{x + y - 2}</script><p>注意取模.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">200010</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">lxl n,ans;</span><br><span class="line">lxl pre[<span class="number">4</span>][big],suf[<span class="number">4</span>][big],ch[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPow</span><span class="params">(lxl a,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%mod)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a%mod);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> chr;<span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;chr);</span><br><span class="line"><span class="keyword">if</span>(chr==<span class="string">'?'</span>)ch[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(chr==<span class="string">'a'</span>)ch[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(chr==<span class="string">'b'</span>)ch[i]=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(chr==<span class="string">'c'</span>)ch[i]=<span class="number">3</span>;</span><br><span class="line">++pre[ch[i]][i],++suf[ch[i]][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;<span class="number">4</span>;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">pre[j][i]+=pre[j][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n);i;--i)</span><br><span class="line">suf[j][i]+=suf[j][i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[i]==<span class="number">0</span>||ch[i]==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl prea=pre[<span class="number">1</span>][i],pren=pre[<span class="number">0</span>][i<span class="number">-1</span>];</span><br><span class="line">lxl sufc=suf[<span class="number">3</span>][i],sufn=suf[<span class="number">0</span>][i+<span class="number">1</span>];</span><br><span class="line">lxl add1=prea*sufc%mod*FastPow(<span class="number">3</span>,pren+sufn)%mod;</span><br><span class="line">lxl add2(0),add3(0),add4(0);</span><br><span class="line"><span class="keyword">if</span>(pren)add2=sufc*pren%mod*FastPow(<span class="number">3</span>,pren+sufn<span class="number">-1</span>)%mod;</span><br><span class="line"><span class="keyword">if</span>(sufn)add3=prea*sufn%mod*FastPow(<span class="number">3</span>,pren+sufn<span class="number">-1</span>)%mod;</span><br><span class="line"><span class="keyword">if</span>(pren+sufn&gt;=<span class="number">2</span>)add4=pren*sufn%mod*FastPow(<span class="number">3</span>,pren+sufn<span class="number">-2</span>)%mod;</span><br><span class="line">ans=(ans+add1+add2+add3+add4)%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:数列组合计数题&lt;br&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-组合" scheme="https://www.lemir3.red/categories/数学/数学-组合/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="组合" scheme="https://www.lemir3.red/tags/组合/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」CF1427C_The_Hard_Work_of_Paparazzi</title>
    <link href="https://www.lemir3.red/2020/10/18/jie-ti-bao-gao-cf1427c-the-hard-work-of-paparazzi/"/>
    <id>https://www.lemir3.red/2020/10/18/jie-ti-bao-gao-cf1427c-the-hard-work-of-paparazzi/</id>
    <published>2020-10-18T12:29:10.000Z</published>
    <updated>2020-10-18T12:39:39.041Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:考虑性质后前缀最大值优化dp</p><a id="more"></a><h1 id="CF1427C-The-Hard-Work-of-Paparazzi"><a href="#CF1427C-The-Hard-Work-of-Paparazzi" class="headerlink" title="CF1427C_The_Hard_Work_of_Paparazzi"></a>CF1427C_The_Hard_Work_of_Paparazzi</h1><p><a href="https://codeforces.com/problemset/problem/1427/C" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>$O(n^2)$的思路应该是挺显然的,设$dp_i$表示仅前$k$个人能被拍到的最大值,那么有状态转移方程如下:</p><script type="math/tex; mode=display">dp_i = \max \{ dp_{1 \leq j < i} \} + 1 ~ ( ~dis(i,j) \leq t_i -t_j ~)</script><p>就是从一个能转移的位置转移即可.</p><p>但是我们发现$r$的范围只有500,那么正解肯定和$r$有关,可以发现,当$i$和$j$的差距大到了$2r$,也就是图中两点间最大的距离时,因为$t$互不相同,那么这两个点一定可以转移.</p><p>这就启发我们用一个前缀最大值记录答案,如果$i$大于了$2r$,就取出$i-2r$的前缀最大值来更新,然后暴力转移$i-2r$到$i-1$这一段,复杂度$O(nr)$.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>,small=<span class="number">510</span>;</span><br><span class="line">lxl r,n,ans;</span><br><span class="line">lxl t[big],x[big],y[big],dp[big],pmx[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(lxl i,lxl j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl dis=<span class="built_in">abs</span>(y[i]-y[j])+<span class="built_in">abs</span>(x[i]-x[j]);</span><br><span class="line"><span class="keyword">return</span> dis&lt;=t[i]-t[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">r=read(),n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)t[i]=read(),x[i]=read(),y[i]=read();</span><br><span class="line">x[<span class="number">0</span>]=y[<span class="number">0</span>]=<span class="number">1</span>,t[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="keyword">if</span>(check(i,<span class="number">0</span>))dp[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="built_in">std</span>::max(i<span class="number">-2</span>*r,(lxl)<span class="number">1</span>));j&lt;i;++j)</span><br><span class="line"><span class="keyword">if</span>(check(i,j)&amp;&amp;dp[j])dp[i]=<span class="built_in">std</span>::max(dp[i],dp[j]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">2</span>*r)dp[i]=<span class="built_in">std</span>::max(dp[i],pmx[i<span class="number">-2</span>*r]+<span class="number">1</span>);</span><br><span class="line">pmx[i]=<span class="built_in">std</span>::max(pmx[i<span class="number">-1</span>],dp[i]);</span><br><span class="line">ans=<span class="built_in">std</span>::max(ans,dp[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:考虑性质后前缀最大值优化dp&lt;/p&gt;</summary>
    
    
    
    <category term="动态规划" scheme="https://www.lemir3.red/categories/动态规划/"/>
    
    
    <category term="动态规划" scheme="https://www.lemir3.red/tags/动态规划/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu3802小魔女帕琪</title>
    <link href="https://www.lemir3.red/2020/10/16/jie-ti-bao-gao-luogu3802-xiao-mo-nu-pa-qi/"/>
    <id>https://www.lemir3.red/2020/10/16/jie-ti-bao-gao-luogu3802-xiao-mo-nu-pa-qi/</id>
    <published>2020-10-16T13:18:51.000Z</published>
    <updated>2020-10-16T13:30:05.402Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:代 码 三 行</p><a id="more"></a><h1 id="luogu3802小魔女帕琪"><a href="#luogu3802小魔女帕琪" class="headerlink" title="luogu3802小魔女帕琪"></a>luogu3802小魔女帕琪</h1><p><a href="https://www.luogu.com.cn/problem/P3802" target="_blank" rel="noopener">题面</a></p><p>zzq题目分享讲的题,代码真就三行…</p><p>而且又是ob鸽鸽的题呢.</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>发现只要出现了一个$1$到$7$的排列,那么就会产生$1$的贡献,无论位置.</p><p>那么我们考虑求出一个位置上排列贡献的期望,这个位置上后$7$位产生一次姆q七重奏的期望是$\frac{a_1}{n} \times \frac{a_2}{n-1} \times \frac{a_3}{n-2} \times \frac{a_4}{n-3} \times \frac{a_5}{n-4} \times \frac{a_6}{n-5} \times \frac{a_7}{n-6} \times 7! \times 1$,应该很好理解.</p><p>然后根据期望的可加性,上式乘以$n-6$即得答案.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">double</span> pachy[<span class="number">7</span>],n,n7=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;<span class="number">7</span>;++i)<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,pachy+i),n+=pachy[i],n7*=(i+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.3lf\n"</span>,n7*pachy[<span class="number">0</span>]/n*pachy[<span class="number">1</span>]/(n<span class="number">-1</span>)*pachy[<span class="number">2</span>]/(n<span class="number">-2</span>)*pachy[<span class="number">3</span>]/(n<span class="number">-3</span>)*pachy[<span class="number">4</span>]/(n<span class="number">-4</span>)*pachy[<span class="number">5</span>]/(n<span class="number">-5</span>)*pachy[<span class="number">6</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:代 码 三 行&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-概率期望" scheme="https://www.lemir3.red/categories/数学/数学-概率期望/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="概率期望" scheme="https://www.lemir3.red/tags/概率期望/"/>
    
  </entry>
  
  <entry>
    <title>「总结」10162020机房赛</title>
    <link href="https://www.lemir3.red/2020/10/16/zong-jie-10162020-ji-fang-sai/"/>
    <id>https://www.lemir3.red/2020/10/16/zong-jie-10162020-ji-fang-sai/</id>
    <published>2020-10-16T12:18:12.000Z</published>
    <updated>2020-10-16T12:43:18.665Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:NOI plus模拟</p><a id="more"></a><h1 id="10162020机房赛"><a href="#10162020机房赛" class="headerlink" title="10162020机房赛"></a>10162020机房赛</h1><p>来自中山的题,当时中山的做起来都特别拉跨,难度不小.</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>正解大概是倒序考虑,然后只有前面的操作可能产生贡献,并查集合并这些操作.</p><p>细节啥的也没搞懂,但是写得好的暴力加编译优化可以水过去,不过在场上只有拿70的.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">6000010</span>;</span><br><span class="line">lxl n,k,tmpnow;</span><br><span class="line"><span class="keyword">char</span> s[big],tmp[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">k=read(),n=read();</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line">lxl l=read(),r=read(),len(r-l+<span class="number">1</span>),point(r);</span><br><span class="line"><span class="keyword">if</span>(r&gt;k)<span class="keyword">continue</span>;</span><br><span class="line">tmpnow=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(r+<span class="number">1</span>);i&lt;=k-len;++i)tmp[++tmpnow]=s[i];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=k-len-r;++i)s[i+r+len]=tmp[i];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(l+((l+<span class="number">1</span>)&amp;<span class="number">1</span>));i&lt;=r;i+=<span class="number">2</span>)s[++point]=s[i];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(l+(l&amp;<span class="number">1</span>));i&lt;=r;i+=<span class="number">2</span>)s[++point]=s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=k;++i)<span class="built_in">printf</span>(<span class="string">"%c"</span>,s[i]);<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>转化问题然后高阶图论,一点不会(趴…),打了个阶乘暴力和一个特殊情况拿了20.</p><h3 id="代码-20pts"><a href="#代码-20pts" class="headerlink" title="代码(20pts)"></a>代码(20pts)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">200010</span>,p=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">lxl n,ans,nlp=<span class="number">1</span>;</span><br><span class="line">lxl <span class="built_in">map</span>[<span class="number">6</span>][<span class="number">6</span>],a[<span class="number">11</span>],vis[<span class="number">11</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;lxl&gt;xh[big],yh[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPow</span><span class="params">(lxl a,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%p)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a%p);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c=getchar();</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=x*<span class="number">10</span>+(c-<span class="string">'0'</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(lxl ard)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ard==n+n)</span><br><span class="line">&#123;</span><br><span class="line">lxl nmap[<span class="number">6</span>][<span class="number">6</span>],sum(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=n;++j)nmap[i][j]=<span class="built_in">map</span>[i][j];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=ard;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;=n)&#123;<span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=n;++j)<span class="keyword">if</span>(nmap[a[i]][j])&#123;nmap[a[i]][j]=<span class="number">0</span>,++sum;<span class="keyword">break</span>;&#125;&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=n;++j)<span class="keyword">if</span>(nmap[j][a[i]-n])&#123;nmap[j][a[i]-n]=<span class="number">0</span>,++sum;<span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum==n+n)++ans;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n+n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i])<span class="keyword">continue</span>;</span><br><span class="line">vis[i]=<span class="literal">true</span>,a[ard+<span class="number">1</span>]=i;</span><br><span class="line">dfs(ard+<span class="number">1</span>);</span><br><span class="line">vis[i]=<span class="literal">false</span>,a[ard+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">if</span>(n&lt;=<span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n+n;++i)</span><br><span class="line">&#123;</span><br><span class="line">nlp=nlp*i%p;</span><br><span class="line">lxl x=read(),y=read();</span><br><span class="line"><span class="built_in">map</span>[x][y]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans*FastPow(nlp,p<span class="number">-2</span>)%p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n+n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl x=read(),y=read();</span><br><span class="line">xh[x].push_back(i),yh[y].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">lxl flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=n;++i)<span class="keyword">if</span>(xh[i].size()&gt;<span class="number">1</span>)flag+=xh[i].size()<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(flag&gt;<span class="number">2</span>)&#123;<span class="built_in">printf</span>(<span class="string">"0\n"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,FastPow(<span class="number">2</span>,p<span class="number">-2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>顶尖数学题,一点不会,考场上没开这题.</p><h3 id="代码-0pts"><a href="#代码-0pts" class="headerlink" title="代码(0pts)"></a>代码(0pts)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c=getchar();</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=x*<span class="number">10</span>+(c-<span class="string">'0'</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这下是什么难度的题都见识过了.</p><p>先开的T1,没什么思路,想了想直接打模拟了,觉得用splay来维护可以比暴力更优,splay写得比较熟于是就直接上去打了,但是在删除子树的时候没把节点旋到根更新size导致之后的find死循环于是爆零.暴力模拟其实也挺好写,拿70是很容易的.</p><p>T1花掉了2个小时,大部分时间花在调试上,还是得多熟悉平衡树和lct这些容易出错的数据结构,考场上才能快速现写出来,而且有些东西是特别不好调的,就比如splay调试需要每次旋转都画一张图,多项式(虽然联赛不考)基本没有调试可能,就得尽量一遍写对.</p><p>然后看T2,觉得是个期望DP,草稿纸上堆了会样例,想不出怎么转移,就写了阶乘的暴力,推了会部分分的特殊情况,拿了暴力的15分和特殊情况分的5分,还有10分的特殊情况分没时间写了.</p><p>T3没时间做了,有30分左右是可做的.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:NOI plus模拟&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.lemir3.red/categories/总结/"/>
    
    
    <category term="总结" scheme="https://www.lemir3.red/tags/总结/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu3763[TJOI2017]DNA</title>
    <link href="https://www.lemir3.red/2020/10/16/jie-ti-bao-gao-luogu3763-tjoi2017-dna/"/>
    <id>https://www.lemir3.red/2020/10/16/jie-ti-bao-gao-luogu3763-tjoi2017-dna/</id>
    <published>2020-10-16T07:46:41.000Z</published>
    <updated>2020-10-16T08:07:31.380Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:卷积计算匹配<br><a id="more"></a></p><h1 id="luogu3763-TJOI2017-DNA"><a href="#luogu3763-TJOI2017-DNA" class="headerlink" title="luogu3763[TJOI2017]DNA"></a>luogu3763[TJOI2017]DNA</h1><p><a href="https://www.luogu.com.cn/problem/P3763" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>要计算字符串带通配符在每个位置上的匹配,一般还是想到用多项式卷积.</p><p>视两个字符串为多项式$f$,$g$,匹配相当于是:</p><script type="math/tex; mode=display">\sum_{i=1}^{n} ( f_i - g_i ) ^ 2 = \sum_{i=1}^{n} f_i^2 + g_i^2 -2f_ig_i = 0</script><p>其中一个倒序卷一下就可以了,不卷不是中国人.</p><p>这道题相当于是带通配符,但是不能用超过三个,转换下思路,枚举字符集作为当前的通配符,把第一个串里不等于通配符的赋为$1$,表示这个位置匹配需要一个通配符,另一个串等于通配符的赋为$1$,表示第一个串的这个地方需要被换成通配符,然后进行卷积,算出每个位置匹配上要多少个通配符,最后全部加起来即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>,mod=<span class="number">998244353</span>,g=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">4</span>]=&#123;<span class="string">'A'</span>,<span class="string">'G'</span>,<span class="string">'C'</span>,<span class="string">'T'</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> s1[big],s2[big];</span><br><span class="line">lxl T,n,m,len,out,InvG,InvN;</span><br><span class="line">lxl tr[big&lt;&lt;<span class="number">2</span>],ans[big];</span><br><span class="line">lxl a[big&lt;&lt;<span class="number">2</span>],b[big&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPow</span><span class="params">(lxl a,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%mod)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a%mod);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(lxl *f,lxl IDFT)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)<span class="keyword">if</span>(i&lt;tr[i])<span class="built_in">std</span>::swap(f[i],f[tr[i]]);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> p=<span class="number">2</span>,leng;p&lt;=len;p&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">leng=p&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="function">lxl <span class="title">tG</span><span class="params">(FastPow((~IDFT)?g:InvG,(mod<span class="number">-1</span>)/p))</span></span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k=<span class="number">0</span>;k&lt;len;k+=p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">lxl <span class="title">buf</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> l=k;l&lt;k+leng;++l)</span><br><span class="line">&#123;</span><br><span class="line">lxl tt=(f[l+leng]*buf)%mod;</span><br><span class="line">f[leng+l]=f[l]-tt;</span><br><span class="line"><span class="keyword">if</span>(f[leng+l]&lt;<span class="number">0</span>)f[leng+l]+=mod;</span><br><span class="line">f[l]=f[l]+tt;</span><br><span class="line"><span class="keyword">if</span>(f[l]&gt;mod)f[l]-=mod;</span><br><span class="line">buf=(buf*tG)%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T=read();</span><br><span class="line">InvG=FastPow(g,mod<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">out=<span class="number">0</span>,<span class="built_in">memset</span>(tr,<span class="number">0</span>,<span class="keyword">sizeof</span> tr);</span><br><span class="line"><span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span> ans);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s1),<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s2);</span><br><span class="line">n=<span class="built_in">strlen</span>(s1),m=<span class="built_in">strlen</span>(s2);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;m/<span class="number">2</span>;++i)<span class="built_in">std</span>::swap(s2[i],s2[m-i<span class="number">-1</span>]);</span><br><span class="line"><span class="comment">// for(R int i(0);i&lt;m;++i)printf("%c",s2[i]);endl;</span></span><br><span class="line"><span class="keyword">for</span>(len=<span class="number">1</span>;len&lt;n+m;len&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">InvN=FastPow(len,mod<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)tr[i]=(tr[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)?(len&gt;&gt;<span class="number">1</span>):<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;<span class="number">4</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a),<span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span> b);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;n;++j)a[j]=(s1[j]!=ch[i]);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;m;++j)b[j]=(s2[j]==ch[i]);</span><br><span class="line">NTT(a,<span class="number">1</span>),NTT(b,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;len;++j)a[j]=a[j]*b[j]%mod;</span><br><span class="line">NTT(a,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;len;++j)a[j]=a[j]*InvN%mod;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(m<span class="number">-1</span>);j&lt;n;++j)ans[j]+=a[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(m<span class="number">-1</span>);i&lt;n;++i)out+=(ans[i]&lt;=<span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,out);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:卷积计算匹配&lt;br&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-多项式" scheme="https://www.lemir3.red/categories/数学/数学-多项式/"/>
    
    <category term="字符串" scheme="https://www.lemir3.red/categories/数学/数学-多项式/字符串/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="字符串" scheme="https://www.lemir3.red/tags/字符串/"/>
    
    <category term="多项式" scheme="https://www.lemir3.red/tags/多项式/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu1903[国家集训队]数颜色</title>
    <link href="https://www.lemir3.red/2020/10/15/jie-ti-bao-gao-luogu1903-guo-jia-ji-xun-dui-shu-yan-se/"/>
    <id>https://www.lemir3.red/2020/10/15/jie-ti-bao-gao-luogu1903-guo-jia-ji-xun-dui-shu-yan-se/</id>
    <published>2020-10-15T12:30:13.000Z</published>
    <updated>2020-10-15T12:43:14.647Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:带修莫队</p><a id="more"></a><h1 id="luogu1903-国家集训队-数颜色"><a href="#luogu1903-国家集训队-数颜色" class="headerlink" title="luogu1903[国家集训队]数颜色"></a>luogu1903[国家集训队]数颜色</h1><p><a href="https://www.luogu.com.cn/problem/P1903" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>本来是想了个树状数组套主席树的做法,但是感觉十分不好写,于是去学了带修莫队.</p><p>其实也就是在莫队转移的时候加上修改的影响,记录每个距离询问最近的修改,如果在进行询问时,进行的修改改多了,那么就撤销修改,如果改少了,就进行修改.</p><p>然后块长$n^{\frac{2}{3}}$理论在带修莫队中是最优的,但是这题常数原因开到$n^{\frac{3}{4}}$更优.</p><p>然后在排序的时候用三个关键字,分别是左端点所在块,右端点所在块,查询的编号,尽量让编号小查询的靠前处理让修改尽量少.</p><p>在执行完修改后,有个很巧妙的操作,将修改的数和原序列上的数进行了交换,这样就可以直接撤销了.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">150010</span>,large=<span class="number">1000010</span>;</span><br><span class="line">lxl n,m,QCnt,CCnt,nowans,now,_l,_r;</span><br><span class="line">lxl a[big],cnt[large],ans[big],block[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl l,r,pre,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Query &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// if(l!=another.l)return block[l]&lt;block[another.l];</span></span><br><span class="line"><span class="comment">// if(r!=another.r)return block[r]&lt;block[another.r];</span></span><br><span class="line"><span class="comment">// return pre&lt;another.pre;</span></span><br><span class="line"><span class="keyword">if</span>(block[l]==block[another.l])</span><br><span class="line"><span class="keyword">if</span>(block[r]==block[another.r])<span class="keyword">return</span> id&lt;another.id;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> r&lt;another.r;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> l&lt;another.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;q[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Modify</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl pos,val;</span><br><span class="line">&#125;c[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lxl x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) &#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">if</span>(++cnt[x]==<span class="number">1</span>)++nowans;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">if</span>(--cnt[x]==<span class="number">0</span>)--nowans;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(lxl x,lxl i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl pos=c[x].pos,val=c[x].val;</span><br><span class="line">lxl l_=q[i].l,r_=q[i].r;</span><br><span class="line"><span class="keyword">if</span>(pos&gt;=l_&amp;&amp;pos&lt;=r_)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!(cnt[a[pos]]<span class="number">-1</span>))--nowans;--cnt[a[pos]];</span><br><span class="line"><span class="keyword">if</span>(!cnt[val])++nowans;++cnt[val];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::swap(c[x].val,a[pos]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("in.txt","r",stdin);</span></span><br><span class="line"><span class="comment">// freopen("out.txt","w",stdout);</span></span><br><span class="line">n=read(),m=read();</span><br><span class="line">lxl len=<span class="built_in">pow</span>(n,<span class="number">0.75</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=read(),block[i]=(i<span class="number">-1</span>)/len+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> opt;<span class="built_in">std</span>::<span class="built_in">cin</span>&gt;&gt;opt;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="string">'Q'</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl x=read(),y=read();</span><br><span class="line">q[++QCnt]=(_Query)&#123;x,y,CCnt,QCnt&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">lxl x=read(),y=read();</span><br><span class="line">c[++CCnt]=(_Modify)&#123;x,y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::sort(q+<span class="number">1</span>,q+<span class="number">1</span>+QCnt);</span><br><span class="line">_l=q[<span class="number">1</span>].l,_r=q[<span class="number">1</span>].l<span class="number">-1</span>;</span><br><span class="line"><span class="comment">// _l=1,_r=0;</span></span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=QCnt;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl nl=q[i].l,nr=q[i].r,nid=q[i].id,npre=q[i].pre;</span><br><span class="line"><span class="keyword">while</span>(_l&gt;nl)add(a[--_l]);</span><br><span class="line"><span class="keyword">while</span>(_r&gt;nr)del(a[_r--]);</span><br><span class="line"><span class="keyword">while</span>(_r&lt;nr)add(a[++_r]);</span><br><span class="line"><span class="keyword">while</span>(_l&lt;nl)del(a[_l++]);</span><br><span class="line"><span class="keyword">while</span>(now&lt;npre)work(++now,i);</span><br><span class="line"><span class="keyword">while</span>(now&gt;npre)work(now--,i);</span><br><span class="line">ans[nid]=nowans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=QCnt;++i)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:带修莫队&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://www.lemir3.red/categories/其他/"/>
    
    <category term="其他-莫队" scheme="https://www.lemir3.red/categories/其他/其他-莫队/"/>
    
    
    <category term="其他" scheme="https://www.lemir3.red/tags/其他/"/>
    
    <category term="莫队" scheme="https://www.lemir3.red/tags/莫队/"/>
    
  </entry>
  
  <entry>
    <title>「总结」10152020机房赛</title>
    <link href="https://www.lemir3.red/2020/10/15/zong-jie-10152020-ji-fang-sai/"/>
    <id>https://www.lemir3.red/2020/10/15/zong-jie-10152020-ji-fang-sai/</id>
    <published>2020-10-15T08:09:33.000Z</published>
    <updated>2020-10-15T09:52:22.265Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:受骗消费者lbl</p><a id="more"></a><h1 id="10152020机房赛"><a href="#10152020机房赛" class="headerlink" title="10152020机房赛"></a>10152020机房赛</h1><h2 id="闲话"><a href="#闲话" class="headerlink" title="闲话"></a>闲话</h2><p>关于这套题:</p><p><img src="https://s1.ax1x.com/2020/10/15/0Tg2aq.png" alt></p><p><img src="https://s1.ax1x.com/2020/10/15/0TghGT.png" alt></p><p>题解里写了部分分题面上没部分分,T1数据范围可以拿图灵奖,T2数据脚造,T3傻逼人类智慧分类讨论题…</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>50mb的空间,最大2e9的读入量,不存在边读边做的做法,不知道这出题人怎么想的.</p><p>而且std空间都只开了1e7,因为数据随机造的就给过了.</p><p>于是考场想出正解,不敢开数组,开vector还是被卡了空间,拿了48分,看葛队思路和我一样但是用的数组就多mle了一个点.</p><p>先不管这莫名奇妙的数据范围和空间限制,可以发现的是货物出现的时间是可以固定的,算上走到那个位置上的时间,只要在这个时间之后出发,就可以装载这个货物.</p><p>那我们把这个时间算出来,把所有的货物排个序.</p><p>然后把车放入小根堆,每次取出时间上最优的车去取一个货物,然后弹掉它,加上绕行一圈的时间再次插入,统计答案即可.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(x,y) std::make_pair(x,y)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">1000010</span>,small=<span class="number">2010</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,point,num;</span><br><span class="line">lxl now,sum;</span><br><span class="line"><span class="built_in">std</span>::priority_queue&lt;lxl&gt;car;</span><br><span class="line">lxl a[big*<span class="number">10</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;lxl f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c=gc())) (c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>);</span><br><span class="line">    x=c^<span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c=gc())) x=x*<span class="number">10</span>+(c^<span class="number">48</span>);</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">read(n),read(m);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl _,x;read(_),sum+=_;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=_;++j)read(x),a[++num]=x-i*<span class="number">1l</span>l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::sort(a+<span class="number">1</span>,a+<span class="number">1</span>+num);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)car.push(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=num;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl next=a[i];;</span><br><span class="line">lxl ncar=-car.top();car.pop();</span><br><span class="line"><span class="keyword">if</span>(ncar&lt;next)ncar=next;</span><br><span class="line">car.push(-(ncar+n+<span class="number">1</span>));</span><br><span class="line">now=<span class="built_in">std</span>::max(now,ncar+n+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,now);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>上一题是造数据不带脑子,这一题是直接拿脚造数据.</p><p>考场写个暴力就去刚T3了,T3刚到一半回头测测T2大样例,发现2e6的范围,理论最差复杂度$O(n^2)$的暴力在本机跑了500ms.</p><p>以为是出题人钓鱼没想到还真这么快,获得了72分的好成绩.</p><p>然后正解是拿动态树做,每个点给一个$1$的权值,删除的点清空权值,插入随便维护.</p><p>查询$x$的$k$级祖先就把$x$给access再旋到根,每个点维护了当前splay集合里的子树size,那么这样旋转之后$x$的祖先就都在它的左子树上,其中权值为$size_{root}-k$的点就是$x$的$k$级祖先了.</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">200010</span>;</span><br><span class="line">lxl m,online,NodeCnt=<span class="number">1</span>,LastAns;</span><br><span class="line">lxl c[<span class="number">2</span>][big],fa[big],size[big],val[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(lxl x)</span></span>&#123;size[x]=size[c[<span class="number">0</span>][x]]+size[c[<span class="number">1</span>][x]]+val[x];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">IsRoot</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">return</span> c[<span class="number">0</span>][fa[x]]!=x&amp;&amp;c[<span class="number">1</span>][fa[x]]!=x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl y=fa[x],z=fa[y],d=c[<span class="number">1</span>][y]==x;</span><br><span class="line"><span class="keyword">if</span>(!IsRoot(y))c[c[<span class="number">1</span>][z]==y][z]=x;</span><br><span class="line">fa[x]=z,fa[y]=x,fa[c[d^<span class="number">1</span>][x]]=y;</span><br><span class="line">c[d][y]=c[d^<span class="number">1</span>][x],c[d^<span class="number">1</span>][x]=y;</span><br><span class="line">PushUp(y),PushUp(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!IsRoot(x))</span><br><span class="line">&#123;</span><br><span class="line">lxl y=fa[x],z=fa[y];</span><br><span class="line"><span class="keyword">if</span>(!IsRoot(y))rotate((c[<span class="number">0</span>][y]==x)^(c[<span class="number">0</span>][z]==y)?x:y);</span><br><span class="line">rotate(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">for</span>(R <span class="keyword">int</span> t(<span class="number">0</span>);x;t=x,x=fa[x])splay(x),c[<span class="number">1</span>][x]=t,PushUp(x);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fa[++NodeCnt]=x;</span><br><span class="line">val[NodeCnt]=size[NodeCnt]=<span class="number">1</span>;</span><br><span class="line">access(NodeCnt),splay(NodeCnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">erase</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">access(x),splay(x);</span><br><span class="line">val[x]=<span class="number">0</span>,PushUp(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">find</span><span class="params">(lxl x,lxl k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">cnt</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(size[c[<span class="number">0</span>][x]]&gt;=k)x=c[<span class="number">0</span>][x];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(size[c[<span class="number">0</span>][x]]+val[x]==k)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span> k-=size[c[<span class="number">0</span>][x]]+val[x],x=c[<span class="number">1</span>][x];</span><br><span class="line">++cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">query</span><span class="params">(lxl x,lxl k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">access(x),splay(x);</span><br><span class="line"><span class="keyword">return</span> find(x,size[x]-k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m=read(),online=read();</span><br><span class="line">val[<span class="number">1</span>]=size[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">lxl opt=read();</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl x=read()^LastAns;</span><br><span class="line"><span class="keyword">if</span>(!x||x&gt;NodeCnt||!val[x])<span class="keyword">continue</span>;</span><br><span class="line">link(x);</span><br><span class="line"><span class="keyword">if</span>(online)LastAns=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl x=read()^LastAns;</span><br><span class="line"><span class="keyword">if</span>(!x||x&gt;NodeCnt||!val[x])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(online)LastAns=query(x,<span class="number">1</span>);</span><br><span class="line">erase(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl x=read()^LastAns,y=read()^LastAns,ans;</span><br><span class="line"><span class="keyword">if</span>(!x||x&gt;NodeCnt||!val[x])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans=query(x,y));</span><br><span class="line"><span class="keyword">if</span>(online)LastAns=ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>人类智慧分类讨论解三角形,不会.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>先做的T1,发现数据范围大得不可能存得下以为得边读边做,但是想了一会不知道怎么搞,于是去想了个和正解一样的用小根堆的做法,但其实数据点和std的数据范围比题面上的小得多,按题面开就mle了,拿了48.</p><p>然后去看了T2和T3,发现T3是个大模拟感觉比T2要好拿分,T2写了个暴力就没管了,测了测大样例发现跑得很快,拿了72.</p><p>最后两个小时都在写T3,分类讨论的情况太多了写了200多行,最后测大样例发现没判直角三角形和等腰三角形的情况,写上之后判等腰的条件写漏了于是把所有三角形都处理了,就只拿了24,非常不划算.</p><p>自己写大模拟的经验实在是不足,在情况很多的时候会写得很冗长浪费时间,而且在其他的题目上也经常出现做法想出来了但是写法太烂的情况,以后可以去多看看别人写得快的代码锻炼代码的实现能力.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:受骗消费者lbl&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.lemir3.red/categories/总结/"/>
    
    
    <category term="总结" scheme="https://www.lemir3.red/tags/总结/"/>
    
  </entry>
  
  <entry>
    <title>「解法报告」luogu2391白雪皑皑</title>
    <link href="https://www.lemir3.red/2020/10/14/jie-fa-bao-gao-luogu2391-bai-xue-ai-ai/"/>
    <id>https://www.lemir3.red/2020/10/14/jie-fa-bao-gao-luogu2391-bai-xue-ai-ai/</id>
    <published>2020-10-14T10:57:59.000Z</published>
    <updated>2020-10-14T11:00:56.401Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:倒序处理跳过无用区间</p><a id="more"></a><h1 id="luogu2391白雪皑皑"><a href="#luogu2391白雪皑皑" class="headerlink" title="luogu2391白雪皑皑"></a>luogu2391白雪皑皑</h1><p><a href="https://www.luogu.com.cn/problem/P2391" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>因为只用询问最后一次,所以直接倒序处理即可,让一个位置覆盖后直接跳过.</p><p>因为跳过的是一个区间,所以在每个点上记录跳到哪里即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">1000010</span>,large=<span class="number">10000010</span>;</span><br><span class="line">lxl n,m,p,q,sum,top;</span><br><span class="line">lxl link[big],color[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Modify</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl l,r;</span><br><span class="line">&#125;mod[large];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">find</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">return</span> x==link[x]?x:link[x]=find(link[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sum=n=read(),m=read();</span><br><span class="line">p=read(),q=read();</span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=n+1;++i)link[i]=i;</span></span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl l=(i*p+q)%n+<span class="number">1</span>,r=(i*q+p)%n+<span class="number">1</span>;</span><br><span class="line"><span class="comment">// lxl l=read(),r=read();</span></span><br><span class="line"><span class="keyword">if</span>(l&gt;r)<span class="built_in">std</span>::swap(l,r);</span><br><span class="line">mod[i]=(_Modify)&#123;l,r&#125;;</span><br><span class="line"><span class="comment">// debug(l),debug(r),endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(sum&amp;&amp;m)</span><br><span class="line">&#123;</span><br><span class="line">lxl nl=mod[m].l,nr=mod[m].r,nc=m--;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(nl);i&lt;=nr;++i)</span><br><span class="line"><span class="keyword">if</span>(!color[i])color[i]=nc,link[i]=nr,--sum;</span><br><span class="line"><span class="keyword">else</span> i=link[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,color[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:倒序处理跳过无用区间&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://www.lemir3.red/categories/其他/"/>
    
    
    <category term="其他" scheme="https://www.lemir3.red/tags/其他/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu2408不同子串个数</title>
    <link href="https://www.lemir3.red/2020/10/13/jie-ti-bao-gao-luogu2408-bu-tong-zi-chuan-ge-shu/"/>
    <id>https://www.lemir3.red/2020/10/13/jie-ti-bao-gao-luogu2408-bu-tong-zi-chuan-ge-shu/</id>
    <published>2020-10-13T09:49:53.000Z</published>
    <updated>2020-10-14T00:14:28.533Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:SA板题</p><a id="more"></a><h1 id="luogu2408不同子串个数"><a href="#luogu2408不同子串个数" class="headerlink" title="luogu2408不同子串个数"></a>luogu2408不同子串个数</h1><p><a href="https://www.luogu.com.cn/problem/P2408" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>就一个板题没啥好说的…</p><p>因为用height可以求出后缀排序后相邻两串的lcp,即为重复的子串,减掉就好了.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl n,m=<span class="number">100</span>,ans;</span><br><span class="line">lxl rank[big],sa[big],tp[big],suf[big],pla[big],height[big];</span><br><span class="line"><span class="keyword">char</span> s[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">QSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;=m;++i)suf[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)++suf[rank[i]];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)suf[i]+=suf[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n);i;--i)sa[suf[rank[tp[i]]]--]=tp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">SuffixSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)rank[i]=s[i]-<span class="string">'#'</span>,tp[i]=i;</span><br><span class="line">QSort();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> w(<span class="number">1</span>),p(<span class="number">0</span>);p&lt;n;m=p,w&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=w;++i)tp[++p]=n-w+i;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="keyword">if</span>(sa[i]&gt;w)tp[++p]=sa[i]-w;</span><br><span class="line">QSort();</span><br><span class="line"><span class="built_in">std</span>::swap(tp,rank);</span><br><span class="line">rank[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=n;++i)</span><br><span class="line">rank[sa[i]]=(tp[sa[i]]==tp[sa[i<span class="number">-1</span>]]&amp;&amp;tp[sa[i]+w]==tp[sa[i<span class="number">-1</span>]+w])?p:++p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read();<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)pla[i]=i;</span><br><span class="line">SuffixSort();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>),j(<span class="number">0</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j)--j;</span><br><span class="line"><span class="keyword">while</span>(s[i+j]==s[sa[rank[i]<span class="number">-1</span>]+j])++j;</span><br><span class="line">height[rank[i]]=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)ans+=n-pla[sa[i]]+<span class="number">1</span>-height[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:SA板题&lt;/p&gt;</summary>
    
    
    
    <category term="字符串" scheme="https://www.lemir3.red/categories/字符串/"/>
    
    <category term="字符串-后缀数组" scheme="https://www.lemir3.red/categories/字符串/字符串-后缀数组/"/>
    
    
    <category term="字符串" scheme="https://www.lemir3.red/tags/字符串/"/>
    
    <category term="后缀数组" scheme="https://www.lemir3.red/tags/后缀数组/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu4051[JSOI2007]字符加密</title>
    <link href="https://www.lemir3.red/2020/10/13/jie-ti-bao-gao-luogu4051-jsoi2007-zi-fu-jia-mi/"/>
    <id>https://www.lemir3.red/2020/10/13/jie-ti-bao-gao-luogu4051-jsoi2007-zi-fu-jia-mi/</id>
    <published>2020-10-13T09:23:23.000Z</published>
    <updated>2020-10-13T09:29:45.059Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:拆环为链后后缀排序</p><a id="more"></a><h1 id="luogu4051-JSOI2007-字符加密"><a href="#luogu4051-JSOI2007-字符加密" class="headerlink" title="luogu4051[JSOI2007]字符加密"></a>luogu4051[JSOI2007]字符加密</h1><p><a href="https://www.luogu.com.cn/problem/P4051" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目相当于是把一个环上的字符串拿来排序,那我们直接拆环为链,后缀排序即可.</p><p>然后后面长度不足以是一个原串的后缀忽略掉即可.</p><p>解释一下为什么是对的,因为按照字符串比较大小的方法,即使两个长度为原串的串后面接了一堆后缀,也不会影响排序的结果,结果仅与前面与原串长度相等的那一部分有关.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">200010</span>;</span><br><span class="line">lxl n,m=<span class="number">100</span>,out;</span><br><span class="line">lxl sa[big],suf[big],rank[big],tp[big],id[big];</span><br><span class="line"><span class="keyword">char</span> s[big],ans[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">QSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;=m;++i)suf[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)++suf[rank[i]];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)suf[i]+=suf[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n);i;--i)sa[suf[rank[tp[i]]]--]=tp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">SuffixSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)rank[i]=s[i]-<span class="string">'#'</span>,tp[i]=i;</span><br><span class="line">QSort();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> w(<span class="number">1</span>),p(<span class="number">0</span>);p&lt;n;m=p,w&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=w;++i)tp[++p]=n-w+i;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="keyword">if</span>(sa[i]&gt;w)tp[++p]=sa[i]-w;</span><br><span class="line">QSort();</span><br><span class="line"><span class="built_in">std</span>::swap(tp,rank);</span><br><span class="line">rank[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=n;++i)</span><br><span class="line">rank[sa[i]]=(tp[sa[i]]==tp[sa[i<span class="number">-1</span>]]&amp;&amp;tp[sa[i]+w]==tp[sa[i<span class="number">-1</span>]+w])?p:++p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)id[i]=i;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n+<span class="number">1</span>);i&lt;=n+n<span class="number">-1</span>;++i)s[i]=s[i-n];</span><br><span class="line">n=n+n<span class="number">-1</span>;</span><br><span class="line">SuffixSort();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!id[sa[i]])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(id[sa[i]]==<span class="number">1</span>)ans[++out]=s[(n+<span class="number">1</span>)/<span class="number">2</span>];</span><br><span class="line"><span class="keyword">else</span> ans[++out]=s[id[sa[i]]<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=out;++i)<span class="built_in">printf</span>(<span class="string">"%c"</span>,ans[i]);<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:拆环为链后后缀排序&lt;/p&gt;</summary>
    
    
    
    <category term="字符串" scheme="https://www.lemir3.red/categories/字符串/"/>
    
    <category term="字符串-后缀数组" scheme="https://www.lemir3.red/categories/字符串/字符串-后缀数组/"/>
    
    
    <category term="字符串" scheme="https://www.lemir3.red/tags/字符串/"/>
    
    <category term="后缀数组" scheme="https://www.lemir3.red/tags/后缀数组/"/>
    
  </entry>
  
  <entry>
    <title>「总结」10132020机房赛</title>
    <link href="https://www.lemir3.red/2020/10/13/zong-jie-10132020-ji-fang-sai/"/>
    <id>https://www.lemir3.red/2020/10/13/zong-jie-10132020-ji-fang-sai/</id>
    <published>2020-10-13T07:37:39.000Z</published>
    <updated>2020-10-13T09:31:13.569Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:$P \neq NP$</p><a id="more"></a><h1 id="10132020机房赛"><a href="#10132020机房赛" class="headerlink" title="10132020机房赛"></a>10132020机房赛</h1><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>把图划分为两部分,一部分是团,一部分是独立集,求方案数.</p><p>于是很好分析出来要求图中的最大团,因为最大团中的点不可能出现在独立集中.</p><p>可这问题不是个典型的NP吗…</p><p>于是正解是暴力划分…</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">1010</span>;</span><br><span class="line">lxl T,n,m,InCnt,OutCnt,ans;</span><br><span class="line">lxl edge[big][big],in[big],out[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==n+<span class="number">1</span>)&#123;ans+=InCnt&amp;&amp;OutCnt;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=OutCnt;++i)<span class="keyword">if</span>(edge[out[i]][x])<span class="keyword">goto</span> nout;</span><br><span class="line">&#123;</span><br><span class="line">out[++OutCnt]=x;</span><br><span class="line">dfs(x+<span class="number">1</span>);</span><br><span class="line">--OutCnt;</span><br><span class="line">&#125;</span><br><span class="line">nout:;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=InCnt;++i)<span class="keyword">if</span>(!edge[in[i]][x])<span class="keyword">goto</span> nin;</span><br><span class="line">&#123;</span><br><span class="line">in[++InCnt]=x;</span><br><span class="line">dfs(x+<span class="number">1</span>);</span><br><span class="line">--InCnt;</span><br><span class="line">&#125;</span><br><span class="line">nin:;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T=read();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(edge,<span class="literal">false</span>,<span class="keyword">sizeof</span> edge);</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read();</span><br><span class="line">edge[u][v]=edge[v][u]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>顺序枚举前缀的变化,发现每变化一个位置上的值,会对它前面位置的后缀和产生影响.</p><p>同时后缀的变化是要变到可能的最小值,而$B$为正,所以一定是找到最大的后缀和,然后变化这一段,因为可以不变,在结尾添加一个$0$.</p><p>然后线段树维护后缀和,每次区间修改,区间求最值即可.</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">1000010</span>;</span><br><span class="line">lxl n,NodeCnt,root,ans,sum,am,bm;</span><br><span class="line">lxl c[<span class="number">2</span>][big&lt;&lt;<span class="number">2</span>],max[big&lt;&lt;<span class="number">2</span>],a[big],suf[big],tag[big&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(lxl t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!tag[t])<span class="keyword">return</span>;</span><br><span class="line">max[c[<span class="number">0</span>][t]]+=tag[t],max[c[<span class="number">1</span>][t]]+=tag[t];</span><br><span class="line">tag[c[<span class="number">0</span>][t]]+=tag[t],tag[c[<span class="number">1</span>][t]]+=tag[t];</span><br><span class="line">tag[t]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(lxl t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(max[c[<span class="number">0</span>][t]]&gt;max[c[<span class="number">1</span>][t]])max[t]=max[c[<span class="number">0</span>][t]];</span><br><span class="line"><span class="keyword">else</span> max[t]=max[c[<span class="number">1</span>][t]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(lxl &amp;t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t=++NodeCnt;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;max[t]=suf[l];<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">build(c[<span class="number">0</span>][t],l,mid),build(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r);</span><br><span class="line">PushUp(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl y,lxl k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;tag[t]+=k,max[t]+=k;<span class="keyword">return</span>;&#125;</span><br><span class="line">PushDown(t);</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)modify(c[<span class="number">0</span>][t],l,mid,x,y,k);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid)modify(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y,k);</span><br><span class="line">PushUp(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">query</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)<span class="keyword">return</span> max[t];</span><br><span class="line">PushDown(t);</span><br><span class="line">lxl mid((l+r)&gt;&gt;1),ma(-INF);</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)ma=<span class="built_in">std</span>::max(ma,query(c[<span class="number">0</span>][t],l,mid,x,y));</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid)ma=<span class="built_in">std</span>::max(ma,query(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y));</span><br><span class="line"><span class="keyword">return</span> ma;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),am=read(),bm=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=read(),sum+=a[i];</span><br><span class="line">a[++n]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n);i;--i)suf[i]=suf[i+<span class="number">1</span>]+a[i];</span><br><span class="line">build(root,<span class="number">1</span>,n);</span><br><span class="line">lxl origin=query(root,<span class="number">1</span>,n,<span class="number">1</span>,n);</span><br><span class="line">ans=sum-origin+(origin*-bm);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">sum=sum-a[i]+(a[i]*-am);</span><br><span class="line">modify(root,<span class="number">1</span>,n,<span class="number">1</span>,i,(a[i]*-am)-a[i]);</span><br><span class="line">origin=query(root,<span class="number">1</span>,n,<span class="number">1</span>,n);</span><br><span class="line">ans=<span class="built_in">std</span>::max(ans,sum-origin+(origin*-bm));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>考虑把题目中的贡献转化为边权,做最小生成树.</p><p>只要保证联通即可,所以最优解一定是一颗树.</p><p>贡献1是很好处理的,可以直接赋,贡献2要考虑一个顺序的问题.</p><p>对于边$(x,y)$,它们一定会产生$( u_x - t_x ) \times t_y \times f_x + ( u_y - t_y ) \times t_x \times f_y$的贡献,如果是$x$后加人,贡献会增加$( u_x - t_x ) \times ( u_y - t_y ) \times f_x$的贡献,$y$后加人同理.</p><p>然后是每个点加人会有之前已经有的人产生的贡献,这个可以处理完生成树之后直接算.</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl small=<span class="number">51</span>,big=<span class="number">3010</span>;</span><br><span class="line">lxl n,ans,ECnt,c;</span><br><span class="line">lxl fa[small],t[small],u[small],f[small];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl u,v,w;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Edge &amp;another)<span class="keyword">const</span>&#123;<span class="keyword">return</span> w&lt;another.w;&#125;</span><br><span class="line">&#125;e[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">find</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">return</span> x==fa[x]?x:fa[x]=find(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">calc</span><span class="params">(lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl XFirst,YFirst,num1,num2;</span><br><span class="line">YFirst=(u[x]-t[x])*(u[y]-t[y])*f[x];</span><br><span class="line">XFirst=(u[x]-t[x])*(u[y]-t[y])*f[y];</span><br><span class="line">num1=(u[x]-t[x])*t[y]*f[x];</span><br><span class="line">num2=(u[y]-t[y])*t[x]*f[y];</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">std</span>::min(YFirst,XFirst)+num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl x,y;</span><br><span class="line"><span class="built_in">std</span>::sort(e+<span class="number">1</span>,e+<span class="number">1</span>+ECnt);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=ECnt;++i)&#123;x=find(e[i].u),y=find(e[i].v);<span class="keyword">if</span>(x!=y)fa[x]=y,ans+=e[i].w;&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)ans+=(u[i]-t[i])*(t[i]+u[i]<span class="number">-1</span>)*f[i]/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)fa[i]=i,t[i]=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)u[i]=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)f[i]=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> str[small];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(i+<span class="number">1</span>);j&lt;=n;++j)</span><br><span class="line"><span class="keyword">if</span>(str[j]==<span class="string">'Y'</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans+=calc(i,j);</span><br><span class="line">lxl x=find(i),y=find(j);</span><br><span class="line"><span class="keyword">if</span>(x!=y)fa[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> e[++ECnt]=(_Edge)&#123;i,j,calc(i,j)&#125;;</span><br><span class="line">&#125;</span><br><span class="line">c=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=ECnt;++i)e[i].w+=(t[e[i].u]+t[e[i].v])*c;</span><br><span class="line">kruskal();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次的确是先开T1了,不过求最大团是个典型的np问题不知道怎么做,于是想了个又假又难写的缩点后大力分类讨论模拟,写了200多行,浪费了一个多小时时间来调试,最后写了个二分最大团大小然后搜索剪枝的暴力,正解其实就是搜索但是写得不是很好只拿了20.</p><p>问题就在于经常想出假做法还不能快速地hack掉自己,浪费掉一次写代码和调试的时间,应该在写之前就造一些数据来手推,而不是写完了再出数据hack,有时候hack掉的不是代码中的小错误而是整个解法.</p><p>开考2个小时的时候写的T2,很快发现在后缀情况下存在区间加和区间最值的模型,打了个线段树,稍微调试了一下就过了大样例.</p><p>不过只拿了90分,原因是处理不选择前缀时,我是在循环前进行了一次询问,后来在调试时发现得到询问值之后更新答案的方式有问题,就只在循环里改了,循环前的一次询问忘了改,修改代码的时候还是得注意点.</p><p>做T3时时间剩一个小时左右,觉得可以先做一棵最小生成树然后搜索出操作序列,最优性的问题剪枝也非常好剪,或者直接模拟退火出操作序列,考虑$n$很小效率上应该差距不大.</p><p>但是其实先做最小生成树是假的因为前面的连边对后来的操作序列有影响,不过数据水得可以这都没卡,场上有模拟退火出操作序列拿70的.</p><p>最后几分钟发现在剪枝的时候有一句代码写错了,用编辑器回溯代码时不小心回溯过头了没发现过来,回溯到了另外一个打错的版本,于是爆零了,在优化代码时记得把之前的存一份.</p><p><a href="https://www.lemir3.red/categories/%E6%80%BB%E7%BB%93/">比赛总结</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:$P \neq NP$&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.lemir3.red/categories/总结/"/>
    
    
    <category term="总结" scheme="https://www.lemir3.red/tags/总结/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」CF1096F Inversion Expectation</title>
    <link href="https://www.lemir3.red/2020/10/12/jie-ti-bao-gao-cf1096f-inversion-expectation/"/>
    <id>https://www.lemir3.red/2020/10/12/jie-ti-bao-gao-cf1096f-inversion-expectation/</id>
    <published>2020-10-12T12:25:04.000Z</published>
    <updated>2020-10-12T12:35:10.609Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:考虑随机序列中逆序对的贡献方式</p><a id="more"></a><h1 id="CF1096F-Inversion-Expectation"><a href="#CF1096F-Inversion-Expectation" class="headerlink" title="CF1096F Inversion Expectation"></a>CF1096F Inversion Expectation</h1><p><a href="http://codeforces.com/problemset/problem/1096/F" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>先考虑序列中原有的数的逆序对个数,这一部分是一定得算进期望.</p><p>然后是随机出现的数之间的逆序对个数,对于这些数,相当于随机一个排列,求其中的逆序对个数,那么对于一个数对$( a , b )$,因为是一个排列,所以一定有$a &lt; b$或者$a &gt; b$,它们产生逆序对关系的概率为大的一个在小的一个前面的概率,这个概率无疑是$\frac{1}{2}$,那么对期望的贡献为$\frac{1}{2} \times 1 = \frac{1}{2}$.</p><p>设随机出现的数个数为$x$,这一部分的期望为$\frac{x \cdot (x-1)}{4}$.</p><p>最后是随机出现的数对原有的数产生的逆序对的个数的期望,可以前缀和处理出随机出现的数中比一个原有的数小的数的数目和这个原有位置之后有多少位置是随机的,设这两个数为$numsuf$和$suf$,那么这种情况对期望的贡献是$\frac{numsuf}{x}\times suf$,前面出现比原有的数大的数同理.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x) </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">200010</span>,p=<span class="number">998244353</span>;</span><br><span class="line">lxl n,sum,x;</span><br><span class="line">lxl ard[big],a[big],t[big],b[big],pre[big],suf[big],prenum[big],sufnum[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl x,lxl k)</span></span>&#123;<span class="keyword">for</span>(;x&lt;big;x+=lowbit(x))t[x]+=k;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">query</span><span class="params">(lxl x)</span></span>&#123;<span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;<span class="keyword">for</span>(;x;x-=lowbit(x))sum+=t[x];<span class="keyword">return</span> sum;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPow</span><span class="params">(lxl a,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;a=a*a%p,b&gt;&gt;=<span class="number">1</span>)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a%p);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">origin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(b[<span class="number">0</span>]);i;--i)</span><br><span class="line">&#123;</span><br><span class="line">sum=(sum+query(b[i]<span class="number">-1</span>))%p;</span><br><span class="line">modify(b[i],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++prenum[i],++sufnum[i],++i)</span><br><span class="line">&#123;</span><br><span class="line">a[i]=read();</span><br><span class="line"><span class="keyword">if</span>(~a[i])ard[i]=<span class="literal">true</span>,--prenum[a[i]],--sufnum[a[i]],b[++b[<span class="number">0</span>]]=a[i];</span><br><span class="line"><span class="keyword">else</span> ++x,pre[i]=suf[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,origin()%p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum=(sum+<span class="number">2</span>*x*origin()%p)%p,sum=(sum+(x*x*(x<span class="number">-1</span>)/<span class="number">2</span>)%p)%p;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)pre[i]+=pre[i<span class="number">-1</span>],prenum[i]+=prenum[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n);i;--i)suf[i]+=suf[i+<span class="number">1</span>],sufnum[i]+=sufnum[i+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line"><span class="keyword">if</span>(ard[i])</span><br><span class="line">sum=(sum+<span class="number">2</span>*pre[i]*sufnum[a[i]]%p)%p,</span><br><span class="line">sum=(sum+<span class="number">2</span>*suf[i]*prenum[a[i]]%p)%p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sum*FastPow(<span class="number">2</span>*x,p<span class="number">-2</span>)%p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:考虑随机序列中逆序对的贡献方式&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-概率期望" scheme="https://www.lemir3.red/categories/数学/数学-概率期望/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="概率期望" scheme="https://www.lemir3.red/tags/概率期望/"/>
    
  </entry>
  
  <entry>
    <title>「总结」10122020机房赛</title>
    <link href="https://www.lemir3.red/2020/10/12/zong-jie-10122020-ji-fang-sai/"/>
    <id>https://www.lemir3.red/2020/10/12/zong-jie-10122020-ji-fang-sai/</id>
    <published>2020-10-12T08:12:38.000Z</published>
    <updated>2020-10-13T07:39:45.155Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:荣获铁人三项</p><a id="more"></a><h1 id="10122020机房赛"><a href="#10122020机房赛" class="headerlink" title="10122020机房赛"></a>10122020机房赛</h1><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>因为不存在三线共点,所以不平行的三条直线就一定能形成三角形.</p><p>那么考虑三角形中的三条边,这三条边所在的直线可以按照斜率进行排序.</p><p>于是有个思路就是把直线的斜率全部算出来然后排序,枚举作为三角形三条线中中间的那一条线,然后处理出两边有多少斜率不等的直线组合成三角形即可.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">300010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line">lxl n,ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl a,b,c;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Line &amp;another)<span class="keyword">const</span>&#123;<span class="keyword">return</span> a*another.b&lt;b*another.a;&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> ==(<span class="keyword">const</span> _Line &amp;another)<span class="keyword">const</span>&#123;<span class="keyword">return</span> b*another.a==a*another.b;&#125;</span><br><span class="line">&#125;l[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;n;++i)</span><br><span class="line">l[i].a=read(),l[i].b=read(),l[i].c=read();</span><br><span class="line"><span class="built_in">std</span>::sort(l,l+n);</span><br><span class="line">lxl e(0),r(0);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(l[e]&lt;l[i])++e;</span><br><span class="line"><span class="keyword">while</span>(!(l[i]&lt;l[r])&amp;&amp;r&lt;n)++r;</span><br><span class="line">ans+=e*(n-r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h1><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>可以知道的是对于一个轨道,上面停的列车编号一定是递减的,也就是说一辆列车的前面不能有一辆编号比她大的车,因为前面的车一定先出队.</p><p>那么问题就转化为,求用多少个下降子序列可以覆盖原序列.</p><p>我们可以发现一个性质,这个数等于原序列的最长上升子序列长度.</p><p>证明貌似很麻烦,要考虑最长上升子序列的位置和大小关系,不过几组数据就看得到规律了.</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">108620</span>;</span><br><span class="line">lxl n,top,ans,best=INF,times=<span class="number">1</span>;</span><br><span class="line">lxl a[big],vis[big],end[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">random</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">return</span> rand()*rand()%x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=read();</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis),<span class="built_in">memset</span>(end,<span class="number">0</span>,<span class="keyword">sizeof</span> end);</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line">end[++top]=a[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl it=end[top];</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;=it)end[++top]=a[i];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">lxl l(<span class="number">1</span>),r(top),mid,pos;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">lxl mit=end[mid];</span><br><span class="line"><span class="keyword">if</span>(mit&gt;a[i])pos=mid,r=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">end[pos]=a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,top);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>先对所有边的$g$进行排序,这样就可以通过直接枚举边来获取$maxg$,对当前枚举到的边的$s$进行排序,求得最小生成树即为答案.</p><p>考虑优化,每次往集合里加入一条边,只用将它并入集合即可,具体来说就是维护一个$s$单增的临时数组,加入新边时进行插入.</p><p>可以发现当前的最小生成树只会由之前已经形成过最小生成树的边结合上新加入的边组成,这样每次做最小生成树时的边数量为$O(n)$,复杂度就可以做到$O(mn)$了.</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 4557430888798830399</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl small=<span class="number">410</span>,big=<span class="number">50010</span>;</span><br><span class="line">lxl n,m,have,s,g,ans=INF,cnt,maxg,maxs;</span><br><span class="line">lxl fa[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl u,v,s,g,used;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Edge &amp;another)<span class="keyword">const</span>&#123;<span class="keyword">return</span> g&lt;another.g;&#125;</span><br><span class="line">&#125;e[big],tmp[big],now[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl l(1),r(have),mid,pos(-1);</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tmp[mid].s&gt;e[x].s)pos=mid,r=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(~pos)</span><br><span class="line">&#123;</span><br><span class="line">++have;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(have);i&gt;=pos+<span class="number">1</span>;--i)tmp[i]=tmp[i<span class="number">-1</span>];</span><br><span class="line">tmp[pos]=e[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> tmp[++have]=e[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt=maxs=maxg=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)fa[i]=i;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=have;++i)now[i]=tmp[i],now[i].used=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">find</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">return</span> x==fa[x]?x:fa[x]=find(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read(),s=read(),g=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)e[i]=(_Edge)&#123;read(),read(),read()*s,read()*g&#125;;</span><br><span class="line"><span class="built_in">std</span>::sort(e+<span class="number">1</span>,e+<span class="number">1</span>+m);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">refresh(i),init();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=have;++j)</span><br><span class="line">&#123;</span><br><span class="line">lxl x=find(now[j].u),y=find(now[j].v);</span><br><span class="line"><span class="keyword">if</span>(x!=y)</span><br><span class="line">&#123;</span><br><span class="line">fa[x]=fa[y],now[j].used=<span class="literal">true</span>;</span><br><span class="line">++cnt,maxs=<span class="built_in">std</span>::max(maxs,now[j].s);</span><br><span class="line"><span class="keyword">if</span>(cnt==n<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">lxl <span class="title">nhave</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(<span class="number">1</span>);k&lt;=have;++k)</span><br><span class="line"><span class="keyword">if</span>(now[k].used)tmp[++nhave]=now[k];</span><br><span class="line">have=nhave;</span><br><span class="line">ans=<span class="built_in">std</span>::min(ans,maxs+e[i].g);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(ans==INF?<span class="string">"-1\n"</span>:<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次是有了签到题,然而按照原先的惯例乱序开题直接暴毙…</p><p>先开t2,然而没有去做转化,打了个二分优化转移的dp去做最小下降子序列覆盖了,最后十分钟才发现自己打挂了.</p><p>然后t3看$n$范围小感觉是个dp,三方复杂度预处理出路径信息然后合并子树那种,想了想不怎么会做于是打了个随机化,因为随机化打得不太熟导致各种re浪费大量时间.</p><p>最后t1没啥时间写了,打了个暴力,签到题没签成,大概有个正解的思路但那点时间实在实现不了了,虽说就算正解也不难写不过细节写法导致的精度卡得很恶心估计一时半会也搞不出来.</p><p>于是全部打铁荣获铁人三项.</p><p>以后是不要乱序开题了,后面要用到的写不熟的东西可能要调很久,而且发现自己只要代码打起来脑子就不想题了,还是得改改习惯.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:荣获铁人三项&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.lemir3.red/categories/总结/"/>
    
    
    <category term="总结" scheme="https://www.lemir3.red/tags/总结/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu2197【模板】nim游戏</title>
    <link href="https://www.lemir3.red/2020/10/11/jie-ti-bao-gao-luogu2197-mo-ban-nim-you-xi/"/>
    <id>https://www.lemir3.red/2020/10/11/jie-ti-bao-gao-luogu2197-mo-ban-nim-you-xi/</id>
    <published>2020-10-11T12:00:27.000Z</published>
    <updated>2020-10-11T12:51:31.944Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:博弈入门</p><a id="more"></a><h1 id="luogu2197-【模板】nim游戏"><a href="#luogu2197-【模板】nim游戏" class="headerlink" title="luogu2197 【模板】nim游戏"></a>luogu2197 【模板】nim游戏</h1><p><a href="https://www.luogu.com.cn/problem/P2197" target="_blank" rel="noopener">题面</a></p><p>现在才来学博弈,真是有够不学无术…</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先是结论,当$a_1 \oplus a_2 \oplus \cdots \oplus a_n \neq 0$时存在先手必胜策略,否则存在后手必胜策略.</p><p>证明还挺容易的,考虑一个必败局面$\{0,0,\cdots,0\}$,这时$a_1 \oplus a_2 \oplus \cdots \oplus a_n=0$,我们称这样的局面为$N$局面,$a_1 \oplus a_2 \oplus \cdots \oplus a_n=k$的局面为$P$局面,对于一个$P$局面,根据异或的性质,我们有$a_1 \oplus a_2 \oplus \cdots \oplus a_n \oplus 0 = k$等价于$a_1 \oplus a_2 \oplus \cdots \oplus a_n \oplus k = 0$那么局面变为$a_1 \oplus a_2 \oplus \cdots \oplus a_i \oplus k \oplus \cdots \oplus a_n=0$,也就是说,只要我们能找出一个$a_i \geq a_i \oplus k$,并拿走$a_i - ( a_i \oplus k )$个,就可以将一个$P$局面转化为$N$局面.</p><p>那么对于$N$局面,无论怎样的操作都会将其变为一个$P$局面,考虑反证,我们将$a_i$变为了$a_i’ ~ ( a_i’ &lt; a_i )$,而且有:</p><script type="math/tex; mode=display">a_1 \oplus a_2 \oplus \cdots \oplus a_i \oplus \cdots \oplus a_n=0\\a_1 \oplus a_2 \oplus \cdots \oplus a_i' \oplus \cdots \oplus a_n=0</script><p>两式异或,得到:</p><script type="math/tex; mode=display">a_i \oplus a_i' = 0\\\Rightarrow a_i = a_i'</script><p>与假设矛盾,故不成立.</p><p>所以说如果先手拿到了一个$P$局面,那么先手一定可以将其转化为$N$局面,也就是说,先手可以保证后手每次都拿到$N$局面,且后手仅能给先手$P$局面,考虑胜利的条件是让对方拿到一个$a_i$全为$0$的的$N$局面,而$a_i$的数量是每轮递减的,因此先手必胜.</p><p>若先手拿到了$N$局面,那么后手就一定可以拿到一个$P$局面,于是同理.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line">lxl T,n,ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T=read();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">n=read(),ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)ans^=read();</span><br><span class="line"><span class="built_in">printf</span>(!ans?<span class="string">"No\n"</span>:<span class="string">"Yes\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:博弈入门&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-博弈论" scheme="https://www.lemir3.red/categories/数学/数学-博弈论/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="博弈论" scheme="https://www.lemir3.red/tags/博弈论/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu3157[CQOI2011]动态逆序对</title>
    <link href="https://www.lemir3.red/2020/10/11/jie-ti-bao-gao-luogu3157-cqoi2011-dong-tai-ni-xu-dui/"/>
    <id>https://www.lemir3.red/2020/10/11/jie-ti-bao-gao-luogu3157-cqoi2011-dong-tai-ni-xu-dui/</id>
    <published>2020-10-11T09:29:51.000Z</published>
    <updated>2020-10-11T10:29:59.309Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:考虑逆序对的贡献方向进行两次三维偏序求解</p><a id="more"></a><h1 id="luogu3157-CQOI2011-动态逆序对"><a href="#luogu3157-CQOI2011-动态逆序对" class="headerlink" title="luogu3157[CQOI2011]动态逆序对"></a>luogu3157[CQOI2011]动态逆序对</h1><p><a href="https://www.luogu.com.cn/problem/P3157" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>又稳坐最差解第一页咯,但其实因为是常数大所以开O2可以快不少.</p><p>因为序列里的元素会被删掉,所以我们为每个元素指定一个与存活时长有关的权值,方便算偏序于是指定越先被删的元素权值越大.</p><p>考虑一个元素的逆序对的两种贡献方式,第一种是一个数在序列后面比它小的数,第二种是一个数在序列前比它大的数,这也顺便解释了为什么我们要指定先删的元素权值大,因为在考虑别的元素对一个元素的贡献时,这个”别的元素”一定得是还没删的.</p><p>因为算上了存活的权值这一维,我们求的是三维偏序的数量,那么每次就只能求得一个元素在一个方向上的逆序对.</p><p>于是cdq分治求解两个方向的偏序,设元素表示为$(a_i,b_i,c_i)$,分别为位置,值,指定的权值,第一种的偏序就为$a_i &gt; a_j,b_i &lt; b_j,c_i &gt; c_j$,第二种就为$a_i &lt; a_j,b_i &gt; b_j,c_i &gt; c_j$.</p><p>注意这样算的话因为指定权值相等的问题,没有被删除的数之间的逆序对会每次被全部计算,所以就计重了一次,开始时算出来之后减掉就好了.</p><p>然后是更新答案,我们把指定的权值定为$m-i+1$,在算偏序的时候把每个权值的答案记录下来,然后做一遍前缀和即可,由于权值小的元素后删,小的权值的答案一定对大的权值的答案有作用.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"assert.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl n,m,extnum;</span><br><span class="line">lxl t[big],ans[<span class="number">2</span>][big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Element</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">bool</span> id;</span><br><span class="line">lxl x,y,z;</span><br><span class="line">&#125;a[big];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;lxl,lxl&gt;<span class="built_in">map</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp3</span><span class="params">(_Element d1,_Element d2)</span></span>&#123;<span class="keyword">return</span> d1.y==d2.y?d1.z&lt;d2.z:d1.y&lt;d2.y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp4</span><span class="params">(_Element d1,_Element d2)</span></span>&#123;<span class="keyword">return</span> d1.y==d2.y?d1.z&gt;d2.z:d1.y&gt;d2.y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(_Element d1,_Element d2)</span></span>&#123;<span class="keyword">return</span> d1.x&gt;d2.x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(_Element d1,_Element d2)</span></span>&#123;<span class="keyword">return</span> d1.x&lt;d2.x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl x,lxl k)</span></span>&#123;<span class="keyword">for</span>(;x&lt;big;x+=lowbit(x))t[x]+=k;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">query</span><span class="params">(lxl x)</span></span>&#123;<span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;<span class="keyword">for</span>(;x;x-=lowbit(x))sum+=t[x];<span class="keyword">return</span> sum;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cdq</span><span class="params">(lxl l,lxl r,lxl sign)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">cdq(l,mid,sign),cdq(mid+<span class="number">1</span>,r,sign);</span><br><span class="line"><span class="keyword">if</span>(!sign)<span class="built_in">std</span>::sort(a+l,a+<span class="number">1</span>+mid,cmp3),<span class="built_in">std</span>::sort(a+<span class="number">1</span>+mid,a+r+<span class="number">1</span>,cmp3);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">std</span>::sort(a+l,a+<span class="number">1</span>+mid,cmp4),<span class="built_in">std</span>::sort(a+<span class="number">1</span>+mid,a+r+<span class="number">1</span>,cmp4);</span><br><span class="line">lxl i(mid+1),j(l);</span><br><span class="line"><span class="keyword">if</span>(!sign)</span><br><span class="line"><span class="keyword">while</span>(i&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(a[j].y&lt;=a[i].y&amp;&amp;j&lt;=mid)modify(a[j].z,<span class="number">1</span>),++j;</span><br><span class="line">ans[sign][a[i].z]+=query(a[i].z);</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(a[j].y&gt;=a[i].y&amp;&amp;j&lt;=mid)modify(a[j].z,<span class="number">1</span>),++j;</span><br><span class="line">ans[sign][a[i].z]+=query(a[i].z);</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(l);i&lt;j;++i)modify(a[i].z,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ext</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n);i;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].id)<span class="keyword">continue</span>;</span><br><span class="line">extnum+=query(a[i].y<span class="number">-1</span>);</span><br><span class="line">modify(a[i].y,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(t,<span class="number">0</span>,<span class="keyword">sizeof</span> t);</span><br><span class="line"><span class="comment">// debug(extnum);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("data.txt","r",stdin);</span></span><br><span class="line"><span class="comment">// freopen("test.out","w",stdout);</span></span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">a[i].x=i,a[i].y=read();</span><br><span class="line">assert(!<span class="built_in">map</span>[a[i].y]);</span><br><span class="line"><span class="built_in">map</span>[a[i].y]=i,a[i].z=<span class="number">1</span>,a[i].id=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl del=read(),whi=<span class="built_in">map</span>[del];</span><br><span class="line">a[whi].z+=m-i+<span class="number">1</span>,a[whi].id=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">ext();</span><br><span class="line"><span class="built_in">std</span>::sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp1),cdq(<span class="number">1</span>,n,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=m+<span class="number">1</span>;++i)ans[<span class="number">0</span>][i]+=ans[<span class="number">0</span>][i<span class="number">-1</span>];</span><br><span class="line"><span class="built_in">std</span>::sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp2),cdq(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=m+<span class="number">1</span>;++i)ans[<span class="number">1</span>][i]+=ans[<span class="number">1</span>][i<span class="number">-1</span>];</span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=n;++i)printf("%lld ",a[i].y);endl;</span></span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=n;++i)printf("%lld ",a[i].z);endl;</span></span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[<span class="number">0</span>][m-i+<span class="number">2</span>]+ans[<span class="number">1</span>][m-i+<span class="number">2</span>]-extnum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:考虑逆序对的贡献方向进行两次三维偏序求解&lt;/p&gt;</summary>
    
    
    
    <category term="分治" scheme="https://www.lemir3.red/categories/分治/"/>
    
    <category term="分治-cdq分治" scheme="https://www.lemir3.red/categories/分治/分治-cdq分治/"/>
    
    
    <category term="分治" scheme="https://www.lemir3.red/tags/分治/"/>
    
    <category term="cdq分治" scheme="https://www.lemir3.red/tags/cdq分治/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu4390[BOI2007]Mokia_摩基亚</title>
    <link href="https://www.lemir3.red/2020/10/09/jie-ti-bao-gao-luogu4390-boi2007-mokia-mo-ji-ya/"/>
    <id>https://www.lemir3.red/2020/10/09/jie-ti-bao-gao-luogu4390-boi2007-mokia-mo-ji-ya/</id>
    <published>2020-10-09T13:47:35.000Z</published>
    <updated>2020-10-09T13:53:51.804Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:添加时间维离线求三维偏序</p><a id="more"></a><h1 id="luogu4390-BOI2007-Mokia-摩基亚"><a href="#luogu4390-BOI2007-Mokia-摩基亚" class="headerlink" title="luogu4390[BOI2007]Mokia_摩基亚"></a>luogu4390[BOI2007]Mokia_摩基亚</h1><p><a href="https://www.luogu.com.cn/problem/P4390" target="_blank" rel="noopener">题面</a></p><p>巴尔干竟然有区域赛.</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>因为询问只会询问在询问之前插入的点,所以可以加一维时间,然后就可以直接做三维偏序了.</p><p>就将询问也虚构成点(容斥成4个),和点一起做cdq分治,判断一下是应该插入还是询问就好了.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">4000010</span>;</span><br><span class="line">lxl n,TimeCnt,opt,PCnt,ACnt,id;</span><br><span class="line">lxl ans[big],t[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl x,y,z,val,opt,id;</span><br><span class="line">&#125;p[big*<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(_Point d1,_Point d2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(d1.x==d2.x)</span><br><span class="line"><span class="keyword">if</span>(d1.y==d2.y)</span><br><span class="line"><span class="keyword">return</span> d1.z&lt;d2.z;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> d1.y&lt;d2.y;</span><br><span class="line"><span class="keyword">return</span> d1.x&lt;d2.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(_Point d1,_Point d2)</span></span>&#123;<span class="keyword">return</span> d1.y==d2.y?d1.z&lt;d2.z:d1.y&lt;d2.y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl x,lxl val)</span></span>&#123;<span class="keyword">for</span>(;x&lt;big;x+=lowbit(x))t[x]+=val;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">query</span><span class="params">(lxl x)</span></span>&#123;<span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;<span class="keyword">for</span>(;x;x-=lowbit(x))sum+=t[x];<span class="keyword">return</span> sum;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span><span class="params">(lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">cdq(l,mid),cdq(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">std</span>::sort(p+l,p+<span class="number">1</span>+mid,cmp2),<span class="built_in">std</span>::sort(p+mid+<span class="number">1</span>,p+<span class="number">1</span>+r,cmp2);</span><br><span class="line">lxl j=l,i=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;i&lt;=r;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(p[j].y&lt;=p[i].y&amp;&amp;j&lt;=mid)&#123;<span class="keyword">if</span>(p[j].opt)modify(p[j].z,p[j].val);++j;&#125;</span><br><span class="line"><span class="keyword">if</span>(!p[i].opt)ans[p[i].id]+=query(p[i].z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(l);i&lt;j;++i)<span class="keyword">if</span>(p[i].opt)modify(p[i].z,-p[i].val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("data.txt","r",stdin),freopen("test.out","w",stdout);</span></span><br><span class="line">n=read(),n=read();</span><br><span class="line">opt=read();</span><br><span class="line"><span class="keyword">while</span>(opt!=<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">++TimeCnt;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl x=read()+<span class="number">2</span>,y=read()+<span class="number">2</span>,a=read();</span><br><span class="line">p[++PCnt]=(_Point)&#123;x,y,TimeCnt,a,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">lxl x1=read()+<span class="number">2</span>,y1=read()+<span class="number">2</span>,x2=read()+<span class="number">2</span>,y2=read()+<span class="number">2</span>;</span><br><span class="line">p[++PCnt]=(_Point)&#123;x2,y2,TimeCnt,<span class="number">0</span>,<span class="number">0</span>,++id&#125;;</span><br><span class="line">p[++PCnt]=(_Point)&#123;x1<span class="number">-1</span>,y1<span class="number">-1</span>,TimeCnt,<span class="number">0</span>,<span class="number">0</span>,++id&#125;;</span><br><span class="line">p[++PCnt]=(_Point)&#123;x1<span class="number">-1</span>,y2,TimeCnt,<span class="number">0</span>,<span class="number">0</span>,++id&#125;;</span><br><span class="line">p[++PCnt]=(_Point)&#123;x2,y1<span class="number">-1</span>,TimeCnt,<span class="number">0</span>,<span class="number">0</span>,++id&#125;;</span><br><span class="line">&#125;</span><br><span class="line">opt=read();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::sort(p+<span class="number">1</span>,p+<span class="number">1</span>+PCnt,cmp1);</span><br><span class="line">cdq(<span class="number">1</span>,PCnt);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i+<span class="number">3</span>&lt;=id;i+=<span class="number">4</span>)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]+ans[i+<span class="number">1</span>]-ans[i+<span class="number">2</span>]-ans[i+<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:添加时间维离线求三维偏序&lt;/p&gt;</summary>
    
    
    
    <category term="分治" scheme="https://www.lemir3.red/categories/分治/"/>
    
    <category term="分治-cdq分治" scheme="https://www.lemir3.red/categories/分治/分治-cdq分治/"/>
    
    
    <category term="分治" scheme="https://www.lemir3.red/tags/分治/"/>
    
    <category term="cdq分治" scheme="https://www.lemir3.red/tags/cdq分治/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」CF600E Lomsat gelral</title>
    <link href="https://www.lemir3.red/2020/10/09/jie-ti-bao-gao-cf600e-lomsat-gelral/"/>
    <id>https://www.lemir3.red/2020/10/09/jie-ti-bao-gao-cf600e-lomsat-gelral/</id>
    <published>2020-10-09T12:17:43.000Z</published>
    <updated>2020-10-09T12:30:34.944Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: dsu on tree</p><a id="more"></a><h1 id="CF600E-Lomsat-gelral"><a href="#CF600E-Lomsat-gelral" class="headerlink" title="CF600E Lomsat gelral"></a>CF600E Lomsat gelral</h1><p><a href="http://codeforces.com/contest/600/problem/E" target="_blank" rel="noopener">题面</a></p><p>一道字符串题想了一天没搞出来然后李哥突然宣布以后每天晚上结束要给他报告做题情况…</p><p><del>于是赶紧开道水题撑撑场面.</del></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>网上冲浪 <del>乱翻别人博客</del> 的时候看到了这道题于是就拿来做了.</p><p>用到了一个叫dsu on tree的trick,大体来说就是利用轻重链剖分的<code>一个点到根节点的路径上轻边的数量不超过logn条</code>性质.</p><p>所以就可以处理一些没有修改而且仅询问子树,维护答案复杂度很低的题,对轻边直接进行暴力,重边也进行暴力,然后撤销轻边的答案.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl n,EdgeSize,Son,max,sum;</span><br><span class="line">lxl head[big],size[big],son[big],color[big],ans[big],cnt[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next;</span><br><span class="line">&#125;e[big&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v) EdgeAdd(u,v),EdgeAdd(v,u)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize]=(_Edge)&#123;v,head[u]&#125;;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">more</span><span class="params">(lxl u,lxl fa,lxl val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt[color[u]]+=val;</span><br><span class="line"><span class="keyword">if</span>(cnt[color[u]]&gt;max)max=cnt[color[u]],sum=color[u];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(cnt[color[u]]==max)sum+=color[u];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa||v==Son)<span class="keyword">continue</span>;</span><br><span class="line">more(v,u,val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(lxl u,lxl fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">size[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line">dfs1(v,u);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(size[son[u]]&lt;size[v])son[u]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(lxl u,lxl fa,lxl opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(v!=son[u])dfs2(v,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(son[u])dfs2(son[u],u,<span class="number">1</span>),Son=son[u];</span><br><span class="line">more(u,fa,<span class="number">1</span>),Son=<span class="number">0</span>;</span><br><span class="line">ans[u]=sum;</span><br><span class="line"><span class="keyword">if</span>(!opt)more(u,fa,<span class="number">-1</span>),sum=<span class="number">0</span>,max=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)color[i]=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read();</span><br><span class="line">add(u,v);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">0</span>),dfs2(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="built_in">printf</span>(<span class="string">"%lld "</span>,ans[i]);<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要: dsu on tree&lt;/p&gt;</summary>
    
    
    
    <category term="树链剖分" scheme="https://www.lemir3.red/categories/树链剖分/"/>
    
    <category term="其他" scheme="https://www.lemir3.red/categories/树链剖分/其他/"/>
    
    
    <category term="树链剖分" scheme="https://www.lemir3.red/tags/树链剖分/"/>
    
    <category term="其他" scheme="https://www.lemir3.red/tags/其他/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」CF547E Mike and Friends</title>
    <link href="https://www.lemir3.red/2020/10/06/jie-ti-bao-gao-cf547e-mike-and-friends/"/>
    <id>https://www.lemir3.red/2020/10/06/jie-ti-bao-gao-cf547e-mike-and-friends/</id>
    <published>2020-10-06T13:15:02.000Z</published>
    <updated>2020-10-06T13:41:44.925Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:height区间上二维数点</p><a id="more"></a><h1 id="CF547E-Mike-and-Friends"><a href="#CF547E-Mike-and-Friends" class="headerlink" title="CF547E Mike and Friends"></a>CF547E Mike and Friends</h1><p><a href="http://codeforces.com/problemset/problem/547/E" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>SA的做法,跑得挺慢的.</p><p>首先将所有串拼起来后缀排序,求出height数组.</p><p>然后我们发现答案为height数组中连续的一段中的一部分,于是写出暴力:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),q=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,tmp+<span class="number">1</span>);</span><br><span class="line">TmpLen=<span class="built_in">strlen</span>(tmp+<span class="number">1</span>);</span><br><span class="line"><span class="comment">// debug(TmpLen);</span></span><br><span class="line"><span class="keyword">if</span>(len)s[++len]=<span class="string">'#'</span>;</span><br><span class="line">++len,pla[i]=len,lag5fn[i]=TmpLen;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(len);j&lt;len+TmpLen;++j)s[j]=tmp[j-len+<span class="number">1</span>],belong[j]=i;</span><br><span class="line">len+=TmpLen<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=len;++i)printf("%c",s[i]);endl;endl;</span></span><br><span class="line">SuffixSort();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>),j(<span class="number">0</span>);i&lt;=len;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j)--j;</span><br><span class="line"><span class="keyword">while</span>(s[i+j]==s[sa[rank[i]<span class="number">-1</span>]+j])++j;</span><br><span class="line">height[rank[i]]=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=len;++i)debug(sa[i]);endl;</span></span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=len;++i)debug(rank[i]);endl;</span></span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=len;++i)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// debug(height[i]);</span></span><br><span class="line"><span class="comment">// for(R int j(sa[i]);j&lt;=len;++j)printf("%c",s[j]);</span></span><br><span class="line"><span class="comment">// endl;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=q;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl l=read(),r=read(),x=read();</span><br><span class="line">lxl tmp=rank[pla[x]],ans(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// debug(tmp);</span></span><br><span class="line"><span class="comment">// debug(lag5fn[x]);</span></span><br><span class="line">lxl stmp=tmp+<span class="number">1</span>,ntmp=tmp;</span><br><span class="line"><span class="keyword">while</span>(height[stmp]&gt;=lag5fn[x])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(belong[sa[stmp]]&gt;=l&amp;&amp;belong[sa[stmp]]&lt;=r)++ans;</span><br><span class="line">++stmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// if(height[tmp]&lt;lag5fn[x])&#123;if(belong[sa[tmp]]&gt;=l&amp;&amp;belong[sa[tmp]]&lt;=r)++ans;&#125;</span></span><br><span class="line"><span class="comment">// else</span></span><br><span class="line"><span class="keyword">while</span>(height[ntmp]&gt;=lag5fn[x])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(belong[sa[ntmp]]&gt;=l&amp;&amp;belong[sa[ntmp]]&lt;=r)++ans;</span><br><span class="line">--ntmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(belong[sa[ntmp]]&gt;=l&amp;&amp;belong[sa[ntmp]]&lt;=r)++ans;</span><br><span class="line"><span class="comment">// debug(ntmp),debug(stmp);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很快就能发现,如果我们找出了答案的贡献区间$[x,y]$,那么对答案的实际贡献为原串位置在$[l,r]$中的点的个数,这是一个典序的二维数点问题.</p><p>那么首要问题成为了如何快速求出答案的贡献区间,考虑这一段区间的性质,查询的串的长度作为这个区间的极长最小值(除第一位),换句话说,以查询串长度作为最小值的包含排序后这个串的位置的极长区间即为贡献的区间,但是因为查询串的长度不一定出现在height序列中,所以求的时候注意使用不等式.</p><p>笛卡尔树就能实现这个操作,因为维护了区间的极长最值信息,找到笛卡尔树上排序后查询串位置的叶子节点,从这个节点上跳就能找到需要的区间,但是我数据结构能力实在太差没调出来…</p><p>也可以直接在排序后查询串位置的两边二分出需要的区间,用st表取最值即可,不过细节很恶心,还要特判查询串在height序列中刚好是一些相同前缀的后缀中的第一个的情况.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">500010</span>;</span><br><span class="line">lxl n,q,m=<span class="number">100</span>,len,TmpLen,NodeCnt,root,AskCnt,now=<span class="number">1</span>;</span><br><span class="line">lxl suf[big],tp[big],rank[big],sa[big],height[big],pla[big],belong[big],lag5fn[big];</span><br><span class="line">lxl t[big],ans[big],st[<span class="number">21</span>][big],lg[big];</span><br><span class="line"><span class="keyword">char</span> s[big],tmp[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl x,y;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Point &amp;another)<span class="keyword">const</span>&#123;<span class="keyword">return</span> x&lt;another.x;&#125;</span><br><span class="line">&#125;str[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Ask</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl x,y,id,opt;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Ask &amp;another)<span class="keyword">const</span>&#123;<span class="keyword">return</span> x&lt;another.x;&#125;</span><br><span class="line">&#125;ask[big&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl x,lxl k)</span></span>&#123;<span class="keyword">for</span>(;x&lt;=big;x+=lowbit(x))t[x]+=k;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">query</span><span class="params">(lxl x)</span></span>&#123;<span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;<span class="keyword">for</span>(;x;x-=lowbit(x))sum+=t[x];<span class="keyword">return</span> sum;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">QSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;=m;++i)suf[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=len;++i)++suf[rank[i]];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)suf[i]+=suf[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(len);i;--i)sa[suf[rank[tp[i]]]--]=tp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">SuffixSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=len;++i)rank[i]=s[i]-<span class="string">'#'</span>+<span class="number">1</span>,tp[i]=i;</span><br><span class="line">QSort();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> w(<span class="number">1</span>),p(<span class="number">0</span>);p&lt;len;w&lt;&lt;=<span class="number">1</span>,m=p)</span><br><span class="line">&#123;</span><br><span class="line">p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=w;++i)tp[++p]=len-w+i;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=len;++i)<span class="keyword">if</span>(sa[i]&gt;w)tp[++p]=sa[i]-w;</span><br><span class="line">QSort(),<span class="built_in">std</span>::swap(tp,rank);</span><br><span class="line">rank[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=len;++i)</span><br><span class="line">rank[sa[i]]=(tp[sa[i]]==tp[sa[i<span class="number">-1</span>]]&amp;&amp;tp[sa[i]+w]==tp[sa[i<span class="number">-1</span>]+w])?p:++p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> better(x,y) (height[x]&lt;height[y])</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">BuildST</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lg[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=len;lg[i]=lg[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>,st[<span class="number">0</span>][i]=i,++i);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=<span class="number">20</span>;++j)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=len;++i)</span><br><span class="line">st[j][i]=better(st[j<span class="number">-1</span>][i],st[j<span class="number">-1</span>][i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))])?st[j<span class="number">-1</span>][i]:st[j<span class="number">-1</span>][i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">GetMin</span><span class="params">(lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl k=lg[r-l+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> better(st[k][l],st[k][r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>])?st[k][l]:st[k][r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("data.txt","r",stdin);</span></span><br><span class="line">n=read(),q=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,tmp+<span class="number">1</span>);</span><br><span class="line">TmpLen=<span class="built_in">strlen</span>(tmp+<span class="number">1</span>);</span><br><span class="line"><span class="comment">// debug(TmpLen);</span></span><br><span class="line"><span class="keyword">if</span>(len)s[++len]=<span class="string">'#'</span>;</span><br><span class="line">++len,pla[i]=len,lag5fn[i]=TmpLen;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(len);j&lt;len+TmpLen;++j)s[j]=tmp[j-len+<span class="number">1</span>],belong[j]=i;</span><br><span class="line">len+=TmpLen<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=len;++i)printf("%c",s[i]);endl;endl;</span></span><br><span class="line">SuffixSort();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>),j(<span class="number">0</span>);i&lt;=len;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j)--j;</span><br><span class="line"><span class="keyword">while</span>(s[i+j]==s[sa[rank[i]<span class="number">-1</span>]+j])++j;</span><br><span class="line">height[rank[i]]=j;</span><br><span class="line">&#125;</span><br><span class="line">BuildST();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=len;++i)str[i]=&#123;i+<span class="number">1</span>,belong[sa[i]]+<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=q;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl l=read()+<span class="number">1</span>,r=read()+<span class="number">1</span>,x=read();</span><br><span class="line">lxl tmp=rank[pla[x]],yak7=lag5fn[x];</span><br><span class="line">lxl le=tmp,ri=len,mid,left,right=tmp,pos;</span><br><span class="line"><span class="comment">// debug(tmp),debug(yak7),debug(height[tmp]);</span></span><br><span class="line"><span class="keyword">if</span>(height[tmp]&lt;yak7)le=pos=tmp+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> le=right=pos=tmp;</span><br><span class="line"><span class="keyword">while</span>(le&lt;=ri)</span><br><span class="line">&#123;</span><br><span class="line">mid=(le+ri)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="comment">// debug(mid),debug(height[GetMin(pos,mid)]);</span></span><br><span class="line"><span class="keyword">if</span>(height[GetMin(pos,mid)]&gt;=yak7)le=mid+<span class="number">1</span>,right=mid;</span><br><span class="line"><span class="keyword">else</span> ri=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(height[tmp]&lt;yak7)left=tmp;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">le=<span class="number">1</span>,ri=tmp;</span><br><span class="line"><span class="keyword">while</span>(le&lt;=ri)</span><br><span class="line">&#123;</span><br><span class="line">mid=(le+ri)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(height[GetMin(mid,tmp)]&gt;=yak7)ri=mid<span class="number">-1</span>,left=mid;</span><br><span class="line"><span class="keyword">else</span> le=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">--left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// debug(left),debug(right);</span></span><br><span class="line">++left,++right;</span><br><span class="line">ask[++AskCnt]=(_Ask)&#123;right,r,i,<span class="number">1</span>&#125;;</span><br><span class="line">ask[++AskCnt]=(_Ask)&#123;left<span class="number">-1</span>,l<span class="number">-1</span>,i,<span class="number">1</span>&#125;;</span><br><span class="line">ask[++AskCnt]=(_Ask)&#123;left<span class="number">-1</span>,r,i,<span class="number">-1</span>&#125;;</span><br><span class="line">ask[++AskCnt]=(_Ask)&#123;right,l<span class="number">-1</span>,i,<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::sort(ask+<span class="number">1</span>,ask+<span class="number">1</span>+AskCnt),<span class="built_in">std</span>::sort(str+<span class="number">1</span>,str+<span class="number">1</span>+len);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=AskCnt;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(now&lt;=len&amp;&amp;str[now].x&lt;=ask[i].x)modify(str[now].y,<span class="number">1</span>),++now;</span><br><span class="line">ans[ask[i].id]+=query(ask[i].y)*ask[i].opt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=q;++i)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 1</span></span><br><span class="line"><span class="comment">a</span></span><br><span class="line"><span class="comment">abab</span></span><br><span class="line"><span class="comment">ab</span></span><br><span class="line"><span class="comment">ababab</span></span><br><span class="line"><span class="comment">b</span></span><br><span class="line"><span class="comment">1 5 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5 1</span></span><br><span class="line"><span class="comment">a</span></span><br><span class="line"><span class="comment">ab</span></span><br><span class="line"><span class="comment">abab</span></span><br><span class="line"><span class="comment">ababab</span></span><br><span class="line"><span class="comment">b</span></span><br><span class="line"><span class="comment">1 5 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:height区间上二维数点&lt;/p&gt;</summary>
    
    
    
    <category term="字符串" scheme="https://www.lemir3.red/categories/字符串/"/>
    
    <category term="字符串-后缀数组" scheme="https://www.lemir3.red/categories/字符串/字符串-后缀数组/"/>
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/字符串/字符串-后缀数组/数据结构/"/>
    
    <category term="数据结构-树状数组" scheme="https://www.lemir3.red/categories/字符串/字符串-后缀数组/数据结构/数据结构-树状数组/"/>
    
    <category term="其他" scheme="https://www.lemir3.red/categories/字符串/字符串-后缀数组/数据结构/数据结构-树状数组/其他/"/>
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="字符串" scheme="https://www.lemir3.red/tags/字符串/"/>
    
    <category term="其他" scheme="https://www.lemir3.red/tags/其他/"/>
    
    <category term="后缀数组" scheme="https://www.lemir3.red/tags/后缀数组/"/>
    
    <category term="树状数组" scheme="https://www.lemir3.red/tags/树状数组/"/>
    
  </entry>
  
</feed>
