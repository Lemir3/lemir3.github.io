<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lemir3&#39;s blog</title>
  
  
  <link href="https://www.lemir3.red/atom.xml" rel="self"/>
  
  <link href="https://www.lemir3.red/"/>
  <updated>2020-10-14T11:00:56.401Z</updated>
  <id>https://www.lemir3.red/</id>
  
  <author>
    <name>lemir3</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「解法报告」luogu2391白雪皑皑</title>
    <link href="https://www.lemir3.red/2020/10/14/jie-fa-bao-gao-luogu2391-bai-xue-ai-ai/"/>
    <id>https://www.lemir3.red/2020/10/14/jie-fa-bao-gao-luogu2391-bai-xue-ai-ai/</id>
    <published>2020-10-14T10:57:59.000Z</published>
    <updated>2020-10-14T11:00:56.401Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:倒序处理跳过无用区间</p><a id="more"></a><h1 id="luogu2391白雪皑皑"><a href="#luogu2391白雪皑皑" class="headerlink" title="luogu2391白雪皑皑"></a>luogu2391白雪皑皑</h1><p><a href="https://www.luogu.com.cn/problem/P2391" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>因为只用询问最后一次,所以直接倒序处理即可,让一个位置覆盖后直接跳过.</p><p>因为跳过的是一个区间,所以在每个点上记录跳到哪里即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">1000010</span>,large=<span class="number">10000010</span>;</span><br><span class="line">lxl n,m,p,q,sum,top;</span><br><span class="line">lxl link[big],color[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Modify</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl l,r;</span><br><span class="line">&#125;mod[large];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">find</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">return</span> x==link[x]?x:link[x]=find(link[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sum=n=read(),m=read();</span><br><span class="line">p=read(),q=read();</span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=n+1;++i)link[i]=i;</span></span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl l=(i*p+q)%n+<span class="number">1</span>,r=(i*q+p)%n+<span class="number">1</span>;</span><br><span class="line"><span class="comment">// lxl l=read(),r=read();</span></span><br><span class="line"><span class="keyword">if</span>(l&gt;r)<span class="built_in">std</span>::swap(l,r);</span><br><span class="line">mod[i]=(_Modify)&#123;l,r&#125;;</span><br><span class="line"><span class="comment">// debug(l),debug(r),endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(sum&amp;&amp;m)</span><br><span class="line">&#123;</span><br><span class="line">lxl nl=mod[m].l,nr=mod[m].r,nc=m--;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(nl);i&lt;=nr;++i)</span><br><span class="line"><span class="keyword">if</span>(!color[i])color[i]=nc,link[i]=nr,--sum;</span><br><span class="line"><span class="keyword">else</span> i=link[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,color[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:倒序处理跳过无用区间&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://www.lemir3.red/categories/其他/"/>
    
    
    <category term="其他" scheme="https://www.lemir3.red/tags/其他/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu2408不同子串个数</title>
    <link href="https://www.lemir3.red/2020/10/13/jie-ti-bao-gao-luogu2408-bu-tong-zi-chuan-ge-shu/"/>
    <id>https://www.lemir3.red/2020/10/13/jie-ti-bao-gao-luogu2408-bu-tong-zi-chuan-ge-shu/</id>
    <published>2020-10-13T09:49:53.000Z</published>
    <updated>2020-10-14T00:14:28.533Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:SA板题</p><a id="more"></a><h1 id="luogu2408不同子串个数"><a href="#luogu2408不同子串个数" class="headerlink" title="luogu2408不同子串个数"></a>luogu2408不同子串个数</h1><p><a href="https://www.luogu.com.cn/problem/P2408" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>就一个板题没啥好说的…</p><p>因为用height可以求出后缀排序后相邻两串的lcp,即为重复的子串,减掉就好了.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl n,m=<span class="number">100</span>,ans;</span><br><span class="line">lxl rank[big],sa[big],tp[big],suf[big],pla[big],height[big];</span><br><span class="line"><span class="keyword">char</span> s[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">QSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;=m;++i)suf[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)++suf[rank[i]];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)suf[i]+=suf[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n);i;--i)sa[suf[rank[tp[i]]]--]=tp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">SuffixSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)rank[i]=s[i]-<span class="string">'#'</span>,tp[i]=i;</span><br><span class="line">QSort();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> w(<span class="number">1</span>),p(<span class="number">0</span>);p&lt;n;m=p,w&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=w;++i)tp[++p]=n-w+i;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="keyword">if</span>(sa[i]&gt;w)tp[++p]=sa[i]-w;</span><br><span class="line">QSort();</span><br><span class="line"><span class="built_in">std</span>::swap(tp,rank);</span><br><span class="line">rank[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=n;++i)</span><br><span class="line">rank[sa[i]]=(tp[sa[i]]==tp[sa[i<span class="number">-1</span>]]&amp;&amp;tp[sa[i]+w]==tp[sa[i<span class="number">-1</span>]+w])?p:++p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read();<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)pla[i]=i;</span><br><span class="line">SuffixSort();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>),j(<span class="number">0</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j)--j;</span><br><span class="line"><span class="keyword">while</span>(s[i+j]==s[sa[rank[i]<span class="number">-1</span>]+j])++j;</span><br><span class="line">height[rank[i]]=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)ans+=n-pla[sa[i]]+<span class="number">1</span>-height[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:SA板题&lt;/p&gt;</summary>
    
    
    
    <category term="字符串" scheme="https://www.lemir3.red/categories/字符串/"/>
    
    <category term="字符串-后缀数组" scheme="https://www.lemir3.red/categories/字符串/字符串-后缀数组/"/>
    
    
    <category term="字符串" scheme="https://www.lemir3.red/tags/字符串/"/>
    
    <category term="后缀数组" scheme="https://www.lemir3.red/tags/后缀数组/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu4051[JSOI2007]字符加密</title>
    <link href="https://www.lemir3.red/2020/10/13/jie-ti-bao-gao-luogu4051-jsoi2007-zi-fu-jia-mi/"/>
    <id>https://www.lemir3.red/2020/10/13/jie-ti-bao-gao-luogu4051-jsoi2007-zi-fu-jia-mi/</id>
    <published>2020-10-13T09:23:23.000Z</published>
    <updated>2020-10-13T09:29:45.059Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:拆环为链后后缀排序</p><a id="more"></a><h1 id="luogu4051-JSOI2007-字符加密"><a href="#luogu4051-JSOI2007-字符加密" class="headerlink" title="luogu4051[JSOI2007]字符加密"></a>luogu4051[JSOI2007]字符加密</h1><p><a href="https://www.luogu.com.cn/problem/P4051" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目相当于是把一个环上的字符串拿来排序,那我们直接拆环为链,后缀排序即可.</p><p>然后后面长度不足以是一个原串的后缀忽略掉即可.</p><p>解释一下为什么是对的,因为按照字符串比较大小的方法,即使两个长度为原串的串后面接了一堆后缀,也不会影响排序的结果,结果仅与前面与原串长度相等的那一部分有关.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">200010</span>;</span><br><span class="line">lxl n,m=<span class="number">100</span>,out;</span><br><span class="line">lxl sa[big],suf[big],rank[big],tp[big],id[big];</span><br><span class="line"><span class="keyword">char</span> s[big],ans[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">QSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;=m;++i)suf[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)++suf[rank[i]];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)suf[i]+=suf[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n);i;--i)sa[suf[rank[tp[i]]]--]=tp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">SuffixSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)rank[i]=s[i]-<span class="string">'#'</span>,tp[i]=i;</span><br><span class="line">QSort();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> w(<span class="number">1</span>),p(<span class="number">0</span>);p&lt;n;m=p,w&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=w;++i)tp[++p]=n-w+i;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="keyword">if</span>(sa[i]&gt;w)tp[++p]=sa[i]-w;</span><br><span class="line">QSort();</span><br><span class="line"><span class="built_in">std</span>::swap(tp,rank);</span><br><span class="line">rank[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=n;++i)</span><br><span class="line">rank[sa[i]]=(tp[sa[i]]==tp[sa[i<span class="number">-1</span>]]&amp;&amp;tp[sa[i]+w]==tp[sa[i<span class="number">-1</span>]+w])?p:++p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)id[i]=i;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n+<span class="number">1</span>);i&lt;=n+n<span class="number">-1</span>;++i)s[i]=s[i-n];</span><br><span class="line">n=n+n<span class="number">-1</span>;</span><br><span class="line">SuffixSort();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!id[sa[i]])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(id[sa[i]]==<span class="number">1</span>)ans[++out]=s[(n+<span class="number">1</span>)/<span class="number">2</span>];</span><br><span class="line"><span class="keyword">else</span> ans[++out]=s[id[sa[i]]<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=out;++i)<span class="built_in">printf</span>(<span class="string">"%c"</span>,ans[i]);<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:拆环为链后后缀排序&lt;/p&gt;</summary>
    
    
    
    <category term="字符串" scheme="https://www.lemir3.red/categories/字符串/"/>
    
    <category term="字符串-后缀数组" scheme="https://www.lemir3.red/categories/字符串/字符串-后缀数组/"/>
    
    
    <category term="字符串" scheme="https://www.lemir3.red/tags/字符串/"/>
    
    <category term="后缀数组" scheme="https://www.lemir3.red/tags/后缀数组/"/>
    
  </entry>
  
  <entry>
    <title>「总结」10132020机房赛</title>
    <link href="https://www.lemir3.red/2020/10/13/zong-jie-10132020-ji-fang-sai/"/>
    <id>https://www.lemir3.red/2020/10/13/zong-jie-10132020-ji-fang-sai/</id>
    <published>2020-10-13T07:37:39.000Z</published>
    <updated>2020-10-13T09:31:13.569Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:$P \neq NP$</p><a id="more"></a><h1 id="10132020机房赛"><a href="#10132020机房赛" class="headerlink" title="10132020机房赛"></a>10132020机房赛</h1><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>把图划分为两部分,一部分是团,一部分是独立集,求方案数.</p><p>于是很好分析出来要求图中的最大团,因为最大团中的点不可能出现在独立集中.</p><p>可这问题不是个典型的NP吗…</p><p>于是正解是暴力划分…</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">1010</span>;</span><br><span class="line">lxl T,n,m,InCnt,OutCnt,ans;</span><br><span class="line">lxl edge[big][big],in[big],out[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==n+<span class="number">1</span>)&#123;ans+=InCnt&amp;&amp;OutCnt;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=OutCnt;++i)<span class="keyword">if</span>(edge[out[i]][x])<span class="keyword">goto</span> nout;</span><br><span class="line">&#123;</span><br><span class="line">out[++OutCnt]=x;</span><br><span class="line">dfs(x+<span class="number">1</span>);</span><br><span class="line">--OutCnt;</span><br><span class="line">&#125;</span><br><span class="line">nout:;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=InCnt;++i)<span class="keyword">if</span>(!edge[in[i]][x])<span class="keyword">goto</span> nin;</span><br><span class="line">&#123;</span><br><span class="line">in[++InCnt]=x;</span><br><span class="line">dfs(x+<span class="number">1</span>);</span><br><span class="line">--InCnt;</span><br><span class="line">&#125;</span><br><span class="line">nin:;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T=read();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(edge,<span class="literal">false</span>,<span class="keyword">sizeof</span> edge);</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read();</span><br><span class="line">edge[u][v]=edge[v][u]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>顺序枚举前缀的变化,发现每变化一个位置上的值,会对它前面位置的后缀和产生影响.</p><p>同时后缀的变化是要变到可能的最小值,而$B$为正,所以一定是找到最大的后缀和,然后变化这一段,因为可以不变,在结尾添加一个$0$.</p><p>然后线段树维护后缀和,每次区间修改,区间求最值即可.</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">1000010</span>;</span><br><span class="line">lxl n,NodeCnt,root,ans,sum,am,bm;</span><br><span class="line">lxl c[<span class="number">2</span>][big&lt;&lt;<span class="number">2</span>],max[big&lt;&lt;<span class="number">2</span>],a[big],suf[big],tag[big&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(lxl t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!tag[t])<span class="keyword">return</span>;</span><br><span class="line">max[c[<span class="number">0</span>][t]]+=tag[t],max[c[<span class="number">1</span>][t]]+=tag[t];</span><br><span class="line">tag[c[<span class="number">0</span>][t]]+=tag[t],tag[c[<span class="number">1</span>][t]]+=tag[t];</span><br><span class="line">tag[t]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(lxl t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(max[c[<span class="number">0</span>][t]]&gt;max[c[<span class="number">1</span>][t]])max[t]=max[c[<span class="number">0</span>][t]];</span><br><span class="line"><span class="keyword">else</span> max[t]=max[c[<span class="number">1</span>][t]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(lxl &amp;t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t=++NodeCnt;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;max[t]=suf[l];<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">build(c[<span class="number">0</span>][t],l,mid),build(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r);</span><br><span class="line">PushUp(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl y,lxl k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;tag[t]+=k,max[t]+=k;<span class="keyword">return</span>;&#125;</span><br><span class="line">PushDown(t);</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)modify(c[<span class="number">0</span>][t],l,mid,x,y,k);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid)modify(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y,k);</span><br><span class="line">PushUp(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">query</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)<span class="keyword">return</span> max[t];</span><br><span class="line">PushDown(t);</span><br><span class="line">lxl mid((l+r)&gt;&gt;1),ma(-INF);</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)ma=<span class="built_in">std</span>::max(ma,query(c[<span class="number">0</span>][t],l,mid,x,y));</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid)ma=<span class="built_in">std</span>::max(ma,query(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y));</span><br><span class="line"><span class="keyword">return</span> ma;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),am=read(),bm=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=read(),sum+=a[i];</span><br><span class="line">a[++n]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n);i;--i)suf[i]=suf[i+<span class="number">1</span>]+a[i];</span><br><span class="line">build(root,<span class="number">1</span>,n);</span><br><span class="line">lxl origin=query(root,<span class="number">1</span>,n,<span class="number">1</span>,n);</span><br><span class="line">ans=sum-origin+(origin*-bm);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">sum=sum-a[i]+(a[i]*-am);</span><br><span class="line">modify(root,<span class="number">1</span>,n,<span class="number">1</span>,i,(a[i]*-am)-a[i]);</span><br><span class="line">origin=query(root,<span class="number">1</span>,n,<span class="number">1</span>,n);</span><br><span class="line">ans=<span class="built_in">std</span>::max(ans,sum-origin+(origin*-bm));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>考虑把题目中的贡献转化为边权,做最小生成树.</p><p>只要保证联通即可,所以最优解一定是一颗树.</p><p>贡献1是很好处理的,可以直接赋,贡献2要考虑一个顺序的问题.</p><p>对于边$(x,y)$,它们一定会产生$( u_x - t_x ) \times t_y \times f_x + ( u_y - t_y ) \times t_x \times f_y$的贡献,如果是$x$后加人,贡献会增加$( u_x - t_x ) \times ( u_y - t_y ) \times f_x$的贡献,$y$后加人同理.</p><p>然后是每个点加人会有之前已经有的人产生的贡献,这个可以处理完生成树之后直接算.</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl small=<span class="number">51</span>,big=<span class="number">3010</span>;</span><br><span class="line">lxl n,ans,ECnt,c;</span><br><span class="line">lxl fa[small],t[small],u[small],f[small];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl u,v,w;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Edge &amp;another)<span class="keyword">const</span>&#123;<span class="keyword">return</span> w&lt;another.w;&#125;</span><br><span class="line">&#125;e[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">find</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">return</span> x==fa[x]?x:fa[x]=find(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">calc</span><span class="params">(lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl XFirst,YFirst,num1,num2;</span><br><span class="line">YFirst=(u[x]-t[x])*(u[y]-t[y])*f[x];</span><br><span class="line">XFirst=(u[x]-t[x])*(u[y]-t[y])*f[y];</span><br><span class="line">num1=(u[x]-t[x])*t[y]*f[x];</span><br><span class="line">num2=(u[y]-t[y])*t[x]*f[y];</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">std</span>::min(YFirst,XFirst)+num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl x,y;</span><br><span class="line"><span class="built_in">std</span>::sort(e+<span class="number">1</span>,e+<span class="number">1</span>+ECnt);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=ECnt;++i)&#123;x=find(e[i].u),y=find(e[i].v);<span class="keyword">if</span>(x!=y)fa[x]=y,ans+=e[i].w;&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)ans+=(u[i]-t[i])*(t[i]+u[i]<span class="number">-1</span>)*f[i]/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)fa[i]=i,t[i]=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)u[i]=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)f[i]=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> str[small];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(i+<span class="number">1</span>);j&lt;=n;++j)</span><br><span class="line"><span class="keyword">if</span>(str[j]==<span class="string">'Y'</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans+=calc(i,j);</span><br><span class="line">lxl x=find(i),y=find(j);</span><br><span class="line"><span class="keyword">if</span>(x!=y)fa[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> e[++ECnt]=(_Edge)&#123;i,j,calc(i,j)&#125;;</span><br><span class="line">&#125;</span><br><span class="line">c=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=ECnt;++i)e[i].w+=(t[e[i].u]+t[e[i].v])*c;</span><br><span class="line">kruskal();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次的确是先开T1了,不过求最大团是个典型的np问题不知道怎么做,于是想了个又假又难写的缩点后大力分类讨论模拟,写了200多行,浪费了一个多小时时间来调试,最后写了个二分最大团大小然后搜索剪枝的暴力,正解其实就是搜索但是写得不是很好只拿了20.</p><p>问题就在于经常想出假做法还不能快速地hack掉自己,浪费掉一次写代码和调试的时间,应该在写之前就造一些数据来手推,而不是写完了再出数据hack,有时候hack掉的不是代码中的小错误而是整个解法.</p><p>开考2个小时的时候写的T2,很快发现在后缀情况下存在区间加和区间最值的模型,打了个线段树,稍微调试了一下就过了大样例.</p><p>不过只拿了90分,原因是处理不选择前缀时,我是在循环前进行了一次询问,后来在调试时发现得到询问值之后更新答案的方式有问题,就只在循环里改了,循环前的一次询问忘了改,修改代码的时候还是得注意点.</p><p>做T3时时间剩一个小时左右,觉得可以先做一棵最小生成树然后搜索出操作序列,最优性的问题剪枝也非常好剪,或者直接模拟退火出操作序列,考虑$n$很小效率上应该差距不大.</p><p>但是其实先做最小生成树是假的因为前面的连边对后来的操作序列有影响,不过数据水得可以这都没卡,场上有模拟退火出操作序列拿70的.</p><p>最后几分钟发现在剪枝的时候有一句代码写错了,用编辑器回溯代码时不小心回溯过头了没发现过来,回溯到了另外一个打错的版本,于是爆零了,在优化代码时记得把之前的存一份.</p><p><a href="https://www.lemir3.red/categories/%E6%80%BB%E7%BB%93/">比赛总结</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:$P \neq NP$&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.lemir3.red/categories/总结/"/>
    
    
    <category term="总结" scheme="https://www.lemir3.red/tags/总结/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」CF1096F Inversion Expectation</title>
    <link href="https://www.lemir3.red/2020/10/12/jie-ti-bao-gao-cf1096f-inversion-expectation/"/>
    <id>https://www.lemir3.red/2020/10/12/jie-ti-bao-gao-cf1096f-inversion-expectation/</id>
    <published>2020-10-12T12:25:04.000Z</published>
    <updated>2020-10-12T12:35:10.609Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:考虑随机序列中逆序对的贡献方式</p><a id="more"></a><h1 id="CF1096F-Inversion-Expectation"><a href="#CF1096F-Inversion-Expectation" class="headerlink" title="CF1096F Inversion Expectation"></a>CF1096F Inversion Expectation</h1><p><a href="http://codeforces.com/problemset/problem/1096/F" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>先考虑序列中原有的数的逆序对个数,这一部分是一定得算进期望.</p><p>然后是随机出现的数之间的逆序对个数,对于这些数,相当于随机一个排列,求其中的逆序对个数,那么对于一个数对$( a , b )$,因为是一个排列,所以一定有$a &lt; b$或者$a &gt; b$,它们产生逆序对关系的概率为大的一个在小的一个前面的概率,这个概率无疑是$\frac{1}{2}$,那么对期望的贡献为$\frac{1}{2} \times 1 = \frac{1}{2}$.</p><p>设随机出现的数个数为$x$,这一部分的期望为$\frac{x \cdot (x-1)}{4}$.</p><p>最后是随机出现的数对原有的数产生的逆序对的个数的期望,可以前缀和处理出随机出现的数中比一个原有的数小的数的数目和这个原有位置之后有多少位置是随机的,设这两个数为$numsuf$和$suf$,那么这种情况对期望的贡献是$\frac{numsuf}{x}\times suf$,前面出现比原有的数大的数同理.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x) </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">200010</span>,p=<span class="number">998244353</span>;</span><br><span class="line">lxl n,sum,x;</span><br><span class="line">lxl ard[big],a[big],t[big],b[big],pre[big],suf[big],prenum[big],sufnum[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl x,lxl k)</span></span>&#123;<span class="keyword">for</span>(;x&lt;big;x+=lowbit(x))t[x]+=k;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">query</span><span class="params">(lxl x)</span></span>&#123;<span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;<span class="keyword">for</span>(;x;x-=lowbit(x))sum+=t[x];<span class="keyword">return</span> sum;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPow</span><span class="params">(lxl a,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;a=a*a%p,b&gt;&gt;=<span class="number">1</span>)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a%p);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">origin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(b[<span class="number">0</span>]);i;--i)</span><br><span class="line">&#123;</span><br><span class="line">sum=(sum+query(b[i]<span class="number">-1</span>))%p;</span><br><span class="line">modify(b[i],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++prenum[i],++sufnum[i],++i)</span><br><span class="line">&#123;</span><br><span class="line">a[i]=read();</span><br><span class="line"><span class="keyword">if</span>(~a[i])ard[i]=<span class="literal">true</span>,--prenum[a[i]],--sufnum[a[i]],b[++b[<span class="number">0</span>]]=a[i];</span><br><span class="line"><span class="keyword">else</span> ++x,pre[i]=suf[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,origin()%p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum=(sum+<span class="number">2</span>*x*origin()%p)%p,sum=(sum+(x*x*(x<span class="number">-1</span>)/<span class="number">2</span>)%p)%p;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)pre[i]+=pre[i<span class="number">-1</span>],prenum[i]+=prenum[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n);i;--i)suf[i]+=suf[i+<span class="number">1</span>],sufnum[i]+=sufnum[i+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line"><span class="keyword">if</span>(ard[i])</span><br><span class="line">sum=(sum+<span class="number">2</span>*pre[i]*sufnum[a[i]]%p)%p,</span><br><span class="line">sum=(sum+<span class="number">2</span>*suf[i]*prenum[a[i]]%p)%p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sum*FastPow(<span class="number">2</span>*x,p<span class="number">-2</span>)%p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:考虑随机序列中逆序对的贡献方式&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-概率期望" scheme="https://www.lemir3.red/categories/数学/数学-概率期望/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="概率期望" scheme="https://www.lemir3.red/tags/概率期望/"/>
    
  </entry>
  
  <entry>
    <title>「总结」10122020机房赛</title>
    <link href="https://www.lemir3.red/2020/10/12/zong-jie-10122020-ji-fang-sai/"/>
    <id>https://www.lemir3.red/2020/10/12/zong-jie-10122020-ji-fang-sai/</id>
    <published>2020-10-12T08:12:38.000Z</published>
    <updated>2020-10-13T07:39:45.155Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:荣获铁人三项</p><a id="more"></a><h1 id="10122020机房赛"><a href="#10122020机房赛" class="headerlink" title="10122020机房赛"></a>10122020机房赛</h1><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>因为不存在三线共点,所以不平行的三条直线就一定能形成三角形.</p><p>那么考虑三角形中的三条边,这三条边所在的直线可以按照斜率进行排序.</p><p>于是有个思路就是把直线的斜率全部算出来然后排序,枚举作为三角形三条线中中间的那一条线,然后处理出两边有多少斜率不等的直线组合成三角形即可.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">300010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line">lxl n,ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl a,b,c;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Line &amp;another)<span class="keyword">const</span>&#123;<span class="keyword">return</span> a*another.b&lt;b*another.a;&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> ==(<span class="keyword">const</span> _Line &amp;another)<span class="keyword">const</span>&#123;<span class="keyword">return</span> b*another.a==a*another.b;&#125;</span><br><span class="line">&#125;l[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;n;++i)</span><br><span class="line">l[i].a=read(),l[i].b=read(),l[i].c=read();</span><br><span class="line"><span class="built_in">std</span>::sort(l,l+n);</span><br><span class="line">lxl e(0),r(0);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(l[e]&lt;l[i])++e;</span><br><span class="line"><span class="keyword">while</span>(!(l[i]&lt;l[r])&amp;&amp;r&lt;n)++r;</span><br><span class="line">ans+=e*(n-r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h1><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>可以知道的是对于一个轨道,上面停的列车编号一定是递减的,也就是说一辆列车的前面不能有一辆编号比她大的车,因为前面的车一定先出队.</p><p>那么问题就转化为,求用多少个下降子序列可以覆盖原序列.</p><p>我们可以发现一个性质,这个数等于原序列的最长上升子序列长度.</p><p>证明貌似很麻烦,要考虑最长上升子序列的位置和大小关系,不过几组数据就看得到规律了.</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">108620</span>;</span><br><span class="line">lxl n,top,ans,best=INF,times=<span class="number">1</span>;</span><br><span class="line">lxl a[big],vis[big],end[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">random</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">return</span> rand()*rand()%x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=read();</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis),<span class="built_in">memset</span>(end,<span class="number">0</span>,<span class="keyword">sizeof</span> end);</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line">end[++top]=a[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl it=end[top];</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;=it)end[++top]=a[i];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">lxl l(<span class="number">1</span>),r(top),mid,pos;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">lxl mit=end[mid];</span><br><span class="line"><span class="keyword">if</span>(mit&gt;a[i])pos=mid,r=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">end[pos]=a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,top);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>先对所有边的$g$进行排序,这样就可以通过直接枚举边来获取$maxg$,对当前枚举到的边的$s$进行排序,求得最小生成树即为答案.</p><p>考虑优化,每次往集合里加入一条边,只用将它并入集合即可,具体来说就是维护一个$s$单增的临时数组,加入新边时进行插入.</p><p>可以发现当前的最小生成树只会由之前已经形成过最小生成树的边结合上新加入的边组成,这样每次做最小生成树时的边数量为$O(n)$,复杂度就可以做到$O(mn)$了.</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 4557430888798830399</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl small=<span class="number">410</span>,big=<span class="number">50010</span>;</span><br><span class="line">lxl n,m,have,s,g,ans=INF,cnt,maxg,maxs;</span><br><span class="line">lxl fa[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl u,v,s,g,used;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Edge &amp;another)<span class="keyword">const</span>&#123;<span class="keyword">return</span> g&lt;another.g;&#125;</span><br><span class="line">&#125;e[big],tmp[big],now[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl l(1),r(have),mid,pos(-1);</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tmp[mid].s&gt;e[x].s)pos=mid,r=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(~pos)</span><br><span class="line">&#123;</span><br><span class="line">++have;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(have);i&gt;=pos+<span class="number">1</span>;--i)tmp[i]=tmp[i<span class="number">-1</span>];</span><br><span class="line">tmp[pos]=e[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> tmp[++have]=e[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt=maxs=maxg=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)fa[i]=i;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=have;++i)now[i]=tmp[i],now[i].used=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">find</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">return</span> x==fa[x]?x:fa[x]=find(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read(),s=read(),g=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)e[i]=(_Edge)&#123;read(),read(),read()*s,read()*g&#125;;</span><br><span class="line"><span class="built_in">std</span>::sort(e+<span class="number">1</span>,e+<span class="number">1</span>+m);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">refresh(i),init();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=have;++j)</span><br><span class="line">&#123;</span><br><span class="line">lxl x=find(now[j].u),y=find(now[j].v);</span><br><span class="line"><span class="keyword">if</span>(x!=y)</span><br><span class="line">&#123;</span><br><span class="line">fa[x]=fa[y],now[j].used=<span class="literal">true</span>;</span><br><span class="line">++cnt,maxs=<span class="built_in">std</span>::max(maxs,now[j].s);</span><br><span class="line"><span class="keyword">if</span>(cnt==n<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">lxl <span class="title">nhave</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(<span class="number">1</span>);k&lt;=have;++k)</span><br><span class="line"><span class="keyword">if</span>(now[k].used)tmp[++nhave]=now[k];</span><br><span class="line">have=nhave;</span><br><span class="line">ans=<span class="built_in">std</span>::min(ans,maxs+e[i].g);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(ans==INF?<span class="string">"-1\n"</span>:<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次是有了签到题,然而按照原先的惯例乱序开题直接暴毙…</p><p>先开t2,然而没有去做转化,打了个二分优化转移的dp去做最小下降子序列覆盖了,最后十分钟才发现自己打挂了.</p><p>然后t3看$n$范围小感觉是个dp,三方复杂度预处理出路径信息然后合并子树那种,想了想不怎么会做于是打了个随机化,因为随机化打得不太熟导致各种re浪费大量时间.</p><p>最后t1没啥时间写了,打了个暴力,签到题没签成,大概有个正解的思路但那点时间实在实现不了了,虽说就算正解也不难写不过细节写法导致的精度卡得很恶心估计一时半会也搞不出来.</p><p>于是全部打铁荣获铁人三项.</p><p>以后是不要乱序开题了,后面要用到的写不熟的东西可能要调很久,而且发现自己只要代码打起来脑子就不想题了,还是得改改习惯.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:荣获铁人三项&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.lemir3.red/categories/总结/"/>
    
    
    <category term="总结" scheme="https://www.lemir3.red/tags/总结/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu2197【模板】nim游戏</title>
    <link href="https://www.lemir3.red/2020/10/11/jie-ti-bao-gao-luogu2197-mo-ban-nim-you-xi/"/>
    <id>https://www.lemir3.red/2020/10/11/jie-ti-bao-gao-luogu2197-mo-ban-nim-you-xi/</id>
    <published>2020-10-11T12:00:27.000Z</published>
    <updated>2020-10-11T12:51:31.944Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:博弈入门</p><a id="more"></a><h1 id="luogu2197-【模板】nim游戏"><a href="#luogu2197-【模板】nim游戏" class="headerlink" title="luogu2197 【模板】nim游戏"></a>luogu2197 【模板】nim游戏</h1><p><a href="https://www.luogu.com.cn/problem/P2197" target="_blank" rel="noopener">题面</a></p><p>现在才来学博弈,真是有够不学无术…</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先是结论,当$a_1 \oplus a_2 \oplus \cdots \oplus a_n \neq 0$时存在先手必胜策略,否则存在后手必胜策略.</p><p>证明还挺容易的,考虑一个必败局面$\{0,0,\cdots,0\}$,这时$a_1 \oplus a_2 \oplus \cdots \oplus a_n=0$,我们称这样的局面为$N$局面,$a_1 \oplus a_2 \oplus \cdots \oplus a_n=k$的局面为$P$局面,对于一个$P$局面,根据异或的性质,我们有$a_1 \oplus a_2 \oplus \cdots \oplus a_n \oplus 0 = k$等价于$a_1 \oplus a_2 \oplus \cdots \oplus a_n \oplus k = 0$那么局面变为$a_1 \oplus a_2 \oplus \cdots \oplus a_i \oplus k \oplus \cdots \oplus a_n=0$,也就是说,只要我们能找出一个$a_i \geq a_i \oplus k$,并拿走$a_i - ( a_i \oplus k )$个,就可以将一个$P$局面转化为$N$局面.</p><p>那么对于$N$局面,无论怎样的操作都会将其变为一个$P$局面,考虑反证,我们将$a_i$变为了$a_i’ ~ ( a_i’ &lt; a_i )$,而且有:</p><script type="math/tex; mode=display">a_1 \oplus a_2 \oplus \cdots \oplus a_i \oplus \cdots \oplus a_n=0\\a_1 \oplus a_2 \oplus \cdots \oplus a_i' \oplus \cdots \oplus a_n=0</script><p>两式异或,得到:</p><script type="math/tex; mode=display">a_i \oplus a_i' = 0\\\Rightarrow a_i = a_i'</script><p>与假设矛盾,故不成立.</p><p>所以说如果先手拿到了一个$P$局面,那么先手一定可以将其转化为$N$局面,也就是说,先手可以保证后手每次都拿到$N$局面,且后手仅能给先手$P$局面,考虑胜利的条件是让对方拿到一个$a_i$全为$0$的的$N$局面,而$a_i$的数量是每轮递减的,因此先手必胜.</p><p>若先手拿到了$N$局面,那么后手就一定可以拿到一个$P$局面,于是同理.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line">lxl T,n,ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T=read();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">n=read(),ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)ans^=read();</span><br><span class="line"><span class="built_in">printf</span>(!ans?<span class="string">"No\n"</span>:<span class="string">"Yes\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:博弈入门&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-博弈论" scheme="https://www.lemir3.red/categories/数学/数学-博弈论/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="博弈论" scheme="https://www.lemir3.red/tags/博弈论/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu3157[CQOI2011]动态逆序对</title>
    <link href="https://www.lemir3.red/2020/10/11/jie-ti-bao-gao-luogu3157-cqoi2011-dong-tai-ni-xu-dui/"/>
    <id>https://www.lemir3.red/2020/10/11/jie-ti-bao-gao-luogu3157-cqoi2011-dong-tai-ni-xu-dui/</id>
    <published>2020-10-11T09:29:51.000Z</published>
    <updated>2020-10-11T10:29:59.309Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:考虑逆序对的贡献方向进行两次三维偏序求解</p><a id="more"></a><h1 id="luogu3157-CQOI2011-动态逆序对"><a href="#luogu3157-CQOI2011-动态逆序对" class="headerlink" title="luogu3157[CQOI2011]动态逆序对"></a>luogu3157[CQOI2011]动态逆序对</h1><p><a href="https://www.luogu.com.cn/problem/P3157" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>又稳坐最差解第一页咯,但其实因为是常数大所以开O2可以快不少.</p><p>因为序列里的元素会被删掉,所以我们为每个元素指定一个与存活时长有关的权值,方便算偏序于是指定越先被删的元素权值越大.</p><p>考虑一个元素的逆序对的两种贡献方式,第一种是一个数在序列后面比它小的数,第二种是一个数在序列前比它大的数,这也顺便解释了为什么我们要指定先删的元素权值大,因为在考虑别的元素对一个元素的贡献时,这个”别的元素”一定得是还没删的.</p><p>因为算上了存活的权值这一维,我们求的是三维偏序的数量,那么每次就只能求得一个元素在一个方向上的逆序对.</p><p>于是cdq分治求解两个方向的偏序,设元素表示为$(a_i,b_i,c_i)$,分别为位置,值,指定的权值,第一种的偏序就为$a_i &gt; a_j,b_i &lt; b_j,c_i &gt; c_j$,第二种就为$a_i &lt; a_j,b_i &gt; b_j,c_i &gt; c_j$.</p><p>注意这样算的话因为指定权值相等的问题,没有被删除的数之间的逆序对会每次被全部计算,所以就计重了一次,开始时算出来之后减掉就好了.</p><p>然后是更新答案,我们把指定的权值定为$m-i+1$,在算偏序的时候把每个权值的答案记录下来,然后做一遍前缀和即可,由于权值小的元素后删,小的权值的答案一定对大的权值的答案有作用.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"assert.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl n,m,extnum;</span><br><span class="line">lxl t[big],ans[<span class="number">2</span>][big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Element</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">bool</span> id;</span><br><span class="line">lxl x,y,z;</span><br><span class="line">&#125;a[big];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;lxl,lxl&gt;<span class="built_in">map</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp3</span><span class="params">(_Element d1,_Element d2)</span></span>&#123;<span class="keyword">return</span> d1.y==d2.y?d1.z&lt;d2.z:d1.y&lt;d2.y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp4</span><span class="params">(_Element d1,_Element d2)</span></span>&#123;<span class="keyword">return</span> d1.y==d2.y?d1.z&gt;d2.z:d1.y&gt;d2.y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(_Element d1,_Element d2)</span></span>&#123;<span class="keyword">return</span> d1.x&gt;d2.x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(_Element d1,_Element d2)</span></span>&#123;<span class="keyword">return</span> d1.x&lt;d2.x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl x,lxl k)</span></span>&#123;<span class="keyword">for</span>(;x&lt;big;x+=lowbit(x))t[x]+=k;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">query</span><span class="params">(lxl x)</span></span>&#123;<span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;<span class="keyword">for</span>(;x;x-=lowbit(x))sum+=t[x];<span class="keyword">return</span> sum;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cdq</span><span class="params">(lxl l,lxl r,lxl sign)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">cdq(l,mid,sign),cdq(mid+<span class="number">1</span>,r,sign);</span><br><span class="line"><span class="keyword">if</span>(!sign)<span class="built_in">std</span>::sort(a+l,a+<span class="number">1</span>+mid,cmp3),<span class="built_in">std</span>::sort(a+<span class="number">1</span>+mid,a+r+<span class="number">1</span>,cmp3);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">std</span>::sort(a+l,a+<span class="number">1</span>+mid,cmp4),<span class="built_in">std</span>::sort(a+<span class="number">1</span>+mid,a+r+<span class="number">1</span>,cmp4);</span><br><span class="line">lxl i(mid+1),j(l);</span><br><span class="line"><span class="keyword">if</span>(!sign)</span><br><span class="line"><span class="keyword">while</span>(i&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(a[j].y&lt;=a[i].y&amp;&amp;j&lt;=mid)modify(a[j].z,<span class="number">1</span>),++j;</span><br><span class="line">ans[sign][a[i].z]+=query(a[i].z);</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(a[j].y&gt;=a[i].y&amp;&amp;j&lt;=mid)modify(a[j].z,<span class="number">1</span>),++j;</span><br><span class="line">ans[sign][a[i].z]+=query(a[i].z);</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(l);i&lt;j;++i)modify(a[i].z,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ext</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n);i;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].id)<span class="keyword">continue</span>;</span><br><span class="line">extnum+=query(a[i].y<span class="number">-1</span>);</span><br><span class="line">modify(a[i].y,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(t,<span class="number">0</span>,<span class="keyword">sizeof</span> t);</span><br><span class="line"><span class="comment">// debug(extnum);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("data.txt","r",stdin);</span></span><br><span class="line"><span class="comment">// freopen("test.out","w",stdout);</span></span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">a[i].x=i,a[i].y=read();</span><br><span class="line">assert(!<span class="built_in">map</span>[a[i].y]);</span><br><span class="line"><span class="built_in">map</span>[a[i].y]=i,a[i].z=<span class="number">1</span>,a[i].id=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl del=read(),whi=<span class="built_in">map</span>[del];</span><br><span class="line">a[whi].z+=m-i+<span class="number">1</span>,a[whi].id=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">ext();</span><br><span class="line"><span class="built_in">std</span>::sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp1),cdq(<span class="number">1</span>,n,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=m+<span class="number">1</span>;++i)ans[<span class="number">0</span>][i]+=ans[<span class="number">0</span>][i<span class="number">-1</span>];</span><br><span class="line"><span class="built_in">std</span>::sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp2),cdq(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=m+<span class="number">1</span>;++i)ans[<span class="number">1</span>][i]+=ans[<span class="number">1</span>][i<span class="number">-1</span>];</span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=n;++i)printf("%lld ",a[i].y);endl;</span></span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=n;++i)printf("%lld ",a[i].z);endl;</span></span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[<span class="number">0</span>][m-i+<span class="number">2</span>]+ans[<span class="number">1</span>][m-i+<span class="number">2</span>]-extnum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:考虑逆序对的贡献方向进行两次三维偏序求解&lt;/p&gt;</summary>
    
    
    
    <category term="分治" scheme="https://www.lemir3.red/categories/分治/"/>
    
    <category term="分治-cdq分治" scheme="https://www.lemir3.red/categories/分治/分治-cdq分治/"/>
    
    
    <category term="分治" scheme="https://www.lemir3.red/tags/分治/"/>
    
    <category term="cdq分治" scheme="https://www.lemir3.red/tags/cdq分治/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu4390[BOI2007]Mokia_摩基亚</title>
    <link href="https://www.lemir3.red/2020/10/09/jie-ti-bao-gao-luogu4390-boi2007-mokia-mo-ji-ya/"/>
    <id>https://www.lemir3.red/2020/10/09/jie-ti-bao-gao-luogu4390-boi2007-mokia-mo-ji-ya/</id>
    <published>2020-10-09T13:47:35.000Z</published>
    <updated>2020-10-09T13:53:51.804Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:添加时间维离线求三维偏序</p><a id="more"></a><h1 id="luogu4390-BOI2007-Mokia-摩基亚"><a href="#luogu4390-BOI2007-Mokia-摩基亚" class="headerlink" title="luogu4390[BOI2007]Mokia_摩基亚"></a>luogu4390[BOI2007]Mokia_摩基亚</h1><p><a href="https://www.luogu.com.cn/problem/P4390" target="_blank" rel="noopener">题面</a></p><p>巴尔干竟然有区域赛.</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>因为询问只会询问在询问之前插入的点,所以可以加一维时间,然后就可以直接做三维偏序了.</p><p>就将询问也虚构成点(容斥成4个),和点一起做cdq分治,判断一下是应该插入还是询问就好了.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">4000010</span>;</span><br><span class="line">lxl n,TimeCnt,opt,PCnt,ACnt,id;</span><br><span class="line">lxl ans[big],t[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl x,y,z,val,opt,id;</span><br><span class="line">&#125;p[big*<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(_Point d1,_Point d2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(d1.x==d2.x)</span><br><span class="line"><span class="keyword">if</span>(d1.y==d2.y)</span><br><span class="line"><span class="keyword">return</span> d1.z&lt;d2.z;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> d1.y&lt;d2.y;</span><br><span class="line"><span class="keyword">return</span> d1.x&lt;d2.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(_Point d1,_Point d2)</span></span>&#123;<span class="keyword">return</span> d1.y==d2.y?d1.z&lt;d2.z:d1.y&lt;d2.y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl x,lxl val)</span></span>&#123;<span class="keyword">for</span>(;x&lt;big;x+=lowbit(x))t[x]+=val;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">query</span><span class="params">(lxl x)</span></span>&#123;<span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;<span class="keyword">for</span>(;x;x-=lowbit(x))sum+=t[x];<span class="keyword">return</span> sum;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span><span class="params">(lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">cdq(l,mid),cdq(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">std</span>::sort(p+l,p+<span class="number">1</span>+mid,cmp2),<span class="built_in">std</span>::sort(p+mid+<span class="number">1</span>,p+<span class="number">1</span>+r,cmp2);</span><br><span class="line">lxl j=l,i=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;i&lt;=r;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(p[j].y&lt;=p[i].y&amp;&amp;j&lt;=mid)&#123;<span class="keyword">if</span>(p[j].opt)modify(p[j].z,p[j].val);++j;&#125;</span><br><span class="line"><span class="keyword">if</span>(!p[i].opt)ans[p[i].id]+=query(p[i].z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(l);i&lt;j;++i)<span class="keyword">if</span>(p[i].opt)modify(p[i].z,-p[i].val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("data.txt","r",stdin),freopen("test.out","w",stdout);</span></span><br><span class="line">n=read(),n=read();</span><br><span class="line">opt=read();</span><br><span class="line"><span class="keyword">while</span>(opt!=<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">++TimeCnt;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl x=read()+<span class="number">2</span>,y=read()+<span class="number">2</span>,a=read();</span><br><span class="line">p[++PCnt]=(_Point)&#123;x,y,TimeCnt,a,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">lxl x1=read()+<span class="number">2</span>,y1=read()+<span class="number">2</span>,x2=read()+<span class="number">2</span>,y2=read()+<span class="number">2</span>;</span><br><span class="line">p[++PCnt]=(_Point)&#123;x2,y2,TimeCnt,<span class="number">0</span>,<span class="number">0</span>,++id&#125;;</span><br><span class="line">p[++PCnt]=(_Point)&#123;x1<span class="number">-1</span>,y1<span class="number">-1</span>,TimeCnt,<span class="number">0</span>,<span class="number">0</span>,++id&#125;;</span><br><span class="line">p[++PCnt]=(_Point)&#123;x1<span class="number">-1</span>,y2,TimeCnt,<span class="number">0</span>,<span class="number">0</span>,++id&#125;;</span><br><span class="line">p[++PCnt]=(_Point)&#123;x2,y1<span class="number">-1</span>,TimeCnt,<span class="number">0</span>,<span class="number">0</span>,++id&#125;;</span><br><span class="line">&#125;</span><br><span class="line">opt=read();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::sort(p+<span class="number">1</span>,p+<span class="number">1</span>+PCnt,cmp1);</span><br><span class="line">cdq(<span class="number">1</span>,PCnt);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i+<span class="number">3</span>&lt;=id;i+=<span class="number">4</span>)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]+ans[i+<span class="number">1</span>]-ans[i+<span class="number">2</span>]-ans[i+<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:添加时间维离线求三维偏序&lt;/p&gt;</summary>
    
    
    
    <category term="分治" scheme="https://www.lemir3.red/categories/分治/"/>
    
    <category term="分治-cdq分治" scheme="https://www.lemir3.red/categories/分治/分治-cdq分治/"/>
    
    
    <category term="分治" scheme="https://www.lemir3.red/tags/分治/"/>
    
    <category term="cdq分治" scheme="https://www.lemir3.red/tags/cdq分治/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」CF600E Lomsat gelral</title>
    <link href="https://www.lemir3.red/2020/10/09/jie-ti-bao-gao-cf600e-lomsat-gelral/"/>
    <id>https://www.lemir3.red/2020/10/09/jie-ti-bao-gao-cf600e-lomsat-gelral/</id>
    <published>2020-10-09T12:17:43.000Z</published>
    <updated>2020-10-09T12:30:34.944Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: dsu on tree</p><a id="more"></a><h1 id="CF600E-Lomsat-gelral"><a href="#CF600E-Lomsat-gelral" class="headerlink" title="CF600E Lomsat gelral"></a>CF600E Lomsat gelral</h1><p><a href="http://codeforces.com/contest/600/problem/E" target="_blank" rel="noopener">题面</a></p><p>一道字符串题想了一天没搞出来然后李哥突然宣布以后每天晚上结束要给他报告做题情况…</p><p><del>于是赶紧开道水题撑撑场面.</del></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>网上冲浪 <del>乱翻别人博客</del> 的时候看到了这道题于是就拿来做了.</p><p>用到了一个叫dsu on tree的trick,大体来说就是利用轻重链剖分的<code>一个点到根节点的路径上轻边的数量不超过logn条</code>性质.</p><p>所以就可以处理一些没有修改而且仅询问子树,维护答案复杂度很低的题,对轻边直接进行暴力,重边也进行暴力,然后撤销轻边的答案.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl n,EdgeSize,Son,max,sum;</span><br><span class="line">lxl head[big],size[big],son[big],color[big],ans[big],cnt[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next;</span><br><span class="line">&#125;e[big&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v) EdgeAdd(u,v),EdgeAdd(v,u)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize]=(_Edge)&#123;v,head[u]&#125;;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">more</span><span class="params">(lxl u,lxl fa,lxl val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt[color[u]]+=val;</span><br><span class="line"><span class="keyword">if</span>(cnt[color[u]]&gt;max)max=cnt[color[u]],sum=color[u];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(cnt[color[u]]==max)sum+=color[u];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa||v==Son)<span class="keyword">continue</span>;</span><br><span class="line">more(v,u,val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(lxl u,lxl fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">size[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line">dfs1(v,u);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(size[son[u]]&lt;size[v])son[u]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(lxl u,lxl fa,lxl opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(v!=son[u])dfs2(v,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(son[u])dfs2(son[u],u,<span class="number">1</span>),Son=son[u];</span><br><span class="line">more(u,fa,<span class="number">1</span>),Son=<span class="number">0</span>;</span><br><span class="line">ans[u]=sum;</span><br><span class="line"><span class="keyword">if</span>(!opt)more(u,fa,<span class="number">-1</span>),sum=<span class="number">0</span>,max=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)color[i]=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read();</span><br><span class="line">add(u,v);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">0</span>),dfs2(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="built_in">printf</span>(<span class="string">"%lld "</span>,ans[i]);<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要: dsu on tree&lt;/p&gt;</summary>
    
    
    
    <category term="树链剖分" scheme="https://www.lemir3.red/categories/树链剖分/"/>
    
    <category term="其他" scheme="https://www.lemir3.red/categories/树链剖分/其他/"/>
    
    
    <category term="树链剖分" scheme="https://www.lemir3.red/tags/树链剖分/"/>
    
    <category term="其他" scheme="https://www.lemir3.red/tags/其他/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」CF547E Mike and Friends</title>
    <link href="https://www.lemir3.red/2020/10/06/jie-ti-bao-gao-cf547e-mike-and-friends/"/>
    <id>https://www.lemir3.red/2020/10/06/jie-ti-bao-gao-cf547e-mike-and-friends/</id>
    <published>2020-10-06T13:15:02.000Z</published>
    <updated>2020-10-06T13:41:44.925Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:height区间上二维数点</p><a id="more"></a><h1 id="CF547E-Mike-and-Friends"><a href="#CF547E-Mike-and-Friends" class="headerlink" title="CF547E Mike and Friends"></a>CF547E Mike and Friends</h1><p><a href="http://codeforces.com/problemset/problem/547/E" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>SA的做法,跑得挺慢的.</p><p>首先将所有串拼起来后缀排序,求出height数组.</p><p>然后我们发现答案为height数组中连续的一段中的一部分,于是写出暴力:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),q=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,tmp+<span class="number">1</span>);</span><br><span class="line">TmpLen=<span class="built_in">strlen</span>(tmp+<span class="number">1</span>);</span><br><span class="line"><span class="comment">// debug(TmpLen);</span></span><br><span class="line"><span class="keyword">if</span>(len)s[++len]=<span class="string">'#'</span>;</span><br><span class="line">++len,pla[i]=len,lag5fn[i]=TmpLen;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(len);j&lt;len+TmpLen;++j)s[j]=tmp[j-len+<span class="number">1</span>],belong[j]=i;</span><br><span class="line">len+=TmpLen<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=len;++i)printf("%c",s[i]);endl;endl;</span></span><br><span class="line">SuffixSort();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>),j(<span class="number">0</span>);i&lt;=len;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j)--j;</span><br><span class="line"><span class="keyword">while</span>(s[i+j]==s[sa[rank[i]<span class="number">-1</span>]+j])++j;</span><br><span class="line">height[rank[i]]=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=len;++i)debug(sa[i]);endl;</span></span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=len;++i)debug(rank[i]);endl;</span></span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=len;++i)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// debug(height[i]);</span></span><br><span class="line"><span class="comment">// for(R int j(sa[i]);j&lt;=len;++j)printf("%c",s[j]);</span></span><br><span class="line"><span class="comment">// endl;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=q;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl l=read(),r=read(),x=read();</span><br><span class="line">lxl tmp=rank[pla[x]],ans(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// debug(tmp);</span></span><br><span class="line"><span class="comment">// debug(lag5fn[x]);</span></span><br><span class="line">lxl stmp=tmp+<span class="number">1</span>,ntmp=tmp;</span><br><span class="line"><span class="keyword">while</span>(height[stmp]&gt;=lag5fn[x])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(belong[sa[stmp]]&gt;=l&amp;&amp;belong[sa[stmp]]&lt;=r)++ans;</span><br><span class="line">++stmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// if(height[tmp]&lt;lag5fn[x])&#123;if(belong[sa[tmp]]&gt;=l&amp;&amp;belong[sa[tmp]]&lt;=r)++ans;&#125;</span></span><br><span class="line"><span class="comment">// else</span></span><br><span class="line"><span class="keyword">while</span>(height[ntmp]&gt;=lag5fn[x])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(belong[sa[ntmp]]&gt;=l&amp;&amp;belong[sa[ntmp]]&lt;=r)++ans;</span><br><span class="line">--ntmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(belong[sa[ntmp]]&gt;=l&amp;&amp;belong[sa[ntmp]]&lt;=r)++ans;</span><br><span class="line"><span class="comment">// debug(ntmp),debug(stmp);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很快就能发现,如果我们找出了答案的贡献区间$[x,y]$,那么对答案的实际贡献为原串位置在$[l,r]$中的点的个数,这是一个典序的二维数点问题.</p><p>那么首要问题成为了如何快速求出答案的贡献区间,考虑这一段区间的性质,查询的串的长度作为这个区间的极长最小值(除第一位),换句话说,以查询串长度作为最小值的包含排序后这个串的位置的极长区间即为贡献的区间,但是因为查询串的长度不一定出现在height序列中,所以求的时候注意使用不等式.</p><p>笛卡尔树就能实现这个操作,因为维护了区间的极长最值信息,找到笛卡尔树上排序后查询串位置的叶子节点,从这个节点上跳就能找到需要的区间,但是我数据结构能力实在太差没调出来…</p><p>也可以直接在排序后查询串位置的两边二分出需要的区间,用st表取最值即可,不过细节很恶心,还要特判查询串在height序列中刚好是一些相同前缀的后缀中的第一个的情况.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">500010</span>;</span><br><span class="line">lxl n,q,m=<span class="number">100</span>,len,TmpLen,NodeCnt,root,AskCnt,now=<span class="number">1</span>;</span><br><span class="line">lxl suf[big],tp[big],rank[big],sa[big],height[big],pla[big],belong[big],lag5fn[big];</span><br><span class="line">lxl t[big],ans[big],st[<span class="number">21</span>][big],lg[big];</span><br><span class="line"><span class="keyword">char</span> s[big],tmp[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl x,y;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Point &amp;another)<span class="keyword">const</span>&#123;<span class="keyword">return</span> x&lt;another.x;&#125;</span><br><span class="line">&#125;str[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Ask</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl x,y,id,opt;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Ask &amp;another)<span class="keyword">const</span>&#123;<span class="keyword">return</span> x&lt;another.x;&#125;</span><br><span class="line">&#125;ask[big&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl x,lxl k)</span></span>&#123;<span class="keyword">for</span>(;x&lt;=big;x+=lowbit(x))t[x]+=k;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">query</span><span class="params">(lxl x)</span></span>&#123;<span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;<span class="keyword">for</span>(;x;x-=lowbit(x))sum+=t[x];<span class="keyword">return</span> sum;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">QSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;=m;++i)suf[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=len;++i)++suf[rank[i]];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)suf[i]+=suf[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(len);i;--i)sa[suf[rank[tp[i]]]--]=tp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">SuffixSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=len;++i)rank[i]=s[i]-<span class="string">'#'</span>+<span class="number">1</span>,tp[i]=i;</span><br><span class="line">QSort();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> w(<span class="number">1</span>),p(<span class="number">0</span>);p&lt;len;w&lt;&lt;=<span class="number">1</span>,m=p)</span><br><span class="line">&#123;</span><br><span class="line">p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=w;++i)tp[++p]=len-w+i;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=len;++i)<span class="keyword">if</span>(sa[i]&gt;w)tp[++p]=sa[i]-w;</span><br><span class="line">QSort(),<span class="built_in">std</span>::swap(tp,rank);</span><br><span class="line">rank[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=len;++i)</span><br><span class="line">rank[sa[i]]=(tp[sa[i]]==tp[sa[i<span class="number">-1</span>]]&amp;&amp;tp[sa[i]+w]==tp[sa[i<span class="number">-1</span>]+w])?p:++p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> better(x,y) (height[x]&lt;height[y])</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">BuildST</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lg[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=len;lg[i]=lg[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>,st[<span class="number">0</span>][i]=i,++i);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=<span class="number">20</span>;++j)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=len;++i)</span><br><span class="line">st[j][i]=better(st[j<span class="number">-1</span>][i],st[j<span class="number">-1</span>][i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))])?st[j<span class="number">-1</span>][i]:st[j<span class="number">-1</span>][i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">GetMin</span><span class="params">(lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl k=lg[r-l+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> better(st[k][l],st[k][r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>])?st[k][l]:st[k][r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("data.txt","r",stdin);</span></span><br><span class="line">n=read(),q=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,tmp+<span class="number">1</span>);</span><br><span class="line">TmpLen=<span class="built_in">strlen</span>(tmp+<span class="number">1</span>);</span><br><span class="line"><span class="comment">// debug(TmpLen);</span></span><br><span class="line"><span class="keyword">if</span>(len)s[++len]=<span class="string">'#'</span>;</span><br><span class="line">++len,pla[i]=len,lag5fn[i]=TmpLen;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(len);j&lt;len+TmpLen;++j)s[j]=tmp[j-len+<span class="number">1</span>],belong[j]=i;</span><br><span class="line">len+=TmpLen<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=len;++i)printf("%c",s[i]);endl;endl;</span></span><br><span class="line">SuffixSort();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>),j(<span class="number">0</span>);i&lt;=len;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j)--j;</span><br><span class="line"><span class="keyword">while</span>(s[i+j]==s[sa[rank[i]<span class="number">-1</span>]+j])++j;</span><br><span class="line">height[rank[i]]=j;</span><br><span class="line">&#125;</span><br><span class="line">BuildST();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=len;++i)str[i]=&#123;i+<span class="number">1</span>,belong[sa[i]]+<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=q;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl l=read()+<span class="number">1</span>,r=read()+<span class="number">1</span>,x=read();</span><br><span class="line">lxl tmp=rank[pla[x]],yak7=lag5fn[x];</span><br><span class="line">lxl le=tmp,ri=len,mid,left,right=tmp,pos;</span><br><span class="line"><span class="comment">// debug(tmp),debug(yak7),debug(height[tmp]);</span></span><br><span class="line"><span class="keyword">if</span>(height[tmp]&lt;yak7)le=pos=tmp+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> le=right=pos=tmp;</span><br><span class="line"><span class="keyword">while</span>(le&lt;=ri)</span><br><span class="line">&#123;</span><br><span class="line">mid=(le+ri)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="comment">// debug(mid),debug(height[GetMin(pos,mid)]);</span></span><br><span class="line"><span class="keyword">if</span>(height[GetMin(pos,mid)]&gt;=yak7)le=mid+<span class="number">1</span>,right=mid;</span><br><span class="line"><span class="keyword">else</span> ri=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(height[tmp]&lt;yak7)left=tmp;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">le=<span class="number">1</span>,ri=tmp;</span><br><span class="line"><span class="keyword">while</span>(le&lt;=ri)</span><br><span class="line">&#123;</span><br><span class="line">mid=(le+ri)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(height[GetMin(mid,tmp)]&gt;=yak7)ri=mid<span class="number">-1</span>,left=mid;</span><br><span class="line"><span class="keyword">else</span> le=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">--left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// debug(left),debug(right);</span></span><br><span class="line">++left,++right;</span><br><span class="line">ask[++AskCnt]=(_Ask)&#123;right,r,i,<span class="number">1</span>&#125;;</span><br><span class="line">ask[++AskCnt]=(_Ask)&#123;left<span class="number">-1</span>,l<span class="number">-1</span>,i,<span class="number">1</span>&#125;;</span><br><span class="line">ask[++AskCnt]=(_Ask)&#123;left<span class="number">-1</span>,r,i,<span class="number">-1</span>&#125;;</span><br><span class="line">ask[++AskCnt]=(_Ask)&#123;right,l<span class="number">-1</span>,i,<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::sort(ask+<span class="number">1</span>,ask+<span class="number">1</span>+AskCnt),<span class="built_in">std</span>::sort(str+<span class="number">1</span>,str+<span class="number">1</span>+len);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=AskCnt;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(now&lt;=len&amp;&amp;str[now].x&lt;=ask[i].x)modify(str[now].y,<span class="number">1</span>),++now;</span><br><span class="line">ans[ask[i].id]+=query(ask[i].y)*ask[i].opt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=q;++i)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 1</span></span><br><span class="line"><span class="comment">a</span></span><br><span class="line"><span class="comment">abab</span></span><br><span class="line"><span class="comment">ab</span></span><br><span class="line"><span class="comment">ababab</span></span><br><span class="line"><span class="comment">b</span></span><br><span class="line"><span class="comment">1 5 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5 1</span></span><br><span class="line"><span class="comment">a</span></span><br><span class="line"><span class="comment">ab</span></span><br><span class="line"><span class="comment">abab</span></span><br><span class="line"><span class="comment">ababab</span></span><br><span class="line"><span class="comment">b</span></span><br><span class="line"><span class="comment">1 5 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:height区间上二维数点&lt;/p&gt;</summary>
    
    
    
    <category term="字符串" scheme="https://www.lemir3.red/categories/字符串/"/>
    
    <category term="字符串-后缀数组" scheme="https://www.lemir3.red/categories/字符串/字符串-后缀数组/"/>
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/字符串/字符串-后缀数组/数据结构/"/>
    
    <category term="数据结构-树状数组" scheme="https://www.lemir3.red/categories/字符串/字符串-后缀数组/数据结构/数据结构-树状数组/"/>
    
    <category term="其他" scheme="https://www.lemir3.red/categories/字符串/字符串-后缀数组/数据结构/数据结构-树状数组/其他/"/>
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="字符串" scheme="https://www.lemir3.red/tags/字符串/"/>
    
    <category term="其他" scheme="https://www.lemir3.red/tags/其他/"/>
    
    <category term="后缀数组" scheme="https://www.lemir3.red/tags/后缀数组/"/>
    
    <category term="树状数组" scheme="https://www.lemir3.red/tags/树状数组/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu2163[SHOI2007]园丁的烦恼</title>
    <link href="https://www.lemir3.red/2020/10/06/jie-ti-bao-gao-luogu2163-shoi2007-yuan-ding-de-fan-nao/"/>
    <id>https://www.lemir3.red/2020/10/06/jie-ti-bao-gao-luogu2163-shoi2007-yuan-ding-de-fan-nao/</id>
    <published>2020-10-06T01:53:44.000Z</published>
    <updated>2020-10-06T02:02:28.998Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:二维数点问题</p><a id="more"></a><h1 id="luogu2163-SHOI2007-园丁的烦恼"><a href="#luogu2163-SHOI2007-园丁的烦恼" class="headerlink" title="luogu2163[SHOI2007]园丁的烦恼"></a>luogu2163[SHOI2007]园丁的烦恼</h1><p><a href="https://www.luogu.com.cn/problem/P2163" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>啊,我怎么现在才会这个…</p><p>首先询问是可以转化成一个二维前缀和,设$ans_{i,j}$为$(1,1,i,j)$的矩阵中点的数目,那么矩形$(x1,y1,x2,y2)$的答案可以表示为$ans_{x2,y2}+ans_{x1-1,y1-1}-ans_{x1-1,y2}-ans_{x2,y1-1}$.</p><p>于是把询问拆成四个点,将所有的询问和点按照$x$进行排序.</p><p>将树状数组建立在列上,然后按照$x$递增的顺序加入点,具体实现上,在枚举到一个询问时,要将$x$小于它的所有点全部加入树状数组,这些点在树状数组的$y$处插入,贡献为$1$,可以看出这是类似扫描线的思路.</p><p>注意树状数组的下标不能为$0$.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">500010</span>,large=<span class="number">10000010</span>;</span><br><span class="line">lxl n,m,AskCnt,now=<span class="number">1</span>;</span><br><span class="line">lxl t[large],ans[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl x,y;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Point &amp;another)<span class="keyword">const</span>&#123;<span class="keyword">return</span> x&lt;another.x;&#125;</span><br><span class="line">&#125;tree[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Ask</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl x,y,id,opt;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Ask &amp;another)<span class="keyword">const</span>&#123;<span class="keyword">return</span> x&lt;another.x;&#125;</span><br><span class="line">&#125;q[big*<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl x,lxl k)</span></span>&#123;<span class="keyword">for</span>(;x&lt;=n;x+=lowbit(x))t[x]+=k;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">query</span><span class="params">(lxl x)</span></span>&#123;<span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;<span class="keyword">for</span>(;x;x-=lowbit(x))sum+=t[x];<span class="keyword">return</span> sum;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)tree[i]=(_Point)&#123;read()+<span class="number">1</span>,read()+<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl x1=read()+<span class="number">1</span>,y1=read()+<span class="number">1</span>,x2=read()+<span class="number">1</span>,y2=read()+<span class="number">1</span>;</span><br><span class="line">q[++AskCnt]=(_Ask)&#123;x2,y2,i,<span class="number">1</span>&#125;;</span><br><span class="line">q[++AskCnt]=(_Ask)&#123;x1<span class="number">-1</span>,y1<span class="number">-1</span>,i,<span class="number">1</span>&#125;;</span><br><span class="line">q[++AskCnt]=(_Ask)&#123;x1<span class="number">-1</span>,y2,i,<span class="number">-1</span>&#125;;</span><br><span class="line">q[++AskCnt]=(_Ask)&#123;x2,y1<span class="number">-1</span>,i,<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::sort(tree+<span class="number">1</span>,tree+<span class="number">1</span>+n),<span class="built_in">std</span>::sort(q+<span class="number">1</span>,q+<span class="number">1</span>+AskCnt);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=AskCnt;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// debugi(i);</span></span><br><span class="line"><span class="keyword">while</span>(now&lt;=n&amp;&amp;tree[now].x&lt;=q[i].x)modify(tree[now].y,<span class="number">1</span>),++now;</span><br><span class="line">ans[q[i].id]+=q[i].opt*query(q[i].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:二维数点问题&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/数据结构/"/>
    
    <category term="数据结构-树状数组" scheme="https://www.lemir3.red/categories/数据结构/数据结构-树状数组/"/>
    
    <category term="其他" scheme="https://www.lemir3.red/categories/数据结构/数据结构-树状数组/其他/"/>
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="其他" scheme="https://www.lemir3.red/tags/其他/"/>
    
    <category term="树状数组" scheme="https://www.lemir3.red/tags/树状数组/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」「NOI2015」品酒大会</title>
    <link href="https://www.lemir3.red/2020/10/05/jie-ti-bao-gao-noi2015-pin-jiu-da-hui/"/>
    <id>https://www.lemir3.red/2020/10/05/jie-ti-bao-gao-noi2015-pin-jiu-da-hui/</id>
    <published>2020-10-05T13:49:22.000Z</published>
    <updated>2020-10-05T14:06:20.385Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:倒序height分组后合并区间求解</p><a id="more"></a><h1 id="「NOI2015」品酒大会"><a href="#「NOI2015」品酒大会" class="headerlink" title="「NOI2015」品酒大会"></a>「NOI2015」品酒大会</h1><p><a href="https://www.luogu.com.cn/problem/P2178" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先知道如果如果两杯酒是$r$相似的,那么它们一定也是$i~(i \in [1,r))$相似的.</p><p>这个性质启发我们倒序处理出相似,然后通过后缀关系解决本题.</p><p>于是求出原串的后缀排序后,按照height单减排序,就可以将sa按照lcp的len进行分组.</p><p>用并查集维护组之间的合并,同时维护每组中美味度的最小值和最大值(注意到值域有负),合并的时候就两两组合算出答案,方案数直接在合并的时候用两组的大小算即可.</p><p>最后将每个长度算出的答案贡献进它的后缀长度即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">300010</span>;</span><br><span class="line"><span class="keyword">char</span> s[big];</span><br><span class="line">lxl n,m=<span class="number">75</span>;</span><br><span class="line">lxl sa[big],tp[big],rank[big],suf[big],height[big],id[big],v[big],fa[big];</span><br><span class="line">lxl ans[big],ans1[big],ans2[big],smin[big],smax[big],size[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">QSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;=m;++i)suf[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)++suf[rank[i]];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)suf[i]+=suf[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n);i;--i)sa[suf[rank[tp[i]]]--]=tp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">SuffixSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)rank[i]=s[i]-<span class="string">'0'</span>+<span class="number">1</span>,tp[i]=i;</span><br><span class="line">QSort();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> w(<span class="number">1</span>),p(<span class="number">0</span>);p&lt;n;m=p,w&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=w;++i)tp[++p]=n-w+i;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="keyword">if</span>(sa[i]&gt;w)tp[++p]=sa[i]-w;</span><br><span class="line">QSort();</span><br><span class="line"><span class="built_in">std</span>::swap(tp,rank);</span><br><span class="line">rank[sa[<span class="number">1</span>]]=p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=n;++i)</span><br><span class="line">rank[sa[i]]=(tp[sa[i]]==tp[sa[i<span class="number">-1</span>]]&amp;&amp;tp[sa[i]+w]==tp[sa[i<span class="number">-1</span>]+w])?p:++p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(lxl d1,lxl d2)</span></span>&#123;<span class="keyword">return</span> height[d1]&gt;height[d2];&#125;</span><br><span class="line"><span class="function">lxl <span class="title">find</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">return</span> x==fa[x]?x:fa[x]=find(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(lxl x,lxl y,lxl len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=find(x),y=find(y);</span><br><span class="line">fa[y]=x;</span><br><span class="line">ans1[len]+=size[x]*size[y];</span><br><span class="line"><span class="comment">// debug(ans1[len]);</span></span><br><span class="line">size[x]+=size[y];</span><br><span class="line">ans[x]=<span class="built_in">std</span>::max(ans[x],<span class="built_in">std</span>::max(ans[y],<span class="built_in">std</span>::max(<span class="built_in">std</span>::max(smin[x]*smin[y],smax[x]*smax[y]),smax[x]*smin[y])));</span><br><span class="line">ans[x]=<span class="built_in">std</span>::max(ans[x],smin[x]*smax[y]);</span><br><span class="line">smin[x]=<span class="built_in">std</span>::min(smin[x],smin[y]);</span><br><span class="line">smax[x]=<span class="built_in">std</span>::max(smax[x],smax[y]);</span><br><span class="line">ans2[len]=<span class="built_in">std</span>::max(ans2[len],ans[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(ans,<span class="number">0xcc</span>,<span class="keyword">sizeof</span> ans),<span class="built_in">memset</span>(ans2,<span class="number">0xcc</span>,<span class="keyword">sizeof</span> ans2);</span><br><span class="line">n=read();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)smax[i]=smin[i]=v[i]=read(),fa[i]=id[i]=i,size[i]=<span class="number">1</span>;</span><br><span class="line">SuffixSort();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>),j(<span class="number">0</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j)--j;</span><br><span class="line"><span class="keyword">while</span>(s[i+j]==s[sa[rank[i]<span class="number">-1</span>]+j])++j;</span><br><span class="line">height[rank[i]]=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=n+1;++i)debug(id[i]);endl;</span></span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=n+1;++i)debug(id[i]);endl;</span></span><br><span class="line"><span class="built_in">std</span>::sort(&amp;id[<span class="number">2</span>],&amp;id[n+<span class="number">1</span>],cmp);</span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=n+1;++i)debug(id[i]);endl;</span></span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=n;++i)merge(sa[id[i]],sa[id[i]<span class="number">-1</span>],height[id[i]]);</span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=n;++i)debug(ans1[i]);</span></span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n);~i;--i)ans1[i]+=ans1[i+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n);~i;--i)ans2[i]=<span class="built_in">std</span>::max(ans2[i],ans2[i+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;n;++i)<span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,ans1[i],!ans1[i]?<span class="number">0</span>:ans2[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:倒序height分组后合并区间求解&lt;/p&gt;</summary>
    
    
    
    <category term="字符串" scheme="https://www.lemir3.red/categories/字符串/"/>
    
    <category term="字符串-后缀数组" scheme="https://www.lemir3.red/categories/字符串/字符串-后缀数组/"/>
    
    
    <category term="字符串" scheme="https://www.lemir3.red/tags/字符串/"/>
    
    <category term="后缀数组" scheme="https://www.lemir3.red/tags/后缀数组/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu2149「SDOI2009」Elaxia的路线</title>
    <link href="https://www.lemir3.red/2020/10/05/jie-ti-bao-gao-luogu2149-sdoi2009-elaxia-de-lu-xian/"/>
    <id>https://www.lemir3.red/2020/10/05/jie-ti-bao-gao-luogu2149-sdoi2009-elaxia-de-lu-xian/</id>
    <published>2020-10-05T08:31:16.000Z</published>
    <updated>2020-10-05T08:58:21.067Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:无向图中两对点间最短路的最长公共路径</p><a id="more"></a><h1 id="「SDOI2009」Elaxia的路线"><a href="#「SDOI2009」Elaxia的路线" class="headerlink" title="「SDOI2009」Elaxia的路线"></a>「SDOI2009」Elaxia的路线</h1><p><a href="https://www.luogu.com.cn/problem/P2149" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>说起来可能就一句,先建两张最短路图,然后在重合的部分跑dp求最长路径.</p><p>但是具体来讲有很多注意的地方.</p><p>首先是如何建立最短路图,这一题中的最短路图比较特殊,因为不能在起点到终点的路径之外的部分产生重合部分,所以在进行完最短路算法之后,我们从终点开始进行bfs,若一个点$u$通过边$(u,v,w)$相连的点$v$满足$dis_v+w=dis_u$,那么就说明$v$在最短路图上,将$v$放入队列进行bfs.</p><p>这样建出的最短路图的形态是一条从起点$s$到终点$t$的链,中间存在一些环作为可替代的路径.</p><p>至于如何求得两张最短路图重叠的部分,在建立第一张图时,我们将图上的边建出来,并记录哪些点之间有边,在建立第二张图时,仅保存哪些点之间有边,然后遍历第一张图,保留下在两张图都存在的边即可.</p><p>然后在新建出的图上进行记忆化搜索即可,这一步是很好写的.</p><p>不过这样做有一点问题,比如下面这组数据:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">9 12</span><br><span class="line">1 7 8 9</span><br><span class="line">1 2 1</span><br><span class="line">2 5 1</span><br><span class="line">2 3 1</span><br><span class="line">2 6 1</span><br><span class="line">3 4 1</span><br><span class="line">5 4 1</span><br><span class="line">4 7 1</span><br><span class="line">4 6 1</span><br><span class="line">8 5 1</span><br><span class="line">5 3 1</span><br><span class="line">3 6 1</span><br><span class="line">6 9 1</span><br></pre></td></tr></table></figure><p>它的形态是两个长度为$5$的链在中间节点的位置相交,然后中间节点周围的四个点连成环,这样的话中间的$5$个节点均为重叠部分,按照上面的记忆化搜索答案为$2$,但是由于重叠部分的路径不可能同时经过一张最短路图中一个环的两部分(就是说重叠部分的路径也一定是在原来的最短路径上而不能被拼凑出来),答案理应为$1$,洛谷上21篇题解中有15篇题解都被这组数据hack了,但管理员直到我写出这篇博客都还没去看我的帖子加数据撤题解…</p><p>于是我们除了将最短路图建成有向的之外别无他法,这样的重叠部分的路径就一定在原最短路图其中的一条路径上,但这样又产生了一个问题,你很快会发现这样连样例数据都无法通过,因为在样例中重叠部分的路径是反向的.</p><p>解决方法是跑出$(s1,e1)$,$(s2,e2)$的答案后,再处理一遍$(e1,s1)$,$(s2,e2)$的,因为边本来就是无向的,所以只要有一个起终点关系反向即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">1510</span>,large=<span class="number">300010</span>;</span><br><span class="line">lxl n,m,w,EdgeSize;</span><br><span class="line">lxl head[big],dis[big],vis[big],dp[big],from[big],dep[big],gone[big];</span><br><span class="line">lxl edgeh[big][big];</span><br><span class="line">lxl go[<span class="number">4</span>],ans[<span class="number">2</span>];</span><br><span class="line">lxl change[<span class="number">2</span>][<span class="number">4</span>]=</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br><span class="line"><span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next,w;</span><br><span class="line">&#125;e[large&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="built_in">std</span>::priority_queue&lt;<span class="built_in">std</span>::pair&lt;lxl,lxl&gt; &gt;q;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;lxl&gt;que,q2;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;lxl,lxl&gt; &gt;edge[<span class="number">2</span>][big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=x*<span class="number">10</span>+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v,w) EdgeAdd(u,v,w),EdgeAdd(v,u,w)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v,lxl w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize]=(_Edge)&#123;v,head[u],w&#125;;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(lxl s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis),<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dis),<span class="built_in">memset</span>(from,<span class="number">0</span>,<span class="keyword">sizeof</span> from);</span><br><span class="line">dis[s]=<span class="number">0</span>,q.push(<span class="built_in">std</span>::make_pair(<span class="number">0</span>,s));</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">lxl u=q.top().second;q.pop();</span><br><span class="line"><span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v,w=e[i].w;</span><br><span class="line"><span class="keyword">if</span>(dis[v]&gt;dis[u]+w)</span><br><span class="line">dis[v]=dis[u]+w,from[v]=u,q.push(<span class="built_in">std</span>::make_pair(-dis[v],v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(lxl s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis),<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dis),<span class="built_in">memset</span>(from,<span class="number">0</span>,<span class="keyword">sizeof</span> from);</span><br><span class="line">dis[s]=<span class="number">0</span>,q2.push(s),vis[s]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(!q2.empty())</span><br><span class="line">&#123;</span><br><span class="line">lxl u=q2.front();q2.pop(),vis[u]=<span class="literal">false</span>;</span><br><span class="line"><span class="comment">// debugi(u);</span></span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v,w=e[i].w;</span><br><span class="line"><span class="keyword">if</span>(dis[v]&gt;dis[u]+w)</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]+w,from[v]=u;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])q2.push(v),vis[v]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(lxl t,lxl sign)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis),<span class="built_in">memset</span>(gone,<span class="number">0</span>,<span class="keyword">sizeof</span> gone);</span><br><span class="line">que.push(t),vis[t]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(!que.empty())</span><br><span class="line">&#123;</span><br><span class="line">lxl u=que.front();que.pop(),vis[u]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(gone[u])<span class="keyword">continue</span>;</span><br><span class="line">gone[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v,w=e[i].w;</span><br><span class="line"><span class="keyword">if</span>(dis[v]+w==dis[u]&amp;&amp;edgeh[v][u]&lt;sign+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!sign)edge[sign][v].push_back(<span class="built_in">std</span>::make_pair(u,w));</span><br><span class="line">++edgeh[v][u];</span><br><span class="line"><span class="keyword">if</span>(!vis[v])que.push(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// debugi(t);</span></span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=n;++i)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// for(R int j(head[i]);~j;j=e[j].next)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// lxl v=e[j].v,w=e[j].w;</span></span><br><span class="line"><span class="comment">// if(dis[v]+w==dis[i]&amp;&amp;edgeh[v][i]&lt;sign+1)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// if(!sign)edge[sign][v].push_back(std::make_pair(i,w));</span></span><br><span class="line"><span class="comment">// ++edgeh[v][i];</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">dfs</span><span class="params">(lxl u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[u])<span class="keyword">return</span> dp[u];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=edge[<span class="number">1</span>][u].begin();it!=edge[<span class="number">1</span>][u].end();++it)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=it-&gt;first,w=it-&gt;second;</span><br><span class="line">dp[u]=<span class="built_in">std</span>::max(dfs(v)+w,dp[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("data.txt","r",stdin);</span></span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">n=read(),m=read(),go[<span class="number">0</span>]=read(),go[<span class="number">1</span>]=read(),go[<span class="number">2</span>]=read(),go[<span class="number">3</span>]=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)&#123;lxl u=read(),v=read(),w=read();add(u,v,w);&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> d(<span class="number">0</span>);d&lt;<span class="number">2</span>;++d)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)edge[<span class="number">0</span>][i].clear(),edge[<span class="number">1</span>][i].clear();</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span> dp),<span class="built_in">memset</span>(edgeh,<span class="number">0</span>,<span class="keyword">sizeof</span> edgeh);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// double st=clock();</span></span><br><span class="line">dijkstra(go[change[d][<span class="number">0</span>]]),build(go[change[d][<span class="number">1</span>]],<span class="number">0</span>);</span><br><span class="line">dijkstra(go[change[d][<span class="number">2</span>]]),build(go[change[d][<span class="number">3</span>]],<span class="number">1</span>);</span><br><span class="line"><span class="comment">// double ed=clock();printf("using time:%llfms\n",ed-st);</span></span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=edge[<span class="number">0</span>][i].begin();it!=edge[<span class="number">0</span>][i].end();++it)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=it-&gt;first,w=it-&gt;second;</span><br><span class="line"><span class="keyword">if</span>(edgeh[i][v]==<span class="number">2</span>)</span><br><span class="line">edge[<span class="number">1</span>][i].push_back(<span class="built_in">std</span>::make_pair(v,w));</span><br><span class="line"><span class="comment">// ,debugi(i),debug(v);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// if(d)debug(edgeh[0][4][5]),debug(edgeh[1][4][]);</span></span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[i]||edge[<span class="number">1</span>][i].empty())<span class="keyword">continue</span>;</span><br><span class="line">ans[d]=<span class="built_in">std</span>::max(dfs(i),ans[d]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="built_in">std</span>::max(ans[<span class="number">0</span>],ans[<span class="number">1</span>]));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 4</span></span><br><span class="line"><span class="comment">1 4 1 4</span></span><br><span class="line"><span class="comment">1 2 1</span></span><br><span class="line"><span class="comment">2 3 1</span></span><br><span class="line"><span class="comment">3 4 1</span></span><br><span class="line"><span class="comment">1 4 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">9 12</span></span><br><span class="line"><span class="comment">1 7 8 9</span></span><br><span class="line"><span class="comment">1 2 1</span></span><br><span class="line"><span class="comment">2 5 1</span></span><br><span class="line"><span class="comment">2 3 1</span></span><br><span class="line"><span class="comment">2 6 1</span></span><br><span class="line"><span class="comment">3 4 1</span></span><br><span class="line"><span class="comment">5 4 1</span></span><br><span class="line"><span class="comment">4 7 1</span></span><br><span class="line"><span class="comment">4 6 1</span></span><br><span class="line"><span class="comment">8 5 1</span></span><br><span class="line"><span class="comment">5 3 1</span></span><br><span class="line"><span class="comment">3 6 1</span></span><br><span class="line"><span class="comment">6 9 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:无向图中两对点间最短路的最长公共路径&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="图论-最短路" scheme="https://www.lemir3.red/categories/图论/图论-最短路/"/>
    
    <category term="动态规划" scheme="https://www.lemir3.red/categories/图论/图论-最短路/动态规划/"/>
    
    
    <category term="动态规划" scheme="https://www.lemir3.red/tags/动态规划/"/>
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="最短路" scheme="https://www.lemir3.red/tags/最短路/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」UVA1416 Warfare And Logistics</title>
    <link href="https://www.lemir3.red/2020/10/04/jie-ti-bao-gao-uva1416-warfare-and-logistics/"/>
    <id>https://www.lemir3.red/2020/10/04/jie-ti-bao-gao-uva1416-warfare-and-logistics/</id>
    <published>2020-10-04T02:51:20.000Z</published>
    <updated>2020-10-04T03:33:48.562Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:最短路树分类讨论降低复杂度</p><a id="more"></a><h1 id="UVA1416-Warfare-And-Logistics"><a href="#UVA1416-Warfare-And-Logistics" class="headerlink" title="UVA1416 Warfare And Logistics"></a>UVA1416 Warfare And Logistics</h1><p><a href>题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题意是给定一张图,求两两点之间的最短路长度之和,以及断掉一条边之和最大的最短路长度之和,不联通的点的最短路长度则计入一个指定的值.</p><p>一个朴素的思路是直接枚举断边,跑$m$遍floyd,时间复杂度$O(n^3m)$,十分拉垮.</p><p>floyd换成dijkstra,复杂度为$O(nm^2logm)$.</p><p>但是可以发现一点,一条边若始终不在最短路上,那么即使将它断掉也不会影响最短路,影响答案的仅会是出现在最短路上过的点.</p><p>于是引入最短路树的概念,具体地说,最短路树是图$S=(V,E)$的一个子图$S’=(V’,E’)$,其中根$u$到任意$v \in V’$的路径均为最短路径.</p><p>那么我们以每个点为根建立最短路树,然后枚举边,如果某条边在某个最短路树上出现,则重新计算这颗树的答案即可,也就是这颗树的根节点的答案全部需要更新.</p><p>因为最短路树上的边数为$O(n)$,所以我们求最短路的次数上界降低为$O(n^2)$次,复杂度为$O(n^2mlogm)$,可通过本题.</p><p>建立最短路树就直接在进行dijkstra算法时记录最短路的转移即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 4557430888798830399</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">110</span>,large=<span class="number">1010</span>;</span><br><span class="line">lxl n,m,l,EdgeSize,ans,ansp;</span><br><span class="line">lxl head[big],dis[big],in[big][big][big],from[big],vis[big],dis2[big],su57[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next,w;</span><br><span class="line">&#125;e[large&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="built_in">std</span>::priority_queue&lt;<span class="built_in">std</span>::pair&lt;lxl,lxl&gt; &gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v,w) EdgeAdd(u,v,w),EdgeAdd(v,u,w)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v,lxl w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize]=(_Edge)&#123;v,head[u],w&#125;;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dijkstra0</span><span class="params">(lxl s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dis),<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">q.push(<span class="built_in">std</span>::make_pair(<span class="number">0</span>,s)),dis[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">lxl u=q.top().second;q.pop();</span><br><span class="line"><span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v,w=e[i].w;</span><br><span class="line"><span class="keyword">if</span>(dis[v]&gt;dis[u]+w)</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]+w,from[v]=u;</span><br><span class="line">q.push(<span class="built_in">std</span>::make_pair(-dis[v],v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dijkstra1</span><span class="params">(lxl s,lxl bane)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis2,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dis2),<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">q.push(<span class="built_in">std</span>::make_pair(<span class="number">0</span>,s)),dis2[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">lxl u=q.top().second;q.pop();</span><br><span class="line"><span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(bane==i||bane==(i^<span class="number">1</span>))<span class="keyword">continue</span>;</span><br><span class="line">lxl v=e[i].v,w=e[i].w;</span><br><span class="line"><span class="keyword">if</span>(dis2[v]&gt;dis2[u]+w)</span><br><span class="line">&#123;</span><br><span class="line">dis2[v]=dis2[u]+w;</span><br><span class="line">q.push(<span class="built_in">std</span>::make_pair(-dis2[v],v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("data.txt","r",stdin),freopen("test.out","w",stdout);</span></span><br><span class="line"><span class="comment">// double st=clock();</span></span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;n,&amp;m,&amp;l))</span><br><span class="line">&#123;</span><br><span class="line">EdgeSize=ans=ansp=<span class="number">0</span>,<span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head),<span class="built_in">memset</span>(in,<span class="number">0</span>,<span class="keyword">sizeof</span> in);</span><br><span class="line"><span class="built_in">memset</span>(su57,<span class="number">0</span>,<span class="keyword">sizeof</span> su57);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read(),w=read();</span><br><span class="line">add(u,v,w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(from,<span class="number">0</span>,<span class="keyword">sizeof</span> from);</span><br><span class="line">dijkstra0(i);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=n;++j)</span><br><span class="line">&#123;</span><br><span class="line">in[i][j][from[j]]=in[i][from[j]][j]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(dis[j]!=INF)ansp+=dis[j],su57[i]+=dis[j];</span><br><span class="line"><span class="keyword">else</span> ansp+=l,su57[i]+=l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;EdgeSize;i+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=e[i].v,v=e[i^<span class="number">1</span>].v,nowa(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=n;++j)</span><br><span class="line"><span class="keyword">if</span>(in[j][u][v])</span><br><span class="line">&#123;</span><br><span class="line">dijkstra1(j,i);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(<span class="number">1</span>);k&lt;=n;++k)</span><br><span class="line"><span class="keyword">if</span>(dis2[k]!=INF)nowa+=dis2[k];</span><br><span class="line"><span class="keyword">else</span> nowa+=l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> nowa+=su57[j];</span><br><span class="line">ans=<span class="built_in">std</span>::max(ans,nowa);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,ansp,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// double ed=clock();printf("using time:%llfms\n",ed-st);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4  6  1000</span></span><br><span class="line"><span class="comment">1  3  2</span></span><br><span class="line"><span class="comment">1  4  4</span></span><br><span class="line"><span class="comment">2  1  3</span></span><br><span class="line"><span class="comment">2  3  3</span></span><br><span class="line"><span class="comment">3  4  1</span></span><br><span class="line"><span class="comment">4  2  2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:最短路树分类讨论降低复杂度&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="图论-最短路" scheme="https://www.lemir3.red/categories/图论/图论-最短路/"/>
    
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="最短路" scheme="https://www.lemir3.red/tags/最短路/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」「CodePlus 2018 4 月赛」最短路</title>
    <link href="https://www.lemir3.red/2020/10/02/jie-ti-bao-gao-codeplus-2018-4-yue-sai-zui-duan-lu/"/>
    <id>https://www.lemir3.red/2020/10/02/jie-ti-bao-gao-codeplus-2018-4-yue-sai-zui-duan-lu/</id>
    <published>2020-10-02T14:41:44.000Z</published>
    <updated>2020-10-02T14:57:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:考虑异或性质建图后跑最短路</p><a id="more"></a><h1 id="「CodePlus-2018-4-月赛」最短路"><a href="#「CodePlus-2018-4-月赛」最短路" class="headerlink" title="「CodePlus 2018 4 月赛」最短路"></a>「CodePlus 2018 4 月赛」最短路</h1><p><a href="https://loj.ac/problem/6354" target="_blank" rel="noopener">题面</a></p><p>集训晚上莫名没收电脑,寝室调题纪念.</p><p>然而在机房没调出来只是因为把有向边建成了无向边…</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>这题挺好的,用到了经典的异或性质来建图.</p><p>显然的思路是直接进行建边,但是边数是$O(n^2+m)$的,直接拉垮.</p><p>发现边的权和点编号的异或有关,考虑异或的性质:</p><script type="math/tex; mode=display">a~xor~b=c\\a~xor~b~xor ~a=c~xor~a\\a~xor~c=b</script><p>这样的话,点$a$与点$b$的边权是$(a~xor~b)\times C$,我们设$a~xor~b=c$,那么就有$a~xor~c=b$了.</p><p>按位考虑,设$c=k_0+k_1+k_2+\cdots+k_p~(k_i=\begin{cases}0\\2^{i}\end{cases})$.</p><p>于是就有:</p><script type="math/tex; mode=display">a~xor~c=a~xor~k_0~xor~k_1~xor~k_2~xor\cdots~xor~k_p</script><p>所以可以将$a~xor~b$的过程视作$a$通过异或改变与$b$不相同的位置逐渐变化到$b$的过程,这个过程的权值就可以通过$c$的每一位来考虑,因此我们将$a~xor~2^{k}~(2^k \leq n)$与$a$连边,权值为$2^k\times C$,边数为$O(nlog_n+m)$,跑最短路即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="　代码"></a>　代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl n,m,c,EdgeSize,s,t;</span><br><span class="line">lxl head[big],vis[big],dis[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next,w;</span><br><span class="line">&#125;e[big*<span class="number">60</span>];</span><br><span class="line"><span class="built_in">std</span>::priority_queue&lt;<span class="built_in">std</span>::pair&lt;lxl,lxl&gt; &gt;q;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v,w) EdgeAdd(u,v,w),EdgeAdd(v,u,w)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v,lxl w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// if(u==v)return;</span></span><br><span class="line">e[EdgeSize]=(_Edge)&#123;v,head[u],w&#125;;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c=getchar();</span><br><span class="line">lxl x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())x=x*<span class="number">10</span>+(c^<span class="number">48</span>);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dis);</span><br><span class="line">dis[s]=<span class="number">0</span>,q.push(<span class="built_in">std</span>::make_pair(<span class="number">0</span>,s));</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">lxl u=q.top().second;q.pop();</span><br><span class="line"><span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v,w=e[i].w;</span><br><span class="line"><span class="keyword">if</span>(dis[v]&gt;dis[u]+w)</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]+w;</span><br><span class="line">q.push(<span class="built_in">std</span>::make_pair(-dis[v],v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("19.in","r",stdin);</span></span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">n=read(),m=read(),c=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read(),w=read();</span><br><span class="line">EdgeAdd(u,v,w);</span><br><span class="line">&#125;</span><br><span class="line">s=read(),t=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">lxl <span class="title">j</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;=n)EdgeAdd(i,i^j,j*c),j&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">dijkstra();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dis[t]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:考虑异或性质建图后跑最短路&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="图论-最短路" scheme="https://www.lemir3.red/categories/图论/图论-最短路/"/>
    
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="最短路" scheme="https://www.lemir3.red/tags/最短路/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu1606[USACO07FEB]Lilypad Pond G</title>
    <link href="https://www.lemir3.red/2020/10/02/jie-ti-bao-gao-luogu1606-usaco07feb-lilypad-pond-g/"/>
    <id>https://www.lemir3.red/2020/10/02/jie-ti-bao-gao-luogu1606-usaco07feb-lilypad-pond-g/</id>
    <published>2020-10-02T09:46:51.000Z</published>
    <updated>2020-10-02T11:05:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:建图后跑最短路计数</p><a id="more"></a><h1 id="luogu1606-USACO07FEB-Lilypad-Pond-G"><a href="#luogu1606-USACO07FEB-Lilypad-Pond-G" class="headerlink" title="luogu1606[USACO07FEB]Lilypad Pond G"></a>luogu1606[USACO07FEB]Lilypad Pond G</h1><p><a href="https://www.luogu.com.cn/problem/P1606" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>先建图,以起点或者为水池的点进行dfs,与跳到的第一个为水池的点连边.</p><p>然后跑最短路计数就做完了.</p><p>这里讲一下怎么实现最短路计数,魔改SPFA即可,在$(u,v)$松弛成功时将$ans_u$赋给$ans_v$,如果$dis_u+w=dis_v$则将方案数相加.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 4557430888798830399</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">31</span>;</span><br><span class="line">lxl n,m,sx,sy,ex,ey,IdCnt,EdgeSize;</span><br><span class="line">lxl id[big][big],<span class="built_in">map</span>[big][big],head[big*big],dis[big*big],vis[big*big],ans[big*big],gone[big][big];</span><br><span class="line">lxl dx[]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-2</span>&#125;;</span><br><span class="line">lxl dy[]=&#123;<span class="number">2</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next,w;</span><br><span class="line">&#125;e[big*big*big*<span class="number">8</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;lxl&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v,lxl w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize]=(_Edge)&#123;v,head[u],w&#125;;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(lxl from,lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> d(<span class="number">0</span>);d&lt;<span class="number">8</span>;++d)</span><br><span class="line">&#123;</span><br><span class="line">lxl nx=x+dx[d],ny=y+dy[d];</span><br><span class="line"><span class="keyword">if</span>(nx&lt;<span class="number">1</span>||nx&gt;n||ny&lt;<span class="number">1</span>||ny&gt;m)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[nx][ny]==<span class="number">2</span>||gone[nx][ny])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[nx][ny]==<span class="number">0</span>)&#123;EdgeAdd(from,id[nx][ny],<span class="number">1</span>);gone[nx][ny]=<span class="literal">true</span>;<span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[nx][ny]==<span class="number">4</span>)&#123;EdgeAdd(from,id[nx][ny],<span class="number">0</span>);gone[nx][ny]=<span class="literal">true</span>;<span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[nx][ny]==<span class="number">1</span>)&#123;gone[nx][ny]=<span class="literal">true</span>;dfs(from,nx,ny);&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(lxl s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dis);</span><br><span class="line">vis[s]=<span class="literal">true</span>,q.push(s),dis[s]=<span class="number">0</span>,ans[s]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">lxl u=q.front();q.pop(),vis[u]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v,w=e[i].w;</span><br><span class="line"><span class="keyword">if</span>(dis[v]==dis[u]+w)ans[v]+=ans[u];</span><br><span class="line"><span class="keyword">if</span>(dis[v]&gt;dis[u]+w)</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]+w,ans[v]=ans[u];</span><br><span class="line"><span class="keyword">if</span>(!vis[v])q.push(v),vis[v]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("P1606_5.in","r",stdin);</span></span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=m;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[i][j]=read(),id[i][j]=++IdCnt;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[i][j]==<span class="number">3</span>)sx=i,sy=j;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[i][j]==<span class="number">4</span>)ex=i,ey=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=m;++j)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[i][j]==<span class="number">3</span>||<span class="built_in">map</span>[i][j]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(gone,<span class="literal">false</span>,<span class="keyword">sizeof</span> gone);</span><br><span class="line">dfs(id[i][j],i,j);</span><br><span class="line">&#125;</span><br><span class="line">SPFA(id[sx][sy]);</span><br><span class="line">lxl t=id[ex][ey];</span><br><span class="line"><span class="keyword">if</span>(dis[t]==INF)<span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n%lld\n"</span>,dis[t],ans[t]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:建图后跑最短路计数&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="图论-最短路" scheme="https://www.lemir3.red/categories/图论/图论-最短路/"/>
    
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="最短路" scheme="https://www.lemir3.red/tags/最短路/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu6378「PA2010」Riddle</title>
    <link href="https://www.lemir3.red/2020/09/30/jie-ti-bao-gao-luogu6378-pa2010-riddle/"/>
    <id>https://www.lemir3.red/2020/09/30/jie-ti-bao-gao-luogu6378-pa2010-riddle/</id>
    <published>2020-09-30T08:45:36.000Z</published>
    <updated>2020-09-30T09:04:59.001Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:建立2-sat模型并进行前缀优化</p><a id="more"></a><h1 id="「PA2010」Riddle"><a href="#「PA2010」Riddle" class="headerlink" title="「PA2010」Riddle"></a>「PA2010」Riddle</h1><p><a href="https://www.luogu.com.cn/problem/P6378" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>2-sat应该很好想,关系数组直接为在每个点是否选为关键点即可.</p><p>但是发现直接连边的话边数很爆炸,只是连边的过程的时间开销就无法接受了.</p><p>但是考虑一个集合中只会有一个关键点,那我们建立一个前缀关系$pre_u$表示在集合中$u$之前的点是否有被选为关键点的,那么对于每个点,就有四种情况:</p><ul><li>$u$被选为关键点,那么它的$pre_{u-1}$中一定没有关键点,所以$u$的true向$pre_{u-1}$的false连边.</li><li>$u$被选为关键点,那么它的$pre_u$中就有了一个关键点,所以$u$的true向$pre_u$的true连边.</li><li>$pre_u$中没有关键点,那么$u$就不可能是关键点,所以$pre_u$的false向$u$的false连边.</li><li>$pre_{u-1}$中有关键点,那么$u$不可能是关键点,所以$pre_{u-1}$的true向$u$的false连边.</li></ul><p>然后$pre_u$的关系也得进行传递,$pre_{u-1}$的true向$pre_u$连边,$pre_{u}$的false向$pre_{u-1}$的false连边.</p><p>对于一条边的两个端点$u$,$v$,若$u$为false,那么$v$一定为true,$v$为false同理.</p><p>注意代码里的<code>pre</code>数组是记录集合中的上一个点,$[1,n]$是$u$的true,$[n+1,2n]$是$u$的false,$[2n+1,3n]$是$pre_u$的true,$[3n+1,4n]$是$pre_u$的false.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">1000010</span>;</span><br><span class="line">lxl n,m,k,EdgeSize,SccCnt,TimeCnt;</span><br><span class="line">lxl head[big&lt;&lt;<span class="number">2</span>],dfn[big&lt;&lt;<span class="number">2</span>],low[big&lt;&lt;<span class="number">2</span>],vis[big&lt;&lt;<span class="number">2</span>],color[big&lt;&lt;<span class="number">2</span>],ki44[big],pre[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next;</span><br><span class="line">&#125;e[big&lt;&lt;<span class="number">3</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Link</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl u,v;</span><br><span class="line">&#125;li[big];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">stack</span>&lt;lxl&gt;s;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize]=(_Edge)&#123;v,head[u]&#125;;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(lxl u,lxl fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfn[u]=low[u]=++TimeCnt,s.push(u),vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;<span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])tarjan(v,u),low[u]=<span class="built_in">std</span>::min(low[v],low[u]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(vis[v])low[u]=<span class="built_in">std</span>::min(low[u],dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dfn[u]==low[u])</span><br><span class="line">&#123;</span><br><span class="line">++SccCnt;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl temp=s.top();s.pop();</span><br><span class="line">vis[temp]=<span class="literal">false</span>,color[temp]=SccCnt;</span><br><span class="line"><span class="keyword">if</span>(temp==u)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">n=read(),m=read(),k=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)li[i].u=read(),li[i].v=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=k;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl su=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=su;++j)ki44[j]=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=su;++j)pre[ki44[j]]=ki44[j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">EdgeAdd(i,i+n+n),EdgeAdd(i+n+n+n,i+n);</span><br><span class="line"><span class="keyword">if</span>(pre[i])</span><br><span class="line">EdgeAdd(pre[i]+n+n,i+n+n),EdgeAdd(i+n+n+n,pre[i]+n+n+n),</span><br><span class="line">EdgeAdd(i,pre[i]+n+n+n),EdgeAdd(pre[i]+n+n,i+n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=li[i].u,v=li[i].v;</span><br><span class="line">EdgeAdd(u+n,v),EdgeAdd(v+n,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n&lt;&lt;<span class="number">2</span>;++i)<span class="keyword">if</span>(!dfn[i])tarjan(i,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line"><span class="keyword">if</span>(color[i]==color[i+n]||color[i+n+n]==color[i+n+n+n])</span><br><span class="line">&#123;<span class="built_in">printf</span>(<span class="string">"NIE\n"</span>);<span class="keyword">goto</span> end;&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"TAK\n"</span>);</span><br><span class="line">end:;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:建立2-sat模型并进行前缀优化&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="图论-2-sat" scheme="https://www.lemir3.red/categories/图论/图论-2-sat/"/>
    
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="2-sat" scheme="https://www.lemir3.red/tags/2-sat/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」UVA1146 Now or later</title>
    <link href="https://www.lemir3.red/2020/09/30/jie-ti-bao-gao-uva1146-now-or-later/"/>
    <id>https://www.lemir3.red/2020/09/30/jie-ti-bao-gao-uva1146-now-or-later/</id>
    <published>2020-09-30T03:26:24.000Z</published>
    <updated>2020-09-30T03:39:26.305Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:二分答案建立2-sat模型判断成立</p><a id="more"></a><h1 id="UVA1146-Now-or-later"><a href="#UVA1146-Now-or-later" class="headerlink" title="UVA1146 Now or later"></a>UVA1146 Now or later</h1><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=3587" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>二分出一个长度应该是挺套路的,但是2-sat我不太会于是去复习了下…</p><p>对于矛盾的条件$(a,b)$,$(c,d)$,若$a$与$c$也矛盾,那么将$a$与$d$连边,以此类推,然后求出图中的强联通分量,若有原先的矛盾条件在一个强联通分量内则无解.</p><p>对于这道题,很显然的是飞机到达的两个时间是矛盾条件,仅能让一个成立,那么对于一个时间,若有另外一个飞机的时间在二分出的长度的范围内,那么说明这个飞机的时间与另外一个飞机的一个条件矛盾,如果选择了这个飞机的这个时间,另一个飞机就只能选择另一个时间,故将其连边.</p><p>怎么越做题越感觉啥都不会了…</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">2010</span>;</span><br><span class="line">lxl n,l,r,mid,ans,EdgeSize,PId,SccCnt,TimeCnt;</span><br><span class="line">lxl ei[big],li[big],head[big&lt;&lt;<span class="number">1</span>],dfn[big&lt;&lt;<span class="number">1</span>],low[big&lt;&lt;<span class="number">1</span>],vis[big&lt;&lt;<span class="number">1</span>],color[big&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next;</span><br><span class="line">&#125;e[big*big*<span class="number">10</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Pan</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl w,id,sign;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Pan &amp;another)<span class="keyword">const</span>&#123;<span class="keyword">return</span> w&lt;another.w;&#125;</span><br><span class="line">&#125;p[big&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">stack</span>&lt;lxl&gt;s;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v) EdgeAdd(u,v),EdgeAdd(v,u)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize]=(_Edge)&#123;v,head[u]&#125;;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(lxl u,lxl fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfn[u]=low[u]=++TimeCnt,s.push(u),vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(!dfn[v])tarjan(v,u),low[u]=<span class="built_in">std</span>::min(low[u],low[v]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(vis[v])low[u]=<span class="built_in">std</span>::min(low[u],dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dfn[u]==low[u])</span><br><span class="line">&#123;</span><br><span class="line">++SccCnt;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl temp=s.top();s.pop();</span><br><span class="line">vis[temp]=<span class="literal">false</span>,color[temp]=SccCnt;</span><br><span class="line"><span class="keyword">if</span>(temp==u)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(lxl lim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SccCnt=EdgeSize=TimeCnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head),<span class="built_in">memset</span>(color,<span class="number">0</span>,<span class="keyword">sizeof</span> color);</span><br><span class="line"><span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span> dfn),<span class="built_in">memset</span>(low,<span class="number">0</span>,<span class="keyword">sizeof</span> low),<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=PId;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">lxl <span class="title">tmp</span><span class="params">(i+<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(p[i].w+lim&gt;p[tmp].w&amp;&amp;tmp&lt;=PId)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i].id!=p[tmp].id)</span><br><span class="line">EdgeAdd(p[i].id+p[i].sign*n,p[tmp].id+(p[tmp].sign^<span class="number">1</span>)*n);</span><br><span class="line"><span class="comment">// EdgeAdd(p[i].id+(p[i].sign^1)*n,p[tmp].id+p[tmp].sign*n);</span></span><br><span class="line"><span class="comment">// debugi(p[i].id+p[i].sign*n),debug(p[tmp].id+(p[tmp].sign^1)*n),endl;</span></span><br><span class="line">++tmp;</span><br><span class="line">&#125;</span><br><span class="line">tmp=i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(p[tmp].w+lim&gt;p[i].w&amp;&amp;tmp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i].id!=p[tmp].id)</span><br><span class="line">EdgeAdd(p[i].id+p[i].sign*n,p[tmp].id+(p[tmp].sign^<span class="number">1</span>)*n);</span><br><span class="line">--tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=PId;++i)<span class="keyword">if</span>(!dfn[i])tarjan(i,i);</span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=PId;++i)debug(dfn[i]),debug(low[i]);</span></span><br><span class="line"><span class="comment">// return SccCnt==PId;</span></span><br><span class="line"><span class="comment">// if(lim==5002)debug(SccCnt);</span></span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="keyword">if</span>(color[i]==color[i+n])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("data2.txt","r",stdin);</span></span><br><span class="line"><span class="comment">// freopen("test.out","w",stdout);</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">l=PId=<span class="number">0</span>,r=<span class="number">1e7</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">ei[i]=read(),li[i]=read(),p[++PId]=(_Pan)&#123;ei[i],i,<span class="number">0</span>&#125;,</span><br><span class="line">p[++PId]=(_Pan)&#123;li[i],i,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="built_in">std</span>::sort(p+<span class="number">1</span>,p+<span class="number">1</span>+PId);</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid))l=mid+<span class="number">1</span>,ans=mid;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// debugi(check(5002));</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4999 5001</span></span><br><span class="line"><span class="comment">5000 10000</span></span><br><span class="line"><span class="comment">3000 4000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">11 12</span></span><br><span class="line"><span class="comment">11 13</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:二分答案建立2-sat模型判断成立&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="图论-2-sat" scheme="https://www.lemir3.red/categories/图论/图论-2-sat/"/>
    
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="2-sat" scheme="https://www.lemir3.red/tags/2-sat/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」UVA11374 Airport Express</title>
    <link href="https://www.lemir3.red/2020/09/30/jie-ti-bao-gao-uva11374-airport-express/"/>
    <id>https://www.lemir3.red/2020/09/30/jie-ti-bao-gao-uva11374-airport-express/</id>
    <published>2020-09-30T03:13:28.000Z</published>
    <updated>2020-09-30T03:28:29.823Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:基础最短路题</p><a id="more"></a><h1 id="UVA11374-Airport-Express"><a href="#UVA11374-Airport-Express" class="headerlink" title="UVA11374 Airport Express"></a>UVA11374 Airport Express</h1><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=2369" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题意是给定一张图,其中有些边只能走一次,求起点$S$到终点$T$的最短路,并输出最短路经过的点,最短路长度和仅能走一次的边从哪个点开始走.</p><p>那么思路就很显然,只连能够多次经过的边,以$S$为起点跑一遍最短路得到答案数组$dis1$,以$T$为起点跑一遍最短路得到答案数组$dis2$,枚举仅能经过一次的边$(u,v,w)$,用$dis1_u+dis2_v+w$更新答案即可.</p><p>然后考虑怎么输出最短路,在更新最短路时,用数组$from$记录每个点从哪个点转移来,用特殊边更新答案时,记录特殊边连的两点$(u,v)$(靠近$T$的一边为$v$),将正向最短路的$u$到$T$的$from$数组用反向最短路记录的$T$到$v$的$from$数组更新即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">5010</span>,large=<span class="number">10010</span>;</span><br><span class="line">lxl n,s,en,m,k,EdgeSize,ans,flag,fu,fv;</span><br><span class="line">lxl head[big],vis[big],from[<span class="number">2</span>][big],dis[<span class="number">2</span>][big],out[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,w,next;</span><br><span class="line">&#125;e[large&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="built_in">std</span>::priority_queue&lt;<span class="built_in">std</span>::pair&lt;lxl,lxl&gt; &gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v,w) EdgeAdd(u,v,w),EdgeAdd(v,u,w)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v,lxl w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize]=(_Edge)&#123;v,w,head[u]&#125;;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(lxl sign,lxl st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis[sign],<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dis[sign]),<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis),<span class="built_in">memset</span>(from[sign],<span class="number">0</span>,<span class="keyword">sizeof</span> from[sign]);</span><br><span class="line">dis[sign][st]=<span class="number">0</span>,q.push(<span class="built_in">std</span>::make_pair(<span class="number">0</span>,st));</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">lxl u=q.top().second;q.pop();</span><br><span class="line"><span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;</span><br><span class="line">vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v,w=e[i].w;</span><br><span class="line"><span class="keyword">if</span>(dis[sign][v]&gt;dis[sign][u]+w)dis[sign][v]=dis[sign][u]+w,from[sign][v]=u,q.push(<span class="built_in">std</span>::make_pair(-dis[sign][v],v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("data.txt","r",stdin);</span></span><br><span class="line"><span class="comment">// freopen("test.out","w",stdout);</span></span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(EdgeSize)<span class="built_in">endl</span>;</span><br><span class="line">EdgeSize=<span class="number">0</span>,<span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">s=read(),en=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read(),w=read();</span><br><span class="line">add(u,v,w);</span><br><span class="line">&#125;</span><br><span class="line">dijkstra(<span class="number">1</span>,en),dijkstra(<span class="number">0</span>,s),ans=dis[<span class="number">0</span>][en];</span><br><span class="line">k=read();flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=k;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read(),w=read();</span><br><span class="line"><span class="keyword">if</span>(dis[<span class="number">0</span>][v]&lt;dis[<span class="number">0</span>][u])<span class="built_in">std</span>::swap(u,v);</span><br><span class="line"><span class="keyword">if</span>(dis[<span class="number">0</span>][u]+dis[<span class="number">1</span>][v]+w&lt;ans)ans=dis[<span class="number">0</span>][u]+dis[<span class="number">1</span>][v]+w,flag=i,fu=u,fv=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">lxl <span class="title">tmp</span><span class="params">(fv)</span></span>;</span><br><span class="line">out[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(tmp!=en)out[++out[<span class="number">0</span>]]=tmp,tmp=from[<span class="number">1</span>][tmp];out[++out[<span class="number">0</span>]]=en;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(out[<span class="number">0</span>]);i;--i)from[<span class="number">0</span>][out[i]]=out[i<span class="number">-1</span>];</span><br><span class="line">from[<span class="number">0</span>][out[<span class="number">1</span>]]=fu;</span><br><span class="line">&#125;</span><br><span class="line">out[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">lxl tmp=en;<span class="keyword">while</span>(tmp!=s)out[++out[<span class="number">0</span>]]=tmp,tmp=from[<span class="number">0</span>][tmp];out[++out[<span class="number">0</span>]]=s;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(out[<span class="number">0</span>]);i;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,out[i]);</span><br><span class="line"><span class="keyword">if</span>(i<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span>(!flag)<span class="built_in">printf</span>(<span class="string">"Ticket Not Used\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,fu);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 1 4</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 2 4</span></span><br><span class="line"><span class="comment">3 4 4</span></span><br><span class="line"><span class="comment">1 4 10</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2 3 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:基础最短路题&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="图论-最短路" scheme="https://www.lemir3.red/categories/图论/图论-最短路/"/>
    
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="最短路" scheme="https://www.lemir3.red/tags/最短路/"/>
    
  </entry>
  
</feed>
