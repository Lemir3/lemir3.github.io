<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lemir3&#39;s blog</title>
  
  
  <link href="https://www.lemir3.red/atom.xml" rel="self"/>
  
  <link href="https://www.lemir3.red/"/>
  <updated>2020-10-27T09:18:19.427Z</updated>
  <id>https://www.lemir3.red/</id>
  
  <author>
    <name>lemir3</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「总结」10272020机房赛</title>
    <link href="https://www.lemir3.red/2020/10/27/zong-jie-10272020-ji-fang-sai/"/>
    <id>https://www.lemir3.red/2020/10/27/zong-jie-10272020-ji-fang-sai/</id>
    <published>2020-10-27T08:53:28.000Z</published>
    <updated>2020-10-27T09:18:19.427Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:无</p><a id="more"></a><h1 id="10272020机房赛"><a href="#10272020机房赛" class="headerlink" title="10272020机房赛"></a>10272020机房赛</h1><p>等会还要考一场,题解没时间写了,直接把赛后题解搬过来方便以后看吧.</p><h2 id="T1-签到-check"><a href="#T1-签到-check" class="headerlink" title="T1 签到(check)"></a>T1 签到(check)</h2><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p> 这道题数据范围比较小，所以我们可以直接暴力枚举答案。</p><h2 id="T2-染色-color"><a href="#T2-染色-color" class="headerlink" title="T2 染色(color)"></a>T2 染色(color)</h2><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p> 考虑质数可以分为 $2$ 和奇质数。</p><p> 我们考虑奇偶性染色，便可以满足所有的奇质数。因为有 $2$ 的存在，我们必须按照$\mod 4$ 的方式染色。</p><p> 那答案有没有可能小于 $4$ 呢？考虑 $1, 3, 6, 8$，任意两个数的差都是质数。所以答案不能为 $3$。</p><p> 当 $n$ 小于 $8$ 的时候爆搜。</p><p> 时间复杂度 $O(n)$（$n \geq 8$），$O(4^n)$（$n &lt; 8$）。</p><h2 id="T3-序列-array"><a href="#T3-序列-array" class="headerlink" title="T3 序列(array)"></a>T3 序列(array)</h2><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p> 首先我们有贪心策略：若 $a_i \leq a_j$，则 $b_i \geq b_j$。</p><p> 我们将 $a$ 排序，枚举有多少个 $b$ 达到了上界 $n$。</p><p> 若 $s$ 个达到了上界。我们设 $b_{s+1} = x$，则答案为</p><script type="math/tex; mode=display">in + x+\lfloor\frac{D-n\sum_{i=1}^sa_i-a_{s+1}x}{\sum_{i=s+2}^na_i}\rfloor (k+m-i-1)</script><p> 后面是形如 $x + a\lfloor \frac {bx+c}d\rfloor $ （$a \geq 0$） 的形式。这个函数形如锯齿状，有三种可能达到最大值。</p><ol><li><p>开始的第一个峰。</p></li><li><p>结束的最后一个峰。</p></li><li><p>结束点。</p><p>放在题中就是</p></li><li><p>尽可能提高 $\min{b_i}$，零头去提高 $b_s$。</p></li><li><p>尽可能提高 $b_s$，零头去提高 $\min b_i$（虽然零头显然不足以提高）。</p></li><li><p>让 $\min b_i$ 增加 $1$，剩下全部去提高 $b_s$。</p><p>时间复杂度 $O(Tn \log n)$。</p></li></ol><h2 id="T4-树上询问-query"><a href="#T4-树上询问-query" class="headerlink" title="T4 树上询问(query)"></a>T4 树上询问(query)</h2><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p> 考虑将链拆为两端 $a$ 到 $lca(a,b)$ 与 $lca(a,b)$ 到 $b$。</p><p> 记 $dep(x)$ 表示 $x$ 的深度。</p><p>  $a$ 到 $lca(a,b)$ 上的答案就是 $dep(x) - dep(a)=x$ 的 $x$ 个数，也就是说 $dep(x)-x=dep(a)$ 的 $x$ 个数，另一段的类似，这里只讨论这一段。</p><p> 注意到前面这个是一个常数，令 $b_x=dep(x)-x$，所以就是查链上有多少点 $x$ 满足 $b_x$ 为常数 $dep(a)$，这个差分一下，可以变成查点到根路径上有多少个点满足 $b_x$ 为常数。</p><p> 将询问离线，做一个树上前缀和，维护一个数组，表示每个 $b_x$ 的出现次数，然后DFS，DFS到 $x$ 时将 $b_x$ 插入到这个数组中，DFS出 $x$ 的时候将 $b_x$ 给删去，DFS到一个点的时候处理所有被离线到这个点的询问即可。</p><p> 总时间复杂度 $O(n+m)$。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>T1考虑了下快速幂的性质,魔改了一下拆指数的过程用来二分check就过了,就花了打代码和测几组特殊数据的时间.</p><p>T2开始想用图论,但是观察数据范围发现数据的跨度非常大,估计是个规律题给了不少高复杂度的暴力分,于是推了几组数据发现因为$4$是最小的合数,长度大于$7$的数列答案一定都是$4$,然后简单构造一下,小于$7$的规律就是用$1$不是质数的特点来构造.</p><p>T3看到题不久就发现答案是个单峰函数,想用三分来求,但是三分太久没写不会写了,于是写了个枚举并且随机选点然后对剩下的数跑背包取最大值的做法,但是背包的数组开小了没拿到分.其实想到单峰之后再往后考虑最值的三种取法就是题解里面的线性做法了,只是处理起来比较麻烦.</p><p>写T4剩一个小时左右,没想到用深度来转化链上的位置,虽说是个比较常见的套路但没怎么用过,想出这个就可以直接离线树上差分了,然后树上前缀和求出答案.所以因为不知道怎么做这个信息的差分,想出来的做法都和链的长度有关,于是就直接去枚举链了,拿了75pts.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:无&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.lemir3.red/categories/总结/"/>
    
    
    <category term="总结" scheme="https://www.lemir3.red/tags/总结/"/>
    
  </entry>
  
  <entry>
    <title>「总结」10262020机房赛</title>
    <link href="https://www.lemir3.red/2020/10/26/zong-jie-10262020-ji-fang-sai/"/>
    <id>https://www.lemir3.red/2020/10/26/zong-jie-10262020-ji-fang-sai/</id>
    <published>2020-10-26T08:06:25.000Z</published>
    <updated>2020-10-26T08:59:46.557Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:拉 垮 大 王 历 险 记</p><a id="more"></a><h1 id="10262020机房赛"><a href="#10262020机房赛" class="headerlink" title="10262020机房赛"></a>10262020机房赛</h1><p>deco的题,我好菜啊.</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>正解是个4维前缀和转移的数位dp,场上想到贡献的数只有2,3,5,7然后用数位dp搞但实在是不会写,于是做了个组合的思路,复杂度上有点瓶颈想不出来,拿了1e6的50pts.</p><p>就可以发现的是,如果一个数的数位积小于等于$k$,因为有$\gcd(a , b) \leq \min \{ a , b \}$,那么范围内所有合法的数都可以贡献进数对,否则的话需要减去一些$\gcd$大于$k$的数对.</p><p>设当前的数位积为$a$,我们通过枚举$a$大于$k$的约数(含$a$)的方式来减去这一部分数对,所以先预处理好范围内数位积为某个数的数的数量.</p><p>如果能用组合快速预处理就可以过这道题了,但是$n$是1e18的,感觉没什么做法,<del>或者另外写个数位dp?</del></p><h3 id="代码-50pts"><a href="#代码-50pts" class="headerlink" title="代码(50pts)"></a>代码(50pts)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">600010</span>,p=<span class="number">998244353</span>;</span><br><span class="line">lxl n,k,ans,distence,to;</span><br><span class="line">lxl vis[big],size[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">dig</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">cnt</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(x)cnt*=(x%<span class="number">10</span>),x/=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPow</span><span class="params">(lxl a,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl di=dig(i);</span><br><span class="line"><span class="keyword">if</span>(!di)<span class="keyword">continue</span>;</span><br><span class="line">++distence,++size[di],to=<span class="built_in">std</span>::max(to,di);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),k=read();</span><br><span class="line">prework();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=to;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl di=i;</span><br><span class="line">ans=(ans+size[i]*distence%p)%p;</span><br><span class="line"><span class="keyword">if</span>(di&gt;k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">lxl <span class="title">deco</span><span class="params">(<span class="built_in">sqrt</span>(di))</span></span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=deco;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k*j&gt;=di)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(di%j)<span class="keyword">continue</span>;</span><br><span class="line"><span class="function">lxl <span class="title">kl</span><span class="params">(di/j)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(kl);k&lt;=to;k+=kl)</span><br><span class="line"><span class="keyword">if</span>(!vis[k])ans=(ans-size[i]*size[k]%p+p)%p,vis[k]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(j&gt;k)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(j);k&lt;=to;k+=j)</span><br><span class="line"><span class="keyword">if</span>(!vis[k])ans=(ans-size[i]*size[k]%p+p)%p,vis[k]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=deco;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k*j&gt;=di)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(di%j)<span class="keyword">continue</span>;</span><br><span class="line"><span class="function">lxl <span class="title">kl</span><span class="params">(di/j)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(kl);k&lt;=to;k+=kl)</span><br><span class="line"><span class="keyword">if</span>(vis[k])vis[k]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(j&gt;k)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(j);k&lt;=to;k+=j)</span><br><span class="line"><span class="keyword">if</span>(vis[k])vis[k]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>推一下那个变化的式子发现每次变化是把$i$变到$2i  ~ \textrm{mod} ~ n+1$上去,然后变化$k$次就是$i2^{k} ~  \textrm{mod} ~ n+1$.</p><p>因为第一个数回到$1$上,所以$2^k \equiv 1 ~  \textrm{mod} ~ (n+1)$,那么对于所有$i$有$i2^k \equiv i ~ \textrm{mod} ~ (n+1)$,判断第一个数是否归位即可.</p><p>那么要做的事情是判断$n$是否是使得$2^k \equiv 1 ~ \textrm{mod} ~ (n+1)$的最小$k$.</p><p>首先根据欧拉定理有$2^{\varphi(n+1)} \equiv 1 ~ \textrm{mod} ~ (n+1)$,因为$n \geq \varphi(n+1)$当且仅当$n+1$是质数,所以先判断一下.</p><p>$n$现在已经满足条件了,但是不一定是最小的,但是因为有$2^k \equiv ( 2^{k} )^{\frac{n}{k}} \equiv 1 \quad \textrm{mod} ~ (n+1)$,最小的$k$一定是$n$的约数</p><p>将$n$进行唯一分解$p_1^{k_1} p_2^{k_2} \cdots p_n^{k_n}$,因为$k$是$n$的约数所以$k$一定是$\frac{n}{p1} , \frac{n}{p_2} , \cdots , \frac{n}{p_n}$中的某个数的约数,而且只要这个数合法$k$就合法,所以枚举$n$的质因子即可.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl small=<span class="number">1e6</span>+<span class="number">10</span>,big=<span class="number">1e7</span>+<span class="number">10</span>;</span><br><span class="line">lxl A,ans;</span><br><span class="line">lxl prime[small],muq[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;big;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!muq[i])prime[++prime[<span class="number">0</span>]]=i,muq[i]=i;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=prime[<span class="number">0</span>];++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(prime[j]*i&gt;big)<span class="keyword">break</span>;</span><br><span class="line">muq[i*prime[j]]=prime[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPow</span><span class="params">(lxl a,lxl b,lxl p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%p)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a%p);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">prework();</span><br><span class="line">A=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=A;i+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(muq[i+<span class="number">1</span>]!=i+<span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="function">lxl <span class="title">tmp</span><span class="params">(i)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(tmp&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(FastPow(<span class="number">2</span>,i/muq[tmp],i+<span class="number">1</span>)==<span class="number">1</span>)<span class="keyword">goto</span> end;</span><br><span class="line">tmp/=muq[tmp];</span><br><span class="line">&#125;</span><br><span class="line">ans+=i;</span><br><span class="line">end:;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.5lf\n"</span>,(<span class="keyword">double</span>)ans/(<span class="keyword">double</span>)(A/<span class="number">2</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><p>不会.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>T1开始想的是用数位dp,但是实现起来不太会然后想了个组合的做法拿了50pts,做法有个瓶颈不会所以没法做1e18的数据.因为开始的时候看了后面两个题都没有什么思路这题就做得有点久,没意料到一档50分是1e6,一档50分是1e18的题会有35分的数据n小于1e3,本来以为暴力肯定没分的,到头来就比暴力高了15pts.</p><p>然后时间剩一个小时四十分钟觉得T3更好拿分T2写了个模拟就去写T3了,但是合并的时候没处理到0挂掉了,而且没去推T2那个30pts的式子,其实那个式子推起来不难而且再往后想一点就正解了,推到后面打个表也行.</p><p>问题就主要出在没做T2上,T2拿了个最低的10pts,以后就算时间不多看到这种出现式子的题还是得处理一下,后面的做法都是随着式子循序渐进的.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:拉 垮 大 王 历 险 记&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.lemir3.red/categories/总结/"/>
    
    
    <category term="总结" scheme="https://www.lemir3.red/tags/总结/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu5590_赛车游戏</title>
    <link href="https://www.lemir3.red/2020/10/24/jie-ti-bao-gao-luogu5590-sai-che-you-xi/"/>
    <id>https://www.lemir3.red/2020/10/24/jie-ti-bao-gao-luogu5590-sai-che-you-xi/</id>
    <published>2020-10-24T01:52:41.000Z</published>
    <updated>2020-10-24T02:07:32.444Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:拓扑序上约束最短路dis</p><a id="more"></a><h1 id="luogu5590-赛车游戏"><a href="#luogu5590-赛车游戏" class="headerlink" title="luogu5590_赛车游戏"></a>luogu5590_赛车游戏</h1><p><a href="https://www.luogu.com.cn/problem/P5590" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>因为每条边的长度不超过$9$,所以只要$dis_v - dis_u \leq 9$,我们都可以通过改一条边权使得两条路径(原先经过$v$的路径,由$u$经过$v$的路径)等长.</p><p>所以有:</p><script type="math/tex; mode=display">1 \leq dis_v -dis_u \leq 9</script><p>那么我们将$dis$视为变量进行差分约束:</p><script type="math/tex; mode=display">dis_v - dis_u \leq 9\\dis_u - dis_v \leq -1</script><p>然后判断图中是否有负环即可.</p><p>需要注意的是我们约束的点必须是在$1$到$n$的路径上的,所以将图反向建一次,分别以$1$和$n$为起点遍历整个图,同时被遍历到的点即为$1$到$n$路径上的点.</p><p>然后对这些点重新建出图,按这张图的拓扑序来约束即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> In(x) (vis[0][x]&amp;&amp;vis[1][x])</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">1010</span>,large=<span class="number">2010</span>;</span><br><span class="line">lxl n,m;</span><br><span class="line">lxl vis[<span class="number">2</span>][big],dis[big],inq[big],in[big],uu[large],vv[large],degree[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl EdgeSize;</span><br><span class="line">lxl head[big];</span><br><span class="line">_Graph()&#123;<span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head),EdgeSize=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next,w;</span><br><span class="line">&#125;e[large];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v,lxl w=<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize]=(_Edge)&#123;v,head[u],w&#125;;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;G[<span class="number">3</span>],P;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;lxl&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(lxl u,lxl sign)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[sign][u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(G[sign].head[u]);~i;i=G[sign].e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=G[sign].e[i].v;</span><br><span class="line"><span class="keyword">if</span>(vis[sign][v])<span class="keyword">continue</span>;</span><br><span class="line">dfs(v,sign);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dis),<span class="built_in">memset</span>(inq,<span class="number">0</span>,<span class="keyword">sizeof</span> inq),<span class="built_in">memset</span>(in,<span class="number">0</span>,<span class="keyword">sizeof</span> in);</span><br><span class="line">dis[<span class="number">1</span>]=<span class="number">0</span>,inq[<span class="number">1</span>]=<span class="literal">true</span>,q.push(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">lxl u=q.front();q.pop(),inq[u]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(P.head[u]);~i;i=P.e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=P.e[i].v,w=P.e[i].w;</span><br><span class="line"><span class="keyword">if</span>(dis[v]&gt;dis[u]+w)</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]+w;</span><br><span class="line"><span class="keyword">if</span>(++in[v]&gt;n+<span class="number">2</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(!inq[v])q.push(v),inq[v]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line"><span class="keyword">if</span>(In(uu[i])&amp;&amp;In(vv[i]))</span><br><span class="line">G[<span class="number">2</span>].EdgeAdd(uu[i],vv[i]),++degree[vv[i]];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="keyword">if</span>(!degree[i]&amp;&amp;In(i))q.push(i);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">lxl u=q.front();q.pop();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(G[<span class="number">2</span>].head[u]);~i;i=G[<span class="number">2</span>].e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=G[<span class="number">2</span>].e[i].v;</span><br><span class="line">--degree[v],P.EdgeAdd(u,v,<span class="number">9</span>),P.EdgeAdd(v,u,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(!degree[v])q.push(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">uu[i]=read(),vv[i]=read();</span><br><span class="line">G[<span class="number">0</span>].EdgeAdd(uu[i],vv[i]),G[<span class="number">1</span>].EdgeAdd(vv[i],uu[i]);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);<span class="keyword">if</span>(!vis[<span class="number">0</span>][n])&#123;<span class="built_in">printf</span>(<span class="string">"-1\n"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">dfs(n,<span class="number">1</span>),build();</span><br><span class="line"><span class="keyword">if</span>(!SPFA())&#123;<span class="built_in">printf</span>(<span class="string">"-1\n"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=n;++i)debugi(vis[0][i]);endl;</span></span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=n;++i)debugi(vis[1][i]);endl;</span></span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=n;++i)debug(dis[i]),debug(from[i]),endl;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,n,m);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(In(uu[i])&amp;&amp;In(vv[i]))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld %lld %lld\n"</span>,uu[i],vv[i],<span class="number">1l</span>l*<span class="built_in">abs</span>(dis[uu[i]]-dis[vv[i]]));</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld %lld 1\n"</span>,uu[i],vv[i]);</span><br><span class="line"><span class="comment">// if(i==106)printf("check\n");</span></span><br><span class="line">&#125;</span><br><span class="line">end:;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10 10</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">5 6</span></span><br><span class="line"><span class="comment">6 7</span></span><br><span class="line"><span class="comment">7 8</span></span><br><span class="line"><span class="comment">8 9</span></span><br><span class="line"><span class="comment">9 10</span></span><br><span class="line"><span class="comment">1 10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">11 11</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">5 6</span></span><br><span class="line"><span class="comment">6 7</span></span><br><span class="line"><span class="comment">7 8</span></span><br><span class="line"><span class="comment">8 9</span></span><br><span class="line"><span class="comment">9 11</span></span><br><span class="line"><span class="comment">1 11</span></span><br><span class="line"><span class="comment">10 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:拓扑序上约束最短路dis&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="图论-差分约束" scheme="https://www.lemir3.red/categories/图论/图论-差分约束/"/>
    
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="差分约束" scheme="https://www.lemir3.red/tags/差分约束/"/>
    
  </entry>
  
  <entry>
    <title>「总结」10232020newcoder赛</title>
    <link href="https://www.lemir3.red/2020/10/23/zong-jie-10232020newcoder-sai/"/>
    <id>https://www.lemir3.red/2020/10/23/zong-jie-10232020newcoder-sai/</id>
    <published>2020-10-23T07:34:06.000Z</published>
    <updated>2020-10-23T09:26:39.753Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:T1日常挂分</p><a id="more"></a><h1 id="10232020newcoder赛"><a href="#10232020newcoder赛" class="headerlink" title="10232020newcoder赛"></a>10232020newcoder赛</h1><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>小凯的疑惑题,发现取模的规律就直接秒,没发现就老实打暴力40pts.</p><p>但是考场上想了半个小时就跳了,离结束一个小时回来看灵光一闪把规理找到了.</p><p>就是$ans = c \times 2^k \quad \textrm{mod}  ~ (a+b+c)$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line">lxl T,a,b,c,k,all,cua,cuc,len;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPow</span><span class="params">(lxl a,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%all)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a%all);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T=read();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">a=read(),b=read(),c=read(),k=read();</span><br><span class="line">all=a+b+c,a=a+b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,c*FastPow(<span class="number">2</span>,k)%all);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>做法挺多的,一种思路是只用考虑路径上最大的边,所以可以建出kruscal重构树,一个点的子树都是合法的,然后树上倍增,每个点bitset或者线段树合并维护颜色.</p><p>然后我的做法是用dijkstra的思路求出到达一个点需要经过最大的边,然后求每种颜色的最小需要的边权即可.</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 4557430888798830399</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">500010</span>,small=<span class="number">610</span>;</span><br><span class="line">lxl n,m,q,x,opt,EdgeSize,cnt,M,ans;</span><br><span class="line">lxl c[big],head[big],can[small],dis[big],vis[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next,w;</span><br><span class="line">&#125;e[big&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="built_in">std</span>::priority_queue&lt;<span class="built_in">std</span>::pair&lt;lxl,lxl&gt; &gt;que;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v,w) EdgeAdd(u,v,w),EdgeAdd(v,u,w)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v,lxl w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize]=(_Edge)&#123;v,head[u],w&#125;;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(lxl s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dis);</span><br><span class="line">dis[s]=<span class="number">0</span>,que.push(<span class="built_in">std</span>::make_pair(<span class="number">0</span>,s));</span><br><span class="line"><span class="keyword">while</span>(!que.empty())</span><br><span class="line">&#123;</span><br><span class="line">lxl u=que.top().second;que.pop();</span><br><span class="line"><span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(  <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v,w=e[i].w;</span><br><span class="line"><span class="keyword">if</span>(dis[v]&gt;<span class="built_in">std</span>::max(w,dis[u]))</span><br><span class="line">dis[v]=<span class="built_in">std</span>::max(dis[u],w),que.push(<span class="built_in">std</span>::make_pair(-dis[v],v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head),<span class="built_in">memset</span>(can,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> can);</span><br><span class="line">n=read(),m=read(),q=read(),x=read(),opt=read();</span><br><span class="line"><span class="keyword">if</span>(opt)M=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)c[i]=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read(),w=read();</span><br><span class="line">add(u,v,w);</span><br><span class="line">&#125;</span><br><span class="line">dijkstra(x);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)can[c[i]]=<span class="built_in">std</span>::min(can[c[i]],dis[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=q;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl l=read(),r=read();</span><br><span class="line"><span class="keyword">if</span>(opt)l=(l^ans)%M+<span class="number">1</span>,r=(r^ans)%M+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r)<span class="built_in">std</span>::swap(l,r);</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(  <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;small;++i)</span><br><span class="line"><span class="keyword">if</span>(can[i]&lt;=r)ans+=<span class="built_in">std</span>::min(r-can[i]+<span class="number">1</span>,r-l+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>不太会正解,但考场上做了个90pts做法:</p><p>把改变的点存下来,询问的时候遍历这些点,lca求询问点和改变点的距离判断是否已经被扩展到.</p><p>看上去很丑但真的有90pts…</p><h3 id="代码-90pts"><a href="#代码-90pts" class="headerlink" title="代码(90pts)"></a>代码(90pts)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl n,m,now,EdgeSize;</span><br><span class="line">lxl head[big],dep[big],size[big],son[big],fa[big],top[big];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;lxl,lxl&gt; &gt;pachy;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next;</span><br><span class="line">&#125;e[big&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v) EdgeAdd(u,v),EdgeAdd(v,u)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize]=(_Edge)&#123;v,head[u]&#125;;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(lxl u,lxl father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fa[u]=father,dep[u]=dep[father]+<span class="number">1</span>;</span><br><span class="line">size[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==father)<span class="keyword">continue</span>;</span><br><span class="line">dfs1(v,u);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(size[v]&gt;size[son[u]])son[u]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(lxl u,lxl top_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">top[u]=top_;</span><br><span class="line"><span class="keyword">if</span>(son[u])dfs2(son[u],top_);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa[u]||v==son[u])<span class="keyword">continue</span>;</span><br><span class="line">dfs2(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">LCA</span><span class="params">(lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])<span class="built_in">std</span>::swap(x,y);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y])<span class="built_in">std</span>::swap(x,y);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read();</span><br><span class="line">add(u,v);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">0</span>),dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++now,++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl opt=read(),x=read();</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)pachy.push_back(<span class="built_in">std</span>::make_pair(x,now));</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">2</span>)pachy.clear();</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=pachy.begin();it!=pachy.end();++it)</span><br><span class="line">&#123;</span><br><span class="line">lxl y=it-&gt;first,w=it-&gt;second;</span><br><span class="line">lxl lca=LCA(y,x);</span><br><span class="line"><span class="keyword">if</span>(dep[x]+dep[y]-dep[lca]-dep[fa[lca]]&lt;=now-w+<span class="number">1</span>)&#123;<span class="built_in">printf</span>(<span class="string">"wrxcsd\n"</span>);<span class="keyword">goto</span> end;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"orzFsYo\n"</span>);</span><br><span class="line">end:;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h2><p>阶乘做法都不会.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>T1的规律看得有点久,不过因为T2想得快没对后面做题产生什么影响.</p><p>快速幂乘出来之后忘取模了,掉了20pts.</p><p>T2很快就想了出来,用dijkstra来建出一个类似最短路树的结构然后前缀和.和qt一样把最大值开小了只拿了60pts,以后赋INF还是用memset赋个0x3f输出来看看再手动赋好了.</p><p>T3很数据结构,因为带个全局撤销的操作觉得很容易就被卡了所以没想出什么高效维护撤销的方法,看题解用了标记永久化线段树来维护扩散信息.场上写了个每次存下来改变的点,查询的时候查改变点与当前点树上距离的做法,本来直接就有90pts的但是看时间多觉得写几个subtask要稳一点,但是把sub3的判定写错了,sub4也给判成sub3做了,就掉了sub4的15pts.</p><p>T4看了一会不怎么会就没写.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:T1日常挂分&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.lemir3.red/categories/总结/"/>
    
    
    <category term="总结" scheme="https://www.lemir3.red/tags/总结/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu3150_pb的游戏（1）</title>
    <link href="https://www.lemir3.red/2020/10/22/jie-ti-bao-gao-luogu3150-pb-de-you-xi-1/"/>
    <id>https://www.lemir3.red/2020/10/22/jie-ti-bao-gao-luogu3150-pb-de-you-xi-1/</id>
    <published>2020-10-22T09:14:15.000Z</published>
    <updated>2020-10-22T09:25:00.442Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:简单博弈论</p><a id="more"></a><h1 id="luogu3150-pb的游戏（1）"><a href="#luogu3150-pb的游戏（1）" class="headerlink" title="luogu3150_pb的游戏（1）"></a>luogu3150_pb的游戏（1）</h1><p><a href="https://www.luogu.com.cn/problem/P3150" target="_blank" rel="noopener">题面</a></p><p>竟然评入门题,可以说是样例大幅降低难度了…</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>考虑胜利条件,我们发现$2$是一个必胜局面.</p><p>若当前局面为偶数,可以选择让对手拿到一个偶数局面或者一个奇数局面,但当当前局面为奇数时,对手一定可以拿到一个偶数局面,而必胜局面是一个偶数局面,所以如果先手拿到了偶数局面,就可以通过不断地给对方奇数局面的方式必胜,否则先手则必须在第一轮给后手提供偶数局面,先手必败.</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line">lxl T,n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T=read();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">n=read();</span><br><span class="line"><span class="built_in">printf</span>(n&amp;<span class="number">1</span>?<span class="string">"zs wins\n"</span>:<span class="string">"pb wins\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:简单博弈论&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-博弈论" scheme="https://www.lemir3.red/categories/数学/数学-博弈论/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="博弈论" scheme="https://www.lemir3.red/tags/博弈论/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」「SDOI2017」数字表格</title>
    <link href="https://www.lemir3.red/2020/10/22/jie-ti-bao-gao-sdoi2017-shu-zi-biao-ge/"/>
    <id>https://www.lemir3.red/2020/10/22/jie-ti-bao-gao-sdoi2017-shu-zi-biao-ge/</id>
    <published>2020-10-22T08:28:26.000Z</published>
    <updated>2020-10-22T09:09:35.960Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:指数上进行反演变化</p><a id="more"></a><h1 id="「SDOI2017」数字表格"><a href="#「SDOI2017」数字表格" class="headerlink" title="「SDOI2017」数字表格"></a>「SDOI2017」数字表格</h1><p><a href="https://loj.ac/problem/2000" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>求:</p><script type="math/tex; mode=display">\prod_{i = 1}^{n} \prod_{j = 1}^{m} f_{\gcd(i , j)}</script><p>其中$f$为斐波拉契数列.</p><p>枚举约数后进行反演,默认$n&lt;m$:</p><script type="math/tex; mode=display">\begin{aligned}\prod_{i = 1}^{n} \prod_{j = 1}^{m} f_{\gcd(i , j)}\\& = \prod_{d = 1}^{n} \prod_{i = 1}^{\lfloor \frac{n}{d} \rfloor} \prod_{j=1}^{\lfloor \frac{m}{d} \rfloor} f_{d}^{\epsilon(\gcd(i,j))}\\& = \prod_{d = 1}^{n} \prod_{i = 1}^{\lfloor \frac{n}{d} \rfloor} \prod_{j=1}^{\lfloor \frac{m}{d} \rfloor} f_{d}^{\sum_{l | \gcd(i , j)}\mu(l)}\\& = \prod_{d = 1}^{n} \prod_{i = 1}^{\lfloor \frac{n}{d} \rfloor} \prod_{j=1}^{\lfloor \frac{m}{d} \rfloor} f_{d}^{\sum_{l | i , l | j}\mu(l)}\\& = \prod_{d=1}^{n} f_{d}^{\sum_{l = 1}^{\lfloor \frac{n}{d} \rfloor} \mu(l) \sum_{i = 1}^{\lfloor \frac{n}{dl} \rfloor} \sum_{j = 1}^{\lfloor \frac{m}{dl} \rfloor} 1}\\& = \prod_{d = 1}^{n} f_{d}^{\sum_{l=1}^{\lfloor \frac{n}{d} \rfloor} \mu(l) \lfloor \frac{n}{dl} \rfloor \lfloor \frac{m}{dl} \rfloor}\end{aligned}</script><p>$O(n)$枚举$d$,每次$O(\sqrt{n})$数论分块求出$f_d$的指数,再用快速模指数算法$O(logn)$算出结果累乘进结果.</p><p>因为数据组数的规模达到了1e3所以无法通过本题,仅能获得60pts.</p><p>观察数据规模发现单次询问需要做到$O(\sqrt{n})$,于是考虑化简,一个经典方法是式子中出现了$dl$这类两个约数相乘时,改为枚举这两个约数的积,设$T=dl$:</p><script type="math/tex; mode=display">\begin{aligned}\prod_{d = 1}^{n} f_{d}^{\sum_{l=1}^{\lfloor \frac{n}{d} \rfloor} \mu(l) \lfloor \frac{n}{dl} \rfloor \lfloor \frac{m}{dl} \rfloor}\\& = \prod_{T = 1}^{n} \prod_{d | T}f_{d}^{\mu(\frac{T}{d}) \lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor}\\& = \prod_{T = 1}^{n} \big[ \prod_{d | T}f_{d}^{\mu(\frac{T}{d})} \big ] ^{ \lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor}\end{aligned}</script><p>设$\textrm{sum}(T) = \prod_{d | T}f_{d}^{\mu(\frac{T}{d})}$:</p><script type="math/tex; mode=display">\begin{aligned}\prod_{T = 1}^{n} \big[ \prod_{d | T}f_{d}^{\mu(\frac{T}{d})} \big ] ^{ \lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor}\\& = \prod_{T = 1}^{n} \textrm{sum}(T) ^{ \lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor}\end{aligned}</script><p>只要能求出$\textrm{sum}(T)$的前缀积,就能$O(\sqrt{n})$求解了.</p><p>注意到$\text{sum}(T)$由$T$的约数贡献,那么我们枚举约数$d$以及它的倍数$T$,将$f_{d}^{\mu(\frac{T}{d})}$乘进$\textrm{sum}(T)$.</p><p>因为$\mu(\frac{T}{d})$仅存在$1,-1,0$三种取值,$1$和$0$的情况都好算,$-1$的情况是$f_{d}$的逆元,预处理一下即可.</p><p>再算出$\textrm{sum}(T)$的前缀积和关于模数的乘法逆元就好了.</p><p>还有一点优化是通过扩展欧拉定理优化快速模指数算法,因为模数是一个质数,$a$与$m$互质,所以$a^b \equiv a^{b ~ \textrm{mod} ~ \varphi(m)} \quad (\textrm{mod} ~ m)$.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"assert.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">1000010</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">lxl T,n,m;</span><br><span class="line">lxl mu[big],feb[big],prime[big],vis[big],pref[big],invfeb[big],invpref[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPow</span><span class="params">(lxl a,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">b=(b+mod<span class="number">-1</span>)%(mod<span class="number">-1</span>);</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%mod)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a%mod);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">feb[<span class="number">1</span>]=feb[<span class="number">2</span>]=<span class="number">1</span>;<span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">3</span>);i&lt;big;++i)feb[i]=(feb[i<span class="number">-1</span>]+feb[i<span class="number">-2</span>])%mod;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;big;++i)invfeb[i]=FastPow(feb[i],mod<span class="number">-2</span>),pref[i]=<span class="number">1</span>;</span><br><span class="line">pref[<span class="number">0</span>]=mu[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;big;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])prime[++prime[<span class="number">0</span>]]=i,mu[i]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=prime[<span class="number">0</span>];++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(prime[j]*i&gt;big)<span class="keyword">break</span>;</span><br><span class="line">vis[prime[j]*i]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(i%prime[j])mu[i*prime[j]]=-mu[i];</span><br><span class="line"><span class="keyword">else</span> &#123;mu[i*prime[j]]=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;big;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(i);j&lt;big;j+=i)</span><br><span class="line"><span class="keyword">if</span>(mu[j/i]==<span class="number">1</span>)pref[j]=pref[j]*feb[i]%mod;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mu[j/i]==<span class="number">-1</span>)pref[j]=pref[j]*invfeb[i]%mod;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;big;++i)pref[i]=pref[i]*pref[i<span class="number">-1</span>]%mod;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;big;++i)invpref[i]=FastPow(pref[i],mod<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("product7.in","r",stdin);</span></span><br><span class="line"><span class="comment">// double st=clock();</span></span><br><span class="line">prework();</span><br><span class="line"><span class="comment">// double ed=clock();printf("using time:%llfms\n",ed-st);</span></span><br><span class="line">T=read();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="function">lxl <span class="title">ans</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> l(<span class="number">1</span>),r(<span class="number">0</span>);l&lt;=<span class="built_in">std</span>::min(n,m);l=r+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl nl=n/l,ml=m/l;</span><br><span class="line">r=<span class="built_in">std</span>::min(n/nl,m/ml);</span><br><span class="line">ans=ans*FastPow(pref[r]*invpref[l<span class="number">-1</span>]%mod,nl*ml)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*-*-*-*-*-*</span></span><br><span class="line"><span class="comment">in:</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">1000000 1000000</span></span><br><span class="line"><span class="comment">out:</span></span><br><span class="line"><span class="comment">297837367</span></span><br><span class="line"><span class="comment">*-*-*-*-*-*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:指数上进行反演变化&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-数论" scheme="https://www.lemir3.red/categories/数学/数学-数论/"/>
    
    <category term="数学-数论-莫比乌斯反演" scheme="https://www.lemir3.red/categories/数学/数学-数论/数学-数论-莫比乌斯反演/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="数论" scheme="https://www.lemir3.red/tags/数论/"/>
    
    <category term="莫比乌斯反演" scheme="https://www.lemir3.red/tags/莫比乌斯反演/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu1985_[USACO07OPEN]翻转棋</title>
    <link href="https://www.lemir3.red/2020/10/22/jie-ti-bao-gao-luogu1985-usaco07open-fan-zhuan-qi/"/>
    <id>https://www.lemir3.red/2020/10/22/jie-ti-bao-gao-luogu1985-usaco07open-fan-zhuan-qi/</id>
    <published>2020-10-22T01:17:21.000Z</published>
    <updated>2020-10-22T01:23:55.385Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:枚举第一行状态判断合法</p><a id="more"></a><h1 id="luogu1985-USACO07OPEN-翻转棋"><a href="#luogu1985-USACO07OPEN-翻转棋" class="headerlink" title="luogu1985_[USACO07OPEN]翻转棋"></a>luogu1985_[USACO07OPEN]翻转棋</h1><p><a href="https://www.luogu.com.cn/problem/P1985" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>假设现在我们已经做到了一个确定的行,那么可以发现这一行哪些位置要翻转只能和上一行有关.</p><p>因为上一行如果有位置没被翻,那么就只能靠这一行来翻了,如果有位置已经被翻了,那么这一行也一定不能去翻,不然以后就改不了了.</p><p>所以说只要枚举第一行哪些位置需要翻,就可以确定之后每一行的状态了,因为这样做确保了一行上面的所有行都要翻完,所以判断一下最后一行是否被翻完即可.</p><p>一次提交跑出57ms,比次优解快一倍.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">15</span>;</span><br><span class="line">lxl n,m;</span><br><span class="line">lxl a[big],b[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(lxl xs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl last(xs),tmp(a[0]);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">b[i]=xs=last;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;m;++j)</span><br><span class="line"><span class="keyword">if</span>(xs&amp;(<span class="number">1</span>&lt;&lt;j))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j<span class="number">-1</span>&gt;=<span class="number">0</span>)tmp^=(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>));</span><br><span class="line">tmp^=(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line"><span class="keyword">if</span>(j+<span class="number">1</span>&lt;m)tmp^=(<span class="number">1</span>&lt;&lt;(j+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">last=tmp,tmp=a[i+<span class="number">1</span>]^xs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> !last;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;n;<span class="built_in">endl</span>,++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;m;++j)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,(b[i]&gt;&gt;j)&amp;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl tmp[big];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;m;++j)</span><br><span class="line">tmp[m-j<span class="number">-1</span>]=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;m;++j)a[i]=(a[i]&lt;&lt;<span class="number">1</span>)|tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;(<span class="number">1</span>&lt;&lt;m);++i)</span><br><span class="line"><span class="keyword">if</span>(check(i))&#123;print();<span class="keyword">goto</span> end;&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"IMPOSSIBLE\n"</span>);</span><br><span class="line">end:;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*-*-*-*-*-*</span></span><br><span class="line"><span class="comment">in:</span></span><br><span class="line"><span class="comment">4 4</span></span><br><span class="line"><span class="comment">0 0 0 0</span></span><br><span class="line"><span class="comment">0 0 1 0</span></span><br><span class="line"><span class="comment">0 1 1 1</span></span><br><span class="line"><span class="comment">0 0 1 0</span></span><br><span class="line"><span class="comment">out:</span></span><br><span class="line"><span class="comment">0 0 0 0</span></span><br><span class="line"><span class="comment">0 0 0 0</span></span><br><span class="line"><span class="comment">0 0 1 0</span></span><br><span class="line"><span class="comment">0 0 0 0</span></span><br><span class="line"><span class="comment">*-*-*-*-*-*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*-*-*-*-*-*</span></span><br><span class="line"><span class="comment">in:</span></span><br><span class="line"><span class="comment">3 3</span></span><br><span class="line"><span class="comment">0 1 0</span></span><br><span class="line"><span class="comment">1 1 1</span></span><br><span class="line"><span class="comment">0 1 0</span></span><br><span class="line"><span class="comment">out:</span></span><br><span class="line"><span class="comment">0 0 0</span></span><br><span class="line"><span class="comment">0 1 0</span></span><br><span class="line"><span class="comment">0 0 0</span></span><br><span class="line"><span class="comment">*-*-*-*-*-*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*-*-*-*-*-*</span></span><br><span class="line"><span class="comment">in:</span></span><br><span class="line"><span class="comment">3 3</span></span><br><span class="line"><span class="comment">1 1 0</span></span><br><span class="line"><span class="comment">1 0 1</span></span><br><span class="line"><span class="comment">0 1 1</span></span><br><span class="line"><span class="comment">out:</span></span><br><span class="line"><span class="comment">1 0 0</span></span><br><span class="line"><span class="comment">0 0 0</span></span><br><span class="line"><span class="comment">0 0 1</span></span><br><span class="line"><span class="comment">*-*-*-*-*-*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:枚举第一行状态判断合法&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://www.lemir3.red/categories/其他/"/>
    
    
    <category term="其他" scheme="https://www.lemir3.red/tags/其他/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu1282_多米诺骨牌</title>
    <link href="https://www.lemir3.red/2020/10/21/jie-ti-bao-gao-luogu1282-duo-mi-nuo-gu-pai/"/>
    <id>https://www.lemir3.red/2020/10/21/jie-ti-bao-gao-luogu1282-duo-mi-nuo-gu-pai/</id>
    <published>2020-10-21T12:46:43.000Z</published>
    <updated>2020-10-21T12:57:23.655Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:模型转化后dp</p><a id="more"></a><h1 id="luogu1282-多米诺骨牌"><a href="#luogu1282-多米诺骨牌" class="headerlink" title="luogu1282_多米诺骨牌"></a>luogu1282_多米诺骨牌</h1><p><a href="https://www.luogu.com.cn/problem/P1282" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先把这个翻转的模型转化一下,先把所有位置都转化到上面大于下面,然后算出两边的差值,记录有多少位置是需要翻转的.</p><p>现在翻转一个位置,设上面的数字为$a$,下面的为$b$,这样就可以让差值减少$2 \times ( a - b )$,如果原先就是上面的数大于下面的数的话,这样做的代价为$1$,否则为$-1$,最后加上之前算出的翻转的值即可.</p><p>现在需要解决的问题是在让差值减少得最小的情况下让代价尽量小,设$fill_{i , j}$表示考虑前面的$i$个位置,当前的差值能否被刚好减少$j$,$f_{i , j}$表示考虑前面的$i$个位置,当前的差值被刚好减少了$j$时的最小代价,每次继承状态然后简单转移一下.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 4557430888798830399</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl small=<span class="number">1010</span>,big=<span class="number">10010</span>;</span><br><span class="line">lxl n,sum,all;</span><br><span class="line">lxl v[big],w[big],f[small][big],fill[small][big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("P1282_2.in","r",stdin);</span></span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl a=read(),b=read();</span><br><span class="line"><span class="keyword">if</span>(a&gt;b)v[i]=<span class="number">2</span>*(a-b),sum+=a-b,w[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> v[i]=<span class="number">2</span>*(b-a),sum+=b-a,w[i]=<span class="number">-1</span>,++all;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=sum;++j)</span><br><span class="line">&#123;</span><br><span class="line">f[i][j]=f[i<span class="number">-1</span>][j],fill[i][j]=fill[i<span class="number">-1</span>][j];</span><br><span class="line"><span class="keyword">if</span>(fill[i<span class="number">-1</span>][j-v[i]]||!(j-v[i]))</span><br><span class="line">!fill[i][j]?fill[i][j]=<span class="literal">true</span>,f[i][j]=f[i<span class="number">-1</span>][j-v[i]]+w[i]:f[i][j]=<span class="built_in">std</span>::min(f[i][j],f[i<span class="number">-1</span>][j-v[i]]+w[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(sum);~(i<span class="number">-1</span>);--i)<span class="keyword">if</span>(fill[n][i])&#123;<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,all+f[n][i]);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">6 1</span></span><br><span class="line"><span class="comment">1 5</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">3 1</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:模型转化后dp&lt;/p&gt;</summary>
    
    
    
    <category term="动态规划" scheme="https://www.lemir3.red/categories/动态规划/"/>
    
    
    <category term="动态规划" scheme="https://www.lemir3.red/tags/动态规划/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu1072_Hankson_的趣味题</title>
    <link href="https://www.lemir3.red/2020/10/21/jie-ti-bao-gao-luogu1072-hankson-de-qu-wei-ti/"/>
    <id>https://www.lemir3.red/2020/10/21/jie-ti-bao-gao-luogu1072-hankson-de-qu-wei-ti/</id>
    <published>2020-10-21T08:41:37.000Z</published>
    <updated>2020-10-22T08:52:50.606Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:推性质后枚举</p><a id="more"></a><h1 id="luogu1072-Hankson-的趣味题"><a href="#luogu1072-Hankson-的趣味题" class="headerlink" title="luogu1072_Hankson_的趣味题"></a>luogu1072_Hankson_的趣味题</h1><p><a href="https://www.luogu.com.cn/problem/P1072" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>意思是要求:</p><script type="math/tex; mode=display">\begin{cases}\gcd(x , a_0) = a_1\\\textrm{lcm} ( x ,b_0 )  = b_1 \end{cases}</script><p>那么转化一下就是:</p><script type="math/tex; mode=display">\begin{cases}\gcd(x , a_0) = a_1\\\frac {x \cdot b_0}{\gcd(x ,b_0)}  = b_1 \end{cases}\\\rightarrow\\\begin{cases}\gcd(\frac{x}{a1} , \frac{a_0}{a_1}) = 1\\\gcd(\frac{b1}{x} , \frac{b_1}{b_0}) = 1\end{cases}</script><p>然后枚举$b_1$的约数作为$x$,判断一下是否满足是$a_1$的倍数和两个等式即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line">lxl T,a0,a1,b0,b1;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">gcd</span><span class="params">(lxl a,lxl b)</span></span>&#123;<span class="keyword">return</span> !b?a:gcd(b,a%b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T=read();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">lxl <span class="title">ans</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">a0=read(),a1=read(),b0=read(),b1=read();</span><br><span class="line">b0=b1/b0,a0=a0/a1;</span><br><span class="line">lxl len=<span class="built_in">sqrt</span>(b1);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> x(<span class="number">1</span>);x&lt;=len;++x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b1%x)<span class="keyword">continue</span>;</span><br><span class="line">lxl x1=x,x2=b1/x;</span><br><span class="line"><span class="keyword">if</span>(!(b1%x1))</span><br><span class="line"><span class="keyword">if</span>(!(x1%a1))</span><br><span class="line"><span class="keyword">if</span>(gcd(b1/x1,b0)==<span class="number">1</span>&amp;&amp;gcd(x1/a1,a0)==<span class="number">1</span>)</span><br><span class="line">++ans;</span><br><span class="line"><span class="keyword">if</span>(x1==x2)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(!(b1%x2))</span><br><span class="line"><span class="keyword">if</span>(!(x2%a1))</span><br><span class="line"><span class="keyword">if</span>(gcd(b1/x2,b0)==<span class="number">1</span>&amp;&amp;gcd(x2/a1,a0)==<span class="number">1</span>)</span><br><span class="line">++ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:推性质后枚举&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-数论" scheme="https://www.lemir3.red/categories/数学/数学-数论/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="数论" scheme="https://www.lemir3.red/tags/数论/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」UVA12983_The_Battle_of_Chibi</title>
    <link href="https://www.lemir3.red/2020/10/21/jie-ti-bao-gao-uva12983-the-battle-of-chibi/"/>
    <id>https://www.lemir3.red/2020/10/21/jie-ti-bao-gao-uva12983-the-battle-of-chibi/</id>
    <published>2020-10-21T08:11:01.000Z</published>
    <updated>2020-10-21T08:28:58.227Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:树状数组优化转移</p><a id="more"></a><h1 id="UVA12983-The-Battle-of-Chibi"><a href="#UVA12983-The-Battle-of-Chibi" class="headerlink" title="UVA12983_The_Battle_of_Chibi"></a>UVA12983_The_Battle_of_Chibi</h1><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=4866" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>设$f_{i , j}$表示在以第$i$位作为序列的结尾时出现长度为$j$的上升子序列的个数,那么显然有转移:</p><script type="math/tex; mode=display">f_{i , j} = f_{k , j - 1} + 1 ~ ( ~ a_k < a_i ~ , ~ k < i ~ )</script><p>这样转移是$O( n^2 m )$的,时间上无法接受,但是我们发现,既然是由$i$之前小于$a_i$的位置来转移,那么我们可以在之前的转移中就把这样的转移位置存进树状数组中,具体来说,对于每一个$j$,我们开一颗树状数组,如果$f_{k , j}$有值,那么在$j$这一颗树状数组的$a_k$位置上插入$f_{k , j}$,之后的转移就可以直接在需要的$j$对应的树状数组上查询了,时间复杂度为$O(nmlogn)$.</p><p>注意对$a$离散化.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">1010</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">lxl T,n,m,case_;</span><br><span class="line">lxl f[big][big],a[big],b[big],t[big][big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl *T,lxl x,lxl k)</span></span>&#123;<span class="keyword">for</span>(;x&lt;big;x+=lowbit(x))T[x]=(T[x]+k)%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">query</span><span class="params">(lxl *T,lxl x)</span></span>&#123;<span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;<span class="keyword">for</span>(;x;x-=lowbit(x))sum=(sum+T[x])%mod;<span class="keyword">return</span> sum;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("data.txt","r",stdin);</span></span><br><span class="line"><span class="comment">// freopen("data.out","w",stdout);</span></span><br><span class="line">T=read();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(t,<span class="number">0</span>,<span class="keyword">sizeof</span> t),<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=b[i]=read();</span><br><span class="line"><span class="built_in">std</span>::sort(b+<span class="number">1</span>,b+<span class="number">1</span>+n);lxl len=<span class="built_in">std</span>::unique(b+<span class="number">1</span>,b+<span class="number">1</span>+n)-b<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=<span class="built_in">std</span>::lower_bound(b+<span class="number">1</span>,b+<span class="number">1</span>+len,a[i])-b;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="built_in">std</span>::min((lxl)i,m));j&gt;=<span class="number">2</span>;--j)</span><br><span class="line">&#123;</span><br><span class="line">lxl add=query(t[j<span class="number">-1</span>],a[i]<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(add)f[i][j]=add,modify(t[j],a[i],add);</span><br><span class="line">&#125;</span><br><span class="line">f[i][<span class="number">1</span>]=<span class="number">1</span>,modify(t[<span class="number">1</span>],a[i],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">lxl ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)ans=(ans+f[i][m])%mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%lld: %lld\n"</span>,++case_,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 5 3</span></span><br><span class="line"><span class="comment">1 3 4 2 5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">3 2</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">7 4</span></span><br><span class="line"><span class="comment">1 7 7 8 6 4 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:树状数组优化转移&lt;/p&gt;</summary>
    
    
    
    <category term="动态规划" scheme="https://www.lemir3.red/categories/动态规划/"/>
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/动态规划/数据结构/"/>
    
    <category term="数据结构-树状数组" scheme="https://www.lemir3.red/categories/动态规划/数据结构/数据结构-树状数组/"/>
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="动态规划" scheme="https://www.lemir3.red/tags/动态规划/"/>
    
    <category term="树状数组" scheme="https://www.lemir3.red/tags/树状数组/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」CF1288D_Minimax_Problem</title>
    <link href="https://www.lemir3.red/2020/10/20/jie-ti-bao-gao-cf1288d-minimax-problem/"/>
    <id>https://www.lemir3.red/2020/10/20/jie-ti-bao-gao-cf1288d-minimax-problem/</id>
    <published>2020-10-20T13:30:39.000Z</published>
    <updated>2020-10-20T13:43:47.531Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:二分答案后将序列按大小逻辑关系转化成二进制串求解</p><a id="more"></a><h1 id="CF1288D-Minimax-Problem"><a href="#CF1288D-Minimax-Problem" class="headerlink" title="CF1288D_Minimax_Problem"></a>CF1288D_Minimax_Problem</h1><p><a href="https://codeforces.com/contest/1288/problem/D" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题意是找$n$个长度为$m$的序列中的两个序列,其中对位取最大值形成的新序列中的最小值要尽量大.</p><p>这种限制套路性地想到用二分答案,二分一个新序列中的最小值,然后发现要找的两个序列中必须满足在某一位上至少有其中一个大于二分的这个值.</p><p>这里有一个逻辑关系,考虑$m$的最值为$8$,把每个序列按照这个逻辑关系压成二进制串,然后相当于是在$n$个数中找2个数or等于$2^m - 1$.</p><p>可以开一个桶,记录下当前有的二进制串,然后枚举每一个数,取它的补集,判断桶中是否有这个数.</p><p>有点不对劲,因为是or,所以可能两个数的某一位上都是$1$,这样做是没法求出的,所以说得取补集的超集来判断.</p><p>求一个集的超集就取它的补集,然后枚举补集的子集,将枚举到的子集和原集并起来.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl small=<span class="number">10</span>,midd=<span class="number">300</span>,big=<span class="number">300010</span>;</span><br><span class="line">lxl n,m,choa,chob;</span><br><span class="line">lxl a[big][small],bit[big],<span class="built_in">map</span>[midd];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(lxl lim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(<span class="built_in">map</span>,<span class="number">0</span>,<span class="keyword">sizeof</span> <span class="built_in">map</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">bit[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;m;++j)</span><br><span class="line">bit[i]=(bit[i]&lt;&lt;<span class="number">1</span>)|(a[i][j]&gt;=lim);</span><br><span class="line"><span class="keyword">if</span>(bit[i]==(<span class="number">1</span>&lt;&lt;m)<span class="number">-1</span>)&#123;choa=chob=i;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line"><span class="built_in">map</span>[bit[i]]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl all=(<span class="number">1</span>&lt;&lt;m)<span class="number">-1</span>;</span><br><span class="line">lxl want=all^bit[i];</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[want])&#123;choa=i,chob=<span class="built_in">map</span>[want];<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(bit[i]);j;j=bit[i]&amp;(j<span class="number">-1</span>))</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[want|j])&#123;choa=i,chob=<span class="built_in">map</span>[want|j];<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;m;++j)</span><br><span class="line">a[i][j]=read();</span><br><span class="line">lxl l(0),r(1e9),mid,ansa,ansb;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid))ansa=choa,ansb=chob,l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,ansa,ansb);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:二分答案后将序列按大小逻辑关系转化成二进制串求解&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://www.lemir3.red/categories/其他/"/>
    
    <category term="其他-二分" scheme="https://www.lemir3.red/categories/其他/其他-二分/"/>
    
    
    <category term="其他" scheme="https://www.lemir3.red/tags/其他/"/>
    
    <category term="二分" scheme="https://www.lemir3.red/tags/二分/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」UVA515_King</title>
    <link href="https://www.lemir3.red/2020/10/20/jie-ti-bao-gao-uva515-king/"/>
    <id>https://www.lemir3.red/2020/10/20/jie-ti-bao-gao-uva515-king/</id>
    <published>2020-10-20T12:37:22.000Z</published>
    <updated>2020-10-20T12:44:11.943Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:转化成前缀和后差分约束</p><a id="more"></a><h1 id="UVA515-King"><a href="#UVA515-King" class="headerlink" title="UVA515_King"></a>UVA515_King</h1><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=456" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>想完后都开始写代码了才发现这题写过了…</p><p>发现给出的信息是变量的区间和,那么我们转化成前缀和.</p><p>也就是:</p><script type="math/tex; mode=display">a_x + a_{x+1} + a_{x+2} + \cdots + a_{y} < k\\\rightarrow pre_{y} -pre_{x-1} \leq k + 1\\a_{x} + a_{x+1} + a_{x+2} + \cdots + a_{y} > k\\\rightarrow pre_{x-1} - pre_{y} \leq 1-k</script><p>然后建一个源点连向所有点方便遍历,判负环即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">110</span>;</span><br><span class="line">lxl n,m,EdgeSize;</span><br><span class="line">lxl head[big],dis[big],in[big],vis[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next,w;</span><br><span class="line">&#125;e[big*big];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;lxl&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v,lxl w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize]=(_Edge)&#123;v,head[u],w&#125;;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0xcc</span>,<span class="keyword">sizeof</span> dis),<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis),dis[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line">q.push(n+<span class="number">1</span>),vis[n+<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">lxl u=q.front();q.pop(),vis[u]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v,w=e[i].w;</span><br><span class="line"><span class="keyword">if</span>(dis[v]&lt;dis[u]+w)</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]+w;</span><br><span class="line"><span class="keyword">if</span>(++in[v]&gt;n+<span class="number">2</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])q.push(v),vis[v]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">114514</span>)</span><br><span class="line">&#123;</span><br><span class="line">n=read();<span class="keyword">if</span>(!n)<span class="keyword">break</span>;</span><br><span class="line">m=read();</span><br><span class="line">EdgeSize=<span class="number">0</span>,<span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head),<span class="built_in">memset</span>(in,<span class="number">0</span>,<span class="keyword">sizeof</span> in);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl a=read(),b=read(),k;</span><br><span class="line"><span class="keyword">char</span> opt[<span class="number">10</span>];<span class="built_in">scanf</span>(<span class="string">"%s"</span>,opt+<span class="number">1</span>);</span><br><span class="line">k=read();</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">1</span>]==<span class="string">'g'</span>)EdgeAdd(a<span class="number">-1</span>,a+b,k+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> EdgeAdd(a+b,a<span class="number">-1</span>,<span class="number">1</span>-k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;=n;++i)EdgeAdd(n+<span class="number">1</span>,i,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(SPFA()?<span class="string">"lamentable kingdom\n"</span>:<span class="string">"successful conspiracy\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:转化成前缀和后差分约束&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="图论-差分约束" scheme="https://www.lemir3.red/categories/图论/图论-差分约束/"/>
    
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="差分约束" scheme="https://www.lemir3.red/tags/差分约束/"/>
    
  </entry>
  
  <entry>
    <title>「总结」CF1366D_Two_Divisors</title>
    <link href="https://www.lemir3.red/2020/10/20/zong-jie-cf1366d-two-divisors/"/>
    <id>https://www.lemir3.red/2020/10/20/zong-jie-cf1366d-two-divisors/</id>
    <published>2020-10-20T09:49:30.000Z</published>
    <updated>2020-10-20T10:32:10.398Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:考虑线性筛性质和算术基本定理</p><a id="more"></a><h1 id="CF1366D-Two-Divisors"><a href="#CF1366D-Two-Divisors" class="headerlink" title="CF1366D_Two_Divisors"></a>CF1366D_Two_Divisors</h1><p><a href="https://codeforces.com/problemset/problem/1366/D" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先如果$a$是质数的话肯定是无解的,因为大于一的约数都凑不够.</p><p>然后考虑算术基本定理下$a$的分解:</p><script type="math/tex; mode=display">a = p_1^{k_1} p_2^{k_2} p_3^{k_3} \cdots p_n^{k_n}</script><p>取$\{ p_1 , p_2 , p_3 , \cdots p_k \}$作为一组,$\{ p_{k + 1} , p_{k + 2} , p_{k + 3} \cdots p_{n}  \}$作为一组,可以发现,因为两边的质数互不相交,所以加起来之后一定与$p_1^{k_1} p_2^{k_2} p_3^{k_3} \cdots p_n^{k_n}$互质.</p><p>其实就是把质数当成空间的基,做一个由全体质数构成的空间的由$a$分解出的质数构成的子空间,取两组交为空并为原子空间的基底的基底就是解了.</p><p>然后可以直接埃筛做,第一次的因子存下来作为一组,后面的因子乘起来作为一组.</p><p>然后我考虑了线筛求出一个数的最小质因子求解,具体看代码吧.</p><p>注意如果$a$分解后只有一个质数,那么也是无解的.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">500010</span>,large=<span class="number">1e7</span>+<span class="number">10</span>;</span><br><span class="line">lxl n;</span><br><span class="line">lxl a[big],prime[big],ans[<span class="number">2</span>][big],mdiv[large];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;large;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!mdiv[i])prime[++prime[<span class="number">0</span>]]=i,mdiv[i]=i;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=prime[<span class="number">0</span>];++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(prime[j]*i&gt;large)<span class="keyword">break</span>;</span><br><span class="line">mdiv[prime[j]*i]=prime[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">prework();</span><br><span class="line">n=read();<span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line"><span class="keyword">if</span>(mdiv[a[i]]==a[i])ans[<span class="number">0</span>][i]=ans[<span class="number">1</span>][i]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">lxl ans1(mdiv[a[i]]),ans2(<span class="number">1</span>),tmp(a[i]);</span><br><span class="line">lxl p=mdiv[tmp];<span class="keyword">while</span>(!(tmp%p))tmp/=p;</span><br><span class="line"><span class="keyword">while</span>(tmp&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans2*=mdiv[tmp],p=mdiv[tmp];</span><br><span class="line"><span class="keyword">while</span>(!(tmp%p))tmp/=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans2==<span class="number">1</span>)ans[<span class="number">0</span>][i]=ans[<span class="number">1</span>][i]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> ans[<span class="number">0</span>][i]=ans1,ans[<span class="number">1</span>][i]=ans2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="built_in">printf</span>(<span class="string">"%lld "</span>,ans[<span class="number">0</span>][i]);<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="built_in">printf</span>(<span class="string">"%lld "</span>,ans[<span class="number">1</span>][i]);<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:考虑线性筛性质和算术基本定理&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-数论" scheme="https://www.lemir3.red/categories/数学/数学-数论/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="数论" scheme="https://www.lemir3.red/tags/数论/"/>
    
  </entry>
  
  <entry>
    <title>「总结」10202020机房赛</title>
    <link href="https://www.lemir3.red/2020/10/20/zong-jie-10202020-ji-fang-sai/"/>
    <id>https://www.lemir3.red/2020/10/20/zong-jie-10202020-ji-fang-sai/</id>
    <published>2020-10-20T08:15:19.000Z</published>
    <updated>2020-10-20T08:41:50.492Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:代码无价,谨慎操作</p><a id="more"></a><h1 id="10202020机房赛"><a href="#10202020机房赛" class="headerlink" title="10202020机房赛"></a>10202020机房赛</h1><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>需要开六次根取下整才能等于$1$的最大数是$2^{32} - 1$,然后就没了.</p><p>傻逼出题人还试图给$0$开根.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ulxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">110</span>;</span><br><span class="line">lxl n,ans;</span><br><span class="line">ulxl x;</span><br><span class="line">lxl limit[big]=&#123;<span class="number">0</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> s[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=<span class="number">10</span>;++i)</span><br><span class="line"><span class="keyword">if</span>((s[i]-<span class="string">'0'</span>)&gt;limit[i])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i]-<span class="string">'0'</span>&lt;limit[i])<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _sqrt(ulxl &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">ulxl tmp=x,l=<span class="number">1</span>,r=x,mid;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(mid*mid&lt;=tmp)l=mid+<span class="number">1</span>,x=mid;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">n=<span class="built_in">strlen</span>(s+<span class="number">1</span>),ans=x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(n&gt;<span class="number">10</span>)&#123;<span class="built_in">printf</span>(<span class="string">"TAT\n"</span>);<span class="keyword">goto</span> end;&#125;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">10</span>&amp;&amp;!check())&#123;<span class="built_in">printf</span>(<span class="string">"TAT\n"</span>);<span class="keyword">goto</span> end;&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)x=(x*<span class="number">10</span>)+(s[i]^<span class="number">48</span>);</span><br><span class="line"><span class="keyword">if</span>(!x)&#123;<span class="built_in">printf</span>(<span class="string">"TAT\n"</span>);<span class="keyword">goto</span> end;&#125;</span><br><span class="line"><span class="keyword">while</span>(x&gt;<span class="number">1</span>)_sqrt(x),++ans;<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">end:;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>数据范围给到1e5就是道平面欧几里得生成树题了…</p><p>然而只有2e3,所以prim先跑出生成树,在上面记录边,然后$2^m$枚举多边形每次跑kruscal.</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ttf(x) ((x)*(x))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">2010</span>;</span><br><span class="line">lxl n,m,ans;</span><br><span class="line">lxl dis[big][big],from[big],di[big],k[big],c[big],a[big][big],fa[big],vis[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl x,y;</span><br><span class="line">&#125;p[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl u,v;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Edge &amp;another)<span class="keyword">const</span>&#123;<span class="keyword">return</span> dis[u][v]&lt;dis[another.u][another.v];&#125;</span><br><span class="line">&#125;e[big&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">find</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">return</span> x==fa[x]?x:fa[x]=find(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)p[i].x=read(),p[i].y=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="keyword">for</span>(R <span class="keyword">int</span> j(i+<span class="number">1</span>);j&lt;=n;++j)dis[i][j]=dis[j][i]=ttf(p[i].x-p[j].x)+ttf(p[i].y-p[j].y);</span><br><span class="line"><span class="built_in">memset</span>(di,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> di),di[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>),k(<span class="number">0</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">k=<span class="number">0</span>;<span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=n;++j)(!vis[j]&amp;&amp;di[j]&lt;di[k])?k=j:<span class="number">1</span>;</span><br><span class="line">vis[k]=<span class="literal">true</span>,e[i<span class="number">-1</span>]=(_Edge)&#123;from[k],k&#125;,ans+=di[k];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=n;++j)(!vis[j]&amp;&amp;di[j]&gt;dis[k][j])?di[j]=dis[from[j]=k][j]:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::sort(e+<span class="number">1</span>,e+n);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)&#123;k[i]=read(),c[i]=read();<span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=k[i];++j)a[i][j]=read();&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> s(<span class="number">0</span>);s&lt;(<span class="number">1</span>&lt;&lt;m);++s)</span><br><span class="line">&#123;</span><br><span class="line">lxl tmp(0),bitt(s);for(R int i(1);i&lt;=n;fa[i]=i,++i);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">while</span>(bitt)</span><br><span class="line">&#123;</span><br><span class="line">lxl j=(lxl)log2(lowbit(bitt))+<span class="number">1</span>;bitt-=lowbit(bitt);</span><br><span class="line">lxl kf=find(a[j][<span class="number">1</span>]);tmp+=c[j];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> _(<span class="number">2</span>);_&lt;=k[j];++_)fa[find(a[j][_])]=kf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>),x,y;i&lt;n;++i)x=find(e[i].u),y=find(e[i].v),(x!=y)&amp;&amp;(fa[x]=y,tmp+=dis[e[i].u][e[i].v]);</span><br><span class="line">ans=<span class="built_in">std</span>::min(ans,tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>区间dp,设状态$f_{l,r,id}$表示区间$[l,r]$中,最右端有$id$个相同的数的最大收益.</p><p>转移分两种,一种是直接向下分整个区间,将$id$的贡献带上,一种是将$id$和$[ l , k ]$的右边结合一下,将$[ k , r-1 ]$向下分.</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ttf(x) ((x)*(x))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">310</span>;</span><br><span class="line">lxl n,tot;</span><br><span class="line">lxl a[big],b[big],color[big],f[big][big][big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">dfs</span><span class="params">(lxl l,lxl r,lxl id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(~f[l][r][id])<span class="keyword">return</span> f[l][r][id];</span><br><span class="line">lxl nans=dfs(l,r<span class="number">-1</span>,<span class="number">0</span>)+ttf(b[r]+id);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(l);k&lt;r;++k)<span class="keyword">if</span>(color[k]==color[r])nans=<span class="built_in">std</span>::max(nans,dfs(l,k,id+b[r])+dfs(k+<span class="number">1</span>,r<span class="number">-1</span>,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">return</span> f[l][r][id]=nans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)(a[i]==a[i<span class="number">-1</span>])?++b[tot]:b[++tot]=<span class="number">1</span>,color[tot]=a[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dfs(<span class="number">1</span>,n,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>T1的一个特判在改代码的时候不小心多删了一个else,然后又只有一组数据于是全爆了.</p><p>经常是代码一遍写不对要改来改去的,这次T3也是,写了2份代码还没调出来,代码功底还得练.</p><p>T2觉得可以$2^m$枚举多边形然后每次生成树,因为用的是kruscal,没有注意去做优化,T了后面4个点,正解是用prim先建出生成树再枚举,把边的规模降下来,发现是自己不太理解kruscal的复杂度,觉得是大常数$O(n)$就没管了.</p><p>T3开始在想区间dp,想了十多分钟后发现自己的做法有后效性,于是考虑用分治来求出以前的状态带上现在状态的最优解,最后30分钟发现写得有点问题,调了一会没调出来,在某种特殊情况下会死循环,因为没时间了所以直接写了个跳出死循环,但这样答案是错的,就只拿了50分.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:代码无价,谨慎操作&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.lemir3.red/categories/总结/"/>
    
    
    <category term="总结" scheme="https://www.lemir3.red/tags/总结/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」CF1312E_Array_Shrinking</title>
    <link href="https://www.lemir3.red/2020/10/19/jie-ti-bao-gao-cf1312e-array-shrinking/"/>
    <id>https://www.lemir3.red/2020/10/19/jie-ti-bao-gao-cf1312e-array-shrinking/</id>
    <published>2020-10-19T13:42:38.000Z</published>
    <updated>2020-10-19T13:59:53.865Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:内层区间dp转移外层线性dp</p><a id="more"></a><h1 id="CF1312E-Array-Shrinking"><a href="#CF1312E-Array-Shrinking" class="headerlink" title="CF1312E_Array_Shrinking"></a>CF1312E_Array_Shrinking</h1><p><a href="https://codeforces.com/contest/1312/problem/E" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>可以发现最后构造的序列的每一项都是从原序列中相邻的项中合并来的,那么我们可以设$f_i$表示在$i$的前缀中最少是合并到多少项,转移就很好写,枚举一个$j$,试着去合并$[i,j)$,如果可行,那么更新$f_j$.</p><p>能否转移就需要另外计算,设$g_{l,r}$表示区间$[l,r)$能否被合并,因为我们知道如果一个区间被合并成了一个数,那么它可以由这个区间的某一个位置的前缀和后缀合并成的数再一次合并转移来,这样就可以做区间dp了.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">510</span>;</span><br><span class="line">lxl n;</span><br><span class="line">lxl a[big],f[big],g[big][big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">dp</span><span class="params">(lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l+<span class="number">1</span>==r)<span class="keyword">return</span> g[l][r]=a[l];</span><br><span class="line"><span class="keyword">if</span>(g[l][r]!=<span class="number">0</span>)<span class="keyword">return</span> g[l][r];</span><br><span class="line">g[l][r]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(l+<span class="number">1</span>);k&lt;=r;++k)</span><br><span class="line">&#123;</span><br><span class="line">lxl lg=dp(l,k),rg=dp(k,r);</span><br><span class="line"><span class="keyword">if</span>(lg&gt;<span class="number">0</span>&amp;&amp;lg==rg)g[l][r]=lg+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> g[l][r];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> f),f[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(i+<span class="number">1</span>);j&lt;=n+<span class="number">1</span>;++j)</span><br><span class="line"><span class="keyword">if</span>(dp(i,j)&gt;<span class="number">0</span>)f[j]=<span class="built_in">std</span>::min(f[j],f[i]+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f[n+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:内层区间dp转移外层线性dp&lt;/p&gt;</summary>
    
    
    
    <category term="动态规划" scheme="https://www.lemir3.red/categories/动态规划/"/>
    
    
    <category term="动态规划" scheme="https://www.lemir3.red/tags/动态规划/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」CF552E_Vanya_and_Brackets</title>
    <link href="https://www.lemir3.red/2020/10/19/jie-ti-bao-gao-cf552e-vanya-and-brackets/"/>
    <id>https://www.lemir3.red/2020/10/19/jie-ti-bao-gao-cf552e-vanya-and-brackets/</id>
    <published>2020-10-19T12:09:16.000Z</published>
    <updated>2020-10-19T12:26:29.675Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:代码题</p><a id="more"></a><h1 id="CF552E-Vanya-and-Brackets"><a href="#CF552E-Vanya-and-Brackets" class="headerlink" title="CF552E_Vanya_and_Brackets"></a>CF552E_Vanya_and_Brackets</h1><p><a href="https://codeforces.com/contest/552/problem/E" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>这题真是道代码题…</p><p>思路不难想,把两个乘号之间用括号缩起来,然后再计入贡献.</p><p>然后代码很难写的样子,先考虑如何实现计算表达式.</p><p>两个变量$x$和$y$,初始值为$0$和$a_1$,如果下一个符号为”+”,那么$x = x + y , y = a_{next}$,如果为”*”,那么$y = y \times a_{next}$.</p><p>也就是说$y$处理连乘的一段,遇到加号就累加到$x$里.</p><p>然后枚举两个乘号,将开头到第一个乘号的值算出来,然后算出两个乘号之间独立的值缩进括号里,临时改变一下第二个乘号前面那个数的值,然后算出第二个乘号到最后的值与第一次的$x$相加即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">5010</span>;</span><br><span class="line">lxl n,ans;</span><br><span class="line">lxl a[big],b[big];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> s,t;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;lxl&gt;pachy;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::pair&lt;lxl,lxl&gt; work(lxl l,lxl r)</span><br><span class="line">&#123;</span><br><span class="line">lxl x(0),y=a[l];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(l);i&lt;r;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i]==<span class="number">1</span>)x+=y,y=a[i+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> y*=a[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">std</span>::make_pair(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">t=<span class="string">"1*"</span>,t.append(s),t.append(<span class="string">"*1"</span>);</span><br><span class="line">s=t,n=s.size();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;n;i+=<span class="number">2</span>)a[i/<span class="number">2</span>]=(s[i]^<span class="number">48</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;n;i+=<span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">'+'</span>)b[i/<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> b[i/<span class="number">2</span>]=<span class="number">2</span>,pachy.push_back(i/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;pachy.size();++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(i+<span class="number">1</span>);j&lt;pachy.size();++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::pair&lt;lxl,lxl&gt; tmp=work(<span class="number">0</span>,pachy[i]);</span><br><span class="line">lxl x=tmp.first,y=tmp.second;</span><br><span class="line">tmp=work(pachy[i]+<span class="number">1</span>,pachy[j]);</span><br><span class="line">y*=tmp.first+tmp.second;</span><br><span class="line">lxl mem=a[pachy[j]];</span><br><span class="line">a[pachy[j]]=y;</span><br><span class="line">tmp=work(pachy[j],n/<span class="number">2</span>);</span><br><span class="line">ans=<span class="built_in">std</span>::max(ans,x+tmp.first+tmp.second);</span><br><span class="line">a[pachy[j]]=mem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1*3+5*7+8*4*1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:代码题&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://www.lemir3.red/categories/其他/"/>
    
    
    <category term="其他" scheme="https://www.lemir3.red/tags/其他/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」CF1425E_Excitation_of_Atoms</title>
    <link href="https://www.lemir3.red/2020/10/19/jie-ti-bao-gao-cf1425e-excitation-of-atoms/"/>
    <id>https://www.lemir3.red/2020/10/19/jie-ti-bao-gao-cf1425e-excitation-of-atoms/</id>
    <published>2020-10-19T09:36:21.000Z</published>
    <updated>2020-10-19T09:45:29.648Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:分类讨论贪心</p><a id="more"></a><h1 id="CF1425E-Excitation-of-Atoms"><a href="#CF1425E-Excitation-of-Atoms" class="headerlink" title="CF1425E_Excitation_of_Atoms"></a>CF1425E_Excitation_of_Atoms</h1><p><a href="https://codeforces.com/contest/1425/problem/E" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>分类讨论5种情况进行贪心,粘份官方题解吧.</p><blockquote><p>Notice that for $K=2$, we can always make an excitation route starting from any atom in $i$ in $1 \leq i &lt; N$ that excites all atoms. So, for $K&gt;2$, we can always make the routes by toggling bonds. So, there are three cases:</p><p>If $K=0$, it is optimal to excite only one atom. We try to excite atom $i$ for every $i$ and calculate the gained energy using prefix sum.</p><p>If $K \geq 2$, we can either excite one atom $i$ in $1 \leq i &lt; N$, which will excite all atoms or excite only the last atom (which can be optimal if it has the lowest $D$).</p><p>$K=1$ is a tricky one. there are 5 cases to consider:</p><ol><li>change $E_{N−1}$ to $1$. Then excite the atom with the $D_i$ in $1 \leq i &lt; N$. Also, excite atom $N$ if the energy gained is positive.</li><li>change $Ei$ to $1$ and then excite atom $i$ and $i+1$ for $(1 &lt; i &lt; N)$. It is optimal to excite $i+1$ because if not, it will be worse than case 1.</li><li>Change $E_1$ to $3$ and then excite $1$ and $2$.</li><li>Change $E_1$ to $N$ and then excite atom $i$, for $(1 &lt; i \leq N)$</li><li>Change $E_i$ to $i+2$ and then excite atom $1$, for $(1 &lt; i &lt; N)$. Note that this is only optimal if we excite atom $1$, else it is worse than case $4$.</li></ol><p>Handling all these cases will get you <strong>accepted</strong></p><p><strong>Time complexity: O(N)</strong></p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl n,k,ans;</span><br><span class="line">lxl a[big],b[big],suf[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">check0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl max=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n);i;--i)max=<span class="built_in">std</span>::max(max,suf[i]-b[i]);</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">check2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl min=INF;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;n;++i)min=<span class="built_in">std</span>::min(min,b[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">std</span>::max(a[n]-b[n],suf[<span class="number">1</span>]-min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">check1a</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl min=INF;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;n;++i)min=<span class="built_in">std</span>::min(min,b[i]);</span><br><span class="line">lxl ans=(suf[<span class="number">1</span>]-a[n])-min;</span><br><span class="line">lxl add=<span class="built_in">std</span>::max(<span class="number">0l</span>l,a[n]-b[n]);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">std</span>::max(add,ans+add);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">check1b</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl min=INF,min2=INF;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;n;++i)</span><br><span class="line"><span class="keyword">if</span>(b[i]&lt;=min)min2=min,min=b[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b[i]&lt;=min2)min2=b[i];</span><br><span class="line"><span class="keyword">return</span> suf[<span class="number">1</span>]-min-min2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">check1c</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl max=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n);i&gt;=<span class="number">2</span>;--i)max=<span class="built_in">std</span>::max(max,suf[i]-b[i]);</span><br><span class="line">lxl min=INF;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;n;++i)min=<span class="built_in">std</span>::min(min,a[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">std</span>::max(max,suf[<span class="number">1</span>]-min-b[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),k=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=read(),suf[i]=a[i];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)b[i]=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n);i;--i)suf[i]+=suf[i+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>)ans=check0();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k&gt;=<span class="number">2</span>)ans=check2();</span><br><span class="line"><span class="keyword">else</span> ans=<span class="built_in">std</span>::max(<span class="built_in">std</span>::max(check1a(),check1b()),check1c());</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,<span class="built_in">std</span>::max(ans,<span class="number">0l</span>l));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 2</span></span><br><span class="line"><span class="comment">1 2 4 8</span></span><br><span class="line"><span class="comment">1 5 3 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:分类讨论贪心&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://www.lemir3.red/categories/其他/"/>
    
    <category term="其他-贪心" scheme="https://www.lemir3.red/categories/其他/其他-贪心/"/>
    
    
    <category term="贪心" scheme="https://www.lemir3.red/tags/贪心/"/>
    
    <category term="其他" scheme="https://www.lemir3.red/tags/其他/"/>
    
  </entry>
  
  <entry>
    <title>「总结」10192020机房赛</title>
    <link href="https://www.lemir3.red/2020/10/19/zong-jie-10192020-ji-fang-sai/"/>
    <id>https://www.lemir3.red/2020/10/19/zong-jie-10192020-ji-fang-sai/</id>
    <published>2020-10-19T07:13:05.000Z</published>
    <updated>2020-10-19T08:08:21.169Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:《旧试题》</p><a id="more"></a><h1 id="10192020机房赛"><a href="#10192020机房赛" class="headerlink" title="10192020机房赛"></a>10192020机房赛</h1><p>这套题是18年我校和中山的联考题,而且我是去年和高二一起考过的,当时做了100+0+75…</p><p>然后今天又搬出来考T1漏情况T3写太久没时间想T2,70+40+100打铁了…</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>设数位的和为$x$,数字长为$n$,那么操作后的数可以表示为:</p><script type="math/tex; mode=display">x \times 10^0 + x \times 10^1 + x \times 10^2 + \cdots + x \times 10^{n-1}\\= ( 10^0 + 10^1 + 10^2 + \cdots + 10^{n-1} ) \times x</script><p>那么就很显然的是最小质因子是在$x$中或者$\frac{10^n - 1}{9}$中.</p><p>线性筛筛一下质数即可.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%lf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugc(x) printf(<span class="meta-string">"debug:%c\n"</span>,x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">500010</span>;</span><br><span class="line"><span class="keyword">char</span> c[big];</span><br><span class="line">lxl n,sum,ans=INF;</span><br><span class="line">lxl prime[big],vis[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c=getchar();</span><br><span class="line">lxl f=<span class="number">1</span>,x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x*<span class="number">10</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPow</span><span class="params">(lxl a,lxl b,lxl mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%mod)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a%mod);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;big;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])prime[++prime[<span class="number">0</span>]]=i;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=prime[<span class="number">0</span>];++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(prime[j]*i&gt;big)<span class="keyword">break</span>;</span><br><span class="line">vis[prime[j]*i]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">prework();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,c+<span class="number">1</span>),n=<span class="built_in">strlen</span>(c+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)sum+=c[i]-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=sum;++i)<span class="keyword">if</span>(!(sum%i))&#123;ans=i;<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=prime[<span class="number">0</span>];++i)</span><br><span class="line"><span class="keyword">if</span>(FastPow(<span class="number">10</span>,n,<span class="number">9</span>*prime[i])==<span class="number">1</span>)&#123;ans=<span class="built_in">std</span>::min(ans,prime[i]);<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>因为是和中序遍历有关,所以序列中的一段可以作为树的一部分,这样就可以设出区间dp的状态.</p><p>设$L_{l,r}$表示由$r$作为根,区间$[l,r-1]$作为$r$的左子树是否合法,$R_{l,r}$表示$l$作为根,区间$[l+1,r]$作为$l$的右子树是否合法,那么就得到转移:</p><script type="math/tex; mode=display">L_{l , r} = L_{l , k} ~ \& ~ R_{k , r - 1} ~ ( ~ \gcd(a_k , a_r) = 1 , l \leq k \leq r ~ )\\R_{l , r} = L_{l +  1 , k} ~ \& ~ R_{k , r} ~ ( ~ \gcd(a_k , a_r) = 1 , l \leq k \leq r ~ )</script><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">510</span>;</span><br><span class="line">lxl T,n;</span><br><span class="line">lxl l[big][big],r[big][big],a[big],can[big][big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">gcd</span><span class="params">(lxl a,lxl b)</span></span>&#123;<span class="keyword">return</span> !b?a:gcd(b,a%b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T=read();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(l,<span class="number">0</span>,<span class="keyword">sizeof</span> l),<span class="built_in">memset</span>(r,<span class="number">0</span>,<span class="keyword">sizeof</span> r);</span><br><span class="line"><span class="built_in">memset</span>(can,<span class="number">0</span>,<span class="keyword">sizeof</span> can);</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(i+<span class="number">1</span>);j&lt;=n;++j)</span><br><span class="line">can[i][j]=can[j][i]=(gcd(a[i],a[j])!=<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)l[i][i]=r[i][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> len(<span class="number">2</span>);len&lt;=n;++len)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> _l(<span class="number">1</span>);_l+len<span class="number">-1</span>&lt;=n;++_l)</span><br><span class="line">&#123;</span><br><span class="line">lxl _r=_l+len<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(_l);k&lt;=_r;++k)</span><br><span class="line">l[_l][_r]|=l[_l][k]&amp;r[k][_r<span class="number">-1</span>]&amp;can[_r][k],</span><br><span class="line">r[_l][_r]|=l[_l+<span class="number">1</span>][k]&amp;r[k][_r]&amp;can[_l][k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">ans</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="keyword">if</span>(l[<span class="number">1</span>][i]&amp;r[i][n])&#123;ans=<span class="literal">true</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="built_in">printf</span>(ans?<span class="string">"Yes\n"</span>:<span class="string">"No\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>点与一个区间中的各点求lca,很显然是要差分一下.</p><p>把询问$(l,r)$拆成$(1,l-1)$和$(1,r)$,vector存下每个点要处理的询问点.</p><p>顺序枚举加入一个点,将它到根的路径上权值+1,询问一个点就询问这个点到根节点路径的权值和,因为一个点到根的路径权值+1后,到根的路径上的一个点到根的权值和就为这个点的深度,查询点到根的路径上与原来加入的点的路径重合的这些点,它们到根的权值加起来就是lca的深度贡献了.</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>,mod=<span class="number">201314</span>;</span><br><span class="line">lxl n,m,EdgeSize,IdCnt,root,NodeCnt;</span><br><span class="line">lxl head[big],dep[big],size[big],top[big],son[big],fa[big],ans[big],id[big],t[big];</span><br><span class="line">lxl sum[big&lt;&lt;<span class="number">2</span>],c[<span class="number">2</span>][big&lt;&lt;<span class="number">2</span>],tag[big&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl id,x,opt;</span><br><span class="line">&#125;q[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next;</span><br><span class="line">&#125;e[big];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;_Query&gt;pachy[big];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar() (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> x=<span class="number">0</span>;T f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"> <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"> <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) &#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"> x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize]=(_Edge)&#123;v,head[u]&#125;;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(lxl u,lxl fat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fa[u]=fat,dep[u]=dep[fat]+<span class="number">1</span>,size[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line">dfs1(v,u);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(size[v]&gt;size[son[u]])son[u]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(lxl u,lxl top_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">top[u]=top_,id[u]=++IdCnt;</span><br><span class="line"><span class="keyword">if</span>(son[u])dfs2(son[u],top_);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==son[u])<span class="keyword">continue</span>;</span><br><span class="line">dfs2(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(lxl &amp;t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t=++NodeCnt;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">build(c[<span class="number">0</span>][t],l,mid),build(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(lxl t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!tag[t])<span class="keyword">return</span>;</span><br><span class="line">lxl mid((l+r)&gt;&gt;1),lson=c[0][t],rson=c[1][t];</span><br><span class="line">sum[lson]=(sum[lson]+tag[t]*(mid-l+<span class="number">1</span>)%mod)%mod,sum[rson]=(sum[rson]+tag[t]*(r-mid)%mod)%mod;</span><br><span class="line">tag[lson]=(tag[lson]+tag[t])%mod,tag[rson]=(tag[rson]+tag[t])%mod;</span><br><span class="line">tag[t]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl y,lxl k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)</span><br><span class="line">&#123;</span><br><span class="line">tag[t]=(tag[t]+k)%mod;</span><br><span class="line">sum[t]=(sum[t]+(r-l+<span class="number">1</span>)*k%mod)%mod;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">PushDown(t,l,r);</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)modify(c[<span class="number">0</span>][t],l,mid,x,y,k);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid)modify(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y,k);</span><br><span class="line">sum[t]=sum[c[<span class="number">0</span>][t]]+sum[c[<span class="number">1</span>][t]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">query</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)<span class="keyword">return</span> sum[t];</span><br><span class="line">PushDown(t,l,r);</span><br><span class="line">lxl mid((l+r)&gt;&gt;1),all(0);</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)all=(all+query(c[<span class="number">0</span>][t],l,mid,x,y))%mod;</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid)all=(all+query(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y))%mod;</span><br><span class="line"><span class="keyword">return</span> all;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddToRoot</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">while</span>(x)modify(root,<span class="number">1</span>,n,id[top[x]],id[x],<span class="number">1</span>),x=fa[top[x]];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">QueryToRoot</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(x)sum=(sum+query(root,<span class="number">1</span>,n,id[top[x]],id[x]))%mod,x=fa[top[x]];</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">read(n),read(m);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl x;read(x);</span><br><span class="line">EdgeAdd(x,i);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">0</span>),dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">build(root,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl l,r,z;read(l),read(r),read(z);</span><br><span class="line">pachy[l<span class="number">-1</span>].push_back((_Query)&#123;i,z,<span class="number">-1</span>&#125;);</span><br><span class="line">pachy[r].push_back((_Query)&#123;i,z,<span class="number">1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">AddToRoot(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=pachy[i].begin();it!=pachy[i].end();++it)</span><br><span class="line">&#123;</span><br><span class="line">lxl nid=it-&gt;id,nx=it-&gt;x,nopt=it-&gt;opt;</span><br><span class="line"><span class="keyword">if</span>(~nopt)ans[nid]=(ans[nid]+QueryToRoot(nx))%mod;</span><br><span class="line"><span class="keyword">else</span> ans[nid]=(ans[nid]-QueryToRoot(nx)+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看T1觉得很显然,没在草稿纸上写就直接去分解数位和了,然后就没处理$\frac{10^n - 1}{9}$的约数,只拿了70分.</p><p>只要稍微写一下那个式子的形式就可以发现另外一部分是可以合并的,然后也有可能贡献约数,做数论题还是得多动笔.</p><p>然后写T2,觉得确定答案应该是在确定中序遍历后通过调整树的形态来求出,于是写了个递归建树,然后每次枚举到一个不合法的节点,用类似splay旋转的方式来调整形态,理论上只用做$O(n^2)$次,每次的复杂度是$O(logn)$,但是写完T3到最后时候才发现调整形态的判定没写好,而且参数写大了导致后面T了几个点,拿了30,正解是dp,感觉这做法挺怪的而且也没人写类似的.</p><p>写T3的时候剩2个小时,刚开始觉得是通过子树关系来优化区间求lca,把询问做到$O(logn)$,想了十多分钟发现可以直接差分离线做,把每个点到根节点的路径权值+1然后查询的时候就有深度的贡献了,拿了100.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:《旧试题》&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.lemir3.red/categories/总结/"/>
    
    
    <category term="总结" scheme="https://www.lemir3.red/tags/总结/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」CF1426F_Number_of_Subsequences</title>
    <link href="https://www.lemir3.red/2020/10/18/jie-ti-bao-gao-cf1426f-number-of-subsequences/"/>
    <id>https://www.lemir3.red/2020/10/18/jie-ti-bao-gao-cf1426f-number-of-subsequences/</id>
    <published>2020-10-18T13:36:28.000Z</published>
    <updated>2020-10-18T13:46:41.878Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:数列组合计数题<br><a id="more"></a></p><h1 id="CF1426F-Number-of-Subsequences"><a href="#CF1426F-Number-of-Subsequences" class="headerlink" title="CF1426F_Number_of_Subsequences"></a>CF1426F_Number_of_Subsequences</h1><p><a href="https://codeforces.com/problemset/problem/1426/F" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>因为是求所有的序列情况下的所有对数,所以可以很好地组合计数.</p><p>考虑固定一个”b”,它可以是序列中原本就有的,或者是我们选定的”?”,它的贡献可以分成四部分:</p><ul><li>序列中左边原本有的”a”和右边原本就有的”c”的组合.</li><li>序列中左边原本有的”a”和右边选定一个”?”作为”c”的组合.</li><li>序列中左边选定一个”?”作为”a”和右边原本就有的”c”的组合.</li><li>纯粹由两边”?”选定出的组合.</li></ul><p>可以发现因为每一种的贡献是独立的,不必考虑其他的”?”选定了什么.</p><p>那么我们设左边的”a”有$n$个,右边的”c”有$m$个,左边的”?”有$x$个,右边的”?”有$y$个,那么一个固定的”b”的贡献为:</p><script type="math/tex; mode=display">n \cdot m + n \cdot y \cdot 3^{x + y - 1} + m \cdot x \cdot 3^{x + y - 1} + x \cdot y \cdot 3^{x + y - 2}</script><p>注意取模.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">200010</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">lxl n,ans;</span><br><span class="line">lxl pre[<span class="number">4</span>][big],suf[<span class="number">4</span>][big],ch[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPow</span><span class="params">(lxl a,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%mod)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a%mod);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> chr;<span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;chr);</span><br><span class="line"><span class="keyword">if</span>(chr==<span class="string">'?'</span>)ch[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(chr==<span class="string">'a'</span>)ch[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(chr==<span class="string">'b'</span>)ch[i]=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(chr==<span class="string">'c'</span>)ch[i]=<span class="number">3</span>;</span><br><span class="line">++pre[ch[i]][i],++suf[ch[i]][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;<span class="number">4</span>;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">pre[j][i]+=pre[j][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(n);i;--i)</span><br><span class="line">suf[j][i]+=suf[j][i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[i]==<span class="number">0</span>||ch[i]==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl prea=pre[<span class="number">1</span>][i],pren=pre[<span class="number">0</span>][i<span class="number">-1</span>];</span><br><span class="line">lxl sufc=suf[<span class="number">3</span>][i],sufn=suf[<span class="number">0</span>][i+<span class="number">1</span>];</span><br><span class="line">lxl add1=prea*sufc%mod*FastPow(<span class="number">3</span>,pren+sufn)%mod;</span><br><span class="line">lxl add2(0),add3(0),add4(0);</span><br><span class="line"><span class="keyword">if</span>(pren)add2=sufc*pren%mod*FastPow(<span class="number">3</span>,pren+sufn<span class="number">-1</span>)%mod;</span><br><span class="line"><span class="keyword">if</span>(sufn)add3=prea*sufn%mod*FastPow(<span class="number">3</span>,pren+sufn<span class="number">-1</span>)%mod;</span><br><span class="line"><span class="keyword">if</span>(pren+sufn&gt;=<span class="number">2</span>)add4=pren*sufn%mod*FastPow(<span class="number">3</span>,pren+sufn<span class="number">-2</span>)%mod;</span><br><span class="line">ans=(ans+add1+add2+add3+add4)%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:数列组合计数题&lt;br&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-组合" scheme="https://www.lemir3.red/categories/数学/数学-组合/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="组合" scheme="https://www.lemir3.red/tags/组合/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」CF1427C_The_Hard_Work_of_Paparazzi</title>
    <link href="https://www.lemir3.red/2020/10/18/jie-ti-bao-gao-cf1427c-the-hard-work-of-paparazzi/"/>
    <id>https://www.lemir3.red/2020/10/18/jie-ti-bao-gao-cf1427c-the-hard-work-of-paparazzi/</id>
    <published>2020-10-18T12:29:10.000Z</published>
    <updated>2020-10-18T12:39:39.041Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:考虑性质后前缀最大值优化dp</p><a id="more"></a><h1 id="CF1427C-The-Hard-Work-of-Paparazzi"><a href="#CF1427C-The-Hard-Work-of-Paparazzi" class="headerlink" title="CF1427C_The_Hard_Work_of_Paparazzi"></a>CF1427C_The_Hard_Work_of_Paparazzi</h1><p><a href="https://codeforces.com/problemset/problem/1427/C" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>$O(n^2)$的思路应该是挺显然的,设$dp_i$表示仅前$k$个人能被拍到的最大值,那么有状态转移方程如下:</p><script type="math/tex; mode=display">dp_i = \max \{ dp_{1 \leq j < i} \} + 1 ~ ( ~dis(i,j) \leq t_i -t_j ~)</script><p>就是从一个能转移的位置转移即可.</p><p>但是我们发现$r$的范围只有500,那么正解肯定和$r$有关,可以发现,当$i$和$j$的差距大到了$2r$,也就是图中两点间最大的距离时,因为$t$互不相同,那么这两个点一定可以转移.</p><p>这就启发我们用一个前缀最大值记录答案,如果$i$大于了$2r$,就取出$i-2r$的前缀最大值来更新,然后暴力转移$i-2r$到$i-1$这一段,复杂度$O(nr)$.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>,small=<span class="number">510</span>;</span><br><span class="line">lxl r,n,ans;</span><br><span class="line">lxl t[big],x[big],y[big],dp[big],pmx[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(lxl i,lxl j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl dis=<span class="built_in">abs</span>(y[i]-y[j])+<span class="built_in">abs</span>(x[i]-x[j]);</span><br><span class="line"><span class="keyword">return</span> dis&lt;=t[i]-t[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">r=read(),n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)t[i]=read(),x[i]=read(),y[i]=read();</span><br><span class="line">x[<span class="number">0</span>]=y[<span class="number">0</span>]=<span class="number">1</span>,t[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="keyword">if</span>(check(i,<span class="number">0</span>))dp[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="built_in">std</span>::max(i<span class="number">-2</span>*r,(lxl)<span class="number">1</span>));j&lt;i;++j)</span><br><span class="line"><span class="keyword">if</span>(check(i,j)&amp;&amp;dp[j])dp[i]=<span class="built_in">std</span>::max(dp[i],dp[j]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">2</span>*r)dp[i]=<span class="built_in">std</span>::max(dp[i],pmx[i<span class="number">-2</span>*r]+<span class="number">1</span>);</span><br><span class="line">pmx[i]=<span class="built_in">std</span>::max(pmx[i<span class="number">-1</span>],dp[i]);</span><br><span class="line">ans=<span class="built_in">std</span>::max(ans,dp[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:考虑性质后前缀最大值优化dp&lt;/p&gt;</summary>
    
    
    
    <category term="动态规划" scheme="https://www.lemir3.red/categories/动态规划/"/>
    
    
    <category term="动态规划" scheme="https://www.lemir3.red/tags/动态规划/"/>
    
  </entry>
  
</feed>
