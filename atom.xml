<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lemir3&#39;s blog</title>
  
  
  <link href="https://www.lemir3.red/atom.xml" rel="self"/>
  
  <link href="https://www.lemir3.red/"/>
  <updated>2020-08-28T08:16:06.248Z</updated>
  <id>https://www.lemir3.red/</id>
  
  <author>
    <name>lemir3</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「解题报告」[NOI2009]植物大战僵尸</title>
    <link href="https://www.lemir3.red/2020/08/28/jie-ti-bao-gao-noi2009-zhi-wu-da-zhan-jiang-shi/"/>
    <id>https://www.lemir3.red/2020/08/28/jie-ti-bao-gao-noi2009-zhi-wu-da-zhan-jiang-shi/</id>
    <published>2020-08-28T07:59:34.000Z</published>
    <updated>2020-08-28T08:16:06.248Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:最大权闭合子图模型</p><a id="more"></a><h1 id="NOI2009-植物大战僵尸"><a href="#NOI2009-植物大战僵尸" class="headerlink" title="[NOI2009]植物大战僵尸"></a>[NOI2009]植物大战僵尸</h1><p><a href="https://www.luogu.com.cn/problem/P2805" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>最近尽量一道题写一篇博客吧,不然老是在座位上发呆…</p><p>最大权闭合子图,也就是图集的一个子集,其中每个点能够通达的点都在集中,然后满足点权值最大.</p><p>对于这种选点有限制的题,抽象出最大权闭合子图模型并不困难,考虑将保护与被保护的关系反向,也就是说,对于一个被保护的点,它连向保护它的点,在选最大权闭合子图时如果选到了这个点,那么就必须去选保护它的点,就满足了题意.</p><p>然后我们考虑如何求出最大权,建出网络流模型,将源点向正权点连边,流量为权值,汇点向负权点连边,流量为权值的相反数,点之间的连边流量为正无穷,然后求出最小割,正权之和减去最小割即为最大权.</p><p>正确性证明(引用自一篇题解):</p><blockquote><p>能被割掉的边只有连向 S 或 T 的边（这样的割被称为 <strong>简单割</strong> ）。<br>  设与 S 联通的节点集为 X，与 T 联通的节点集为 Y，那么最大权闭合子图的节点就是 X集。<br>  一开始假设所有正权点都在（最大权）闭合子图中，<br>  对于某一个正权点 u ，如果割掉它与 S的连边，意味着将它分到 Y集合中，不选它作为闭合子图的节点，故闭合子图权值应减去 val[u] 。<br>  对于某一个负权点 u，如果割掉它与 T 的连边，意味着将它分到 X集合中，那么闭合子图权值应加上 val[u]，即减去 -val[u]。</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 4557430888798830399</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">1010</span>;</span><br><span class="line">lxl n,m,EdgeSize,s,t,MaxFlow,sum;</span><br><span class="line">lxl head[big],cur[big],dis[big],vis[big],val[big],degree[big],clc[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next,flow,w;</span><br><span class="line">&#125;e[big*big];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;lxl&gt;q;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;lxl&gt;edge[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v,flow) EdgeAdd(u,v,flow),EdgeAdd(v,u,0)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v,lxl flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize].v=v;</span><br><span class="line">e[EdgeSize].next=head[u];</span><br><span class="line">e[EdgeSize].flow=flow;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vadd(u,v) VEdgeAdd(u,v)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">VEdgeAdd</span><span class="params">(lxl u,lxl v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">++degree[v];</span><br><span class="line">edge[u].push_back(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dis),<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line"><span class="built_in">memcpy</span>(cur,head,<span class="keyword">sizeof</span> cur);</span><br><span class="line">q.push(s),dis[s]=<span class="number">0</span>,vis[s]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">lxl u=q.front();q.pop(),vis[u]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v,fl=e[i].flow;</span><br><span class="line"><span class="keyword">if</span>(fl&gt;<span class="number">0</span>&amp;&amp;dis[v]&gt;dis[u]+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])q.push(v),vis[v]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dis[t]!=INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">dfs</span><span class="params">(lxl u,lxl flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(u==t||!flow)<span class="keyword">return</span> flow;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(R lxl &amp;i(cur[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v,fl=e[i].flow;</span><br><span class="line"><span class="keyword">if</span>(fl&gt;<span class="number">0</span>&amp;&amp;!vis[v]&amp;&amp;dis[v]==dis[u]+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl delta=dfs(v,<span class="built_in">std</span>::min(flow-sum,fl));</span><br><span class="line">e[i].flow-=delta,e[i^<span class="number">1</span>].flow+=delta;</span><br><span class="line">sum+=delta;</span><br><span class="line"><span class="keyword">if</span>(sum==flow)<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vis[u]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;bfs();)MaxFlow+=dfs(s,INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">R <span class="keyword">int</span> i,j,k;</span><br><span class="line">n=read(),m=read();</span><br><span class="line">s=n*m+<span class="number">1</span>,t=s+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;++j)</span><br><span class="line">&#123;</span><br><span class="line">val[i*m+j]=read();</span><br><span class="line">lxl pro=read();</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=pro;++k)</span><br><span class="line">&#123;</span><br><span class="line">lxl x=read(),y=read();</span><br><span class="line"><span class="comment">// vadd(x*m+y,i*m+j);</span></span><br><span class="line">vadd(i*m+j,x*m+y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(k=j+<span class="number">1</span>;k&lt;m;++k)vadd(i*m+k,i*m+j);</span><br><span class="line"><span class="comment">// vadd(i*m+j,i*m+k);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n*m;++i)<span class="keyword">if</span>(!degree[i])q.push(i),vis[i]=<span class="literal">true</span>,clc[i]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">lxl u=q.front();q.pop(),vis[u]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=edge[u].begin();it!=edge[u].end();++it)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=*it;</span><br><span class="line">--degree[v];</span><br><span class="line"><span class="keyword">if</span>(!degree[v])q.push(v),vis[v]=<span class="literal">true</span>,clc[v]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n*m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!clc[i])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(val[i]&gt;<span class="number">0</span>)add(s,i,val[i]),sum+=val[i];</span><br><span class="line"><span class="keyword">else</span> add(i,t,-val[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=edge[i].begin();it!=edge[i].end();++it)add(*it,i,INF);</span><br><span class="line">&#125;</span><br><span class="line">dinic();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sum-MaxFlow);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:最大权闭合子图模型&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="图论-网络流" scheme="https://www.lemir3.red/categories/图论/图论-网络流/"/>
    
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="网络流" scheme="https://www.lemir3.red/tags/网络流/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」UVA1614 奇怪的股市 Hell on the Markets</title>
    <link href="https://www.lemir3.red/2020/08/28/jie-ti-bao-gao-uva1614-qi-guai-de-gu-shi-hell-on-the-markets/"/>
    <id>https://www.lemir3.red/2020/08/28/jie-ti-bao-gao-uva1614-qi-guai-de-gu-shi-hell-on-the-markets/</id>
    <published>2020-08-28T02:43:24.000Z</published>
    <updated>2020-08-28T02:59:08.157Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:数学归纳法证明</p><a id="more"></a><h1 id="UVA1614-奇怪的股市-Hell-on-the-Markets"><a href="#UVA1614-奇怪的股市-Hell-on-the-Markets" class="headerlink" title="UVA1614 奇怪的股市 Hell on the Markets"></a>UVA1614 奇怪的股市 Hell on the Markets</h1><p><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=825&amp;page=show_problem&amp;problem=4489" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>提供一个证明.</p><p>设$sum=\sum_{i=1}^{n}a_i$,显然当$sum$为奇数时无解.</p><p>然后发现,如果考虑前$i$项能凑出$[1,s_i]$的所有整数,那么就存在解,而题中保证$1\leq a_i\leq i$,所以一定可以凑出.</p><p>考虑归纳法,$i=1$显然满足,假设现在$[1,s_{i-1}]$的数都已经凑出,那么现在需要凑出的数是在$[s_{i-1}+1,s_{i-1}+a_i]$范围内.</p><p>设$1\leq k\leq a_i$,因为$1\leq a_i \leq i$,所以$a_i-k\leq i$.</p><p>然后因为$s_{i-1}\geq i-1$就显然有$s_{i-1}+k-a_i\leq s_{i-1}$.</p><p>也就是说对于每一个$s_{i-1}+k$,都能减去$a_i$之后找一个数进行凑配,因为这个数是小于$s_{i-1}$的,也就是前面已经能凑出来的.</p><p>考虑凑出$\frac{sum}{2}$,每次减去小于$\frac{sum}{2}$的最大值即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">1000010</span>;</span><br><span class="line">lxl n,sum;</span><br><span class="line">lxl a[big],ans[big];</span><br><span class="line"><span class="built_in">std</span>::priority_queue&lt;<span class="built_in">std</span>::pair&lt;lxl,lxl&gt; &gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(lxl d1,lxl d2)</span></span>&#123;<span class="keyword">return</span> a[d1]&lt;a[d2];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(lxl d1,lxl d2)</span></span>&#123;<span class="keyword">return</span> d1&lt;d2;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("data.txt","r",stdin);</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span> ans);</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=read(),sum+=a[i];</span><br><span class="line"><span class="keyword">if</span>(sum%<span class="number">2</span>)&#123;<span class="built_in">printf</span>(<span class="string">"No\n"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)q.push(<span class="built_in">std</span>::make_pair(a[i],i));</span><br><span class="line">sum/=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(sum&gt;=q.top().first)sum-=q.top().first,ans[q.top().second]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> ans[q.top().second]=<span class="number">1</span>;</span><br><span class="line">q.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="built_in">printf</span>(<span class="string">"%lld "</span>,ans[i]);<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:数学归纳法证明&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」CF587C Duff in the Army</title>
    <link href="https://www.lemir3.red/2020/08/27/jie-ti-bao-gao-cf587c-duff-in-the-army/"/>
    <id>https://www.lemir3.red/2020/08/27/jie-ti-bao-gao-cf587c-duff-in-the-army/</id>
    <published>2020-08-27T11:43:52.000Z</published>
    <updated>2020-08-27T12:34:04.168Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:树上主席树</p><a id="more"></a><h1 id="CF587C-Duff-in-the-Army"><a href="#CF587C-Duff-in-the-Army" class="headerlink" title="CF587C Duff in the Army"></a>CF587C Duff in the Army</h1><p><a href="http://codeforces.com/problemset/problem/587/C" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先,这是一个总时间1.77min,比最优解慢了100s,比倒数第二差解慢了36.6s的垃圾做法(是的你没看错就是秒数,题目共53个点,单点时限4s).</p><p>发现询问的$a$最多只有$10$,于是考虑使用树上主席树加二分$k$大值巨大常数带俩$\log$富贵险中求.</p><p>先用树上差分处理出路径上有多少个人,回答的时候比较一下.</p><p>构建主席树的时候,儿子由父亲继承来,如果儿子节点上有人则进行插入.</p><p>一个位置上可能有多个人,但是总数是严格$O(n)$级别,暴力在该节点对应的根上面重复自己继承自己插入即可.</p><p>然后直接二分第$1$到第$a$大的值,因为每个点的主席树记录下了这个点到根节点的所有数,利用差分的思路,用对应的主席树求出路径上有多少个小于这个值的数,根据这个来确定二分范围.</p><p>其实只是一棵权值线段树的话可以直接求第$k$大值的,但是这里是$4$棵,就只会二分了…</p><p>本来主席树常数就巨大然后这题还自带$10$的常数,于是开了火车头才卡过,最差点2.98s.</p><hr><p>然后很戏剧性的是,在这篇博客已经写完时,突然想到了一个多棵权值线段树求$k$大值的做法:</p><p><img src="https://s1.ax1x.com/2020/08/27/d4bnqs.jpg" alt></p><p>其实只要多个线段树的节点一起进行递归就可以了,还是按照差分的思路求一下和…</p><p>跑到了18.96s,算是中规中矩了,看了下正解写的是倍增.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="1"><a href="#1" class="headerlink" title="#1"></a>#1</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker,<span class="meta-string">"/STACK:102400000,102400000"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fgcse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fgcse-lm"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fipa-sra"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-pre"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-vrp"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fpeephole2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ffast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fsched-spec"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"unroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-labels"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fdevirtualize"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcaller-saves"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcrossjumping"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fthread-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-funroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fwhole-program"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-freorder-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fschedule-insns"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-tail-merge"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fschedule-insns2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fstrict-aliasing"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fstrict-overflow"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcse-skip-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcse-follow-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fsched-interblock"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fpartial-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"no-stack-protector"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-freorder-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-findirect-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fhoist-adjacent-loads"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-frerun-cse-after-loop"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-finline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-switch-conversion"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-foptimize-sibling-calls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fexpensive-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-funsafe-loop-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-functions-called-once"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fdelete-null-pointer-checks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">200010</span>;</span><br><span class="line">lxl n,m,q,NodeCnt,EdgeSize;</span><br><span class="line">lxl head[big],top[big],size[big],son[big],depth[big],father[big],cf[big];</span><br><span class="line">lxl root[big],lson[big&lt;&lt;<span class="number">4</span>],rson[big&lt;&lt;<span class="number">4</span>],sum[big&lt;&lt;<span class="number">4</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;lxl&gt;a[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl next,v;</span><br><span class="line">&#125;e[big&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v) EdgeAdd(u,v),EdgeAdd(v,u)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize].v=v;</span><br><span class="line">e[EdgeSize].next=head[u];</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(lxl u,lxl fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">father[u]=fa,depth[u]=depth[fa]+<span class="number">1</span>;</span><br><span class="line">size[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line">dfs1(v,u);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(size[v]&gt;size[son[u]])son[u]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(lxl u,lxl _top)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">top[u]=_top;</span><br><span class="line"><span class="keyword">if</span>(son[u])dfs2(son[u],_top);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==father[u]||v==son[u])<span class="keyword">continue</span>;</span><br><span class="line">dfs2(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(lxl &amp;t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t)t=++NodeCnt;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">BuildTree(lson[t],l,mid),BuildTree(rson[t],mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(lxl t)</span></span>&#123;sum[t]=sum[lson[t]]+sum[rson[t]];&#125;</span><br><span class="line"><span class="function">lxl <span class="title">insert</span><span class="params">(lxl t1,lxl t2,lxl l,lxl r,lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t1=++NodeCnt;</span><br><span class="line">lson[t1]=lson[t2],rson[t1]=rson[t2],sum[t1]=sum[t2];</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;++sum[t1];<span class="keyword">return</span> t1;&#125;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)lson[t1]=insert(lson[t1],lson[t2],l,mid,x);</span><br><span class="line"><span class="keyword">else</span> rson[t1]=insert(rson[t1],rson[t2],mid+<span class="number">1</span>,r,x);</span><br><span class="line">PushUp(t1);</span><br><span class="line"><span class="keyword">return</span> t1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">query</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// debug(l),debug(r),endl;</span></span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)<span class="keyword">return</span> sum[t];</span><br><span class="line">lxl cnt(0),mid((l+r)&gt;&gt;1);</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)cnt+=query(lson[t],l,mid,x,y);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid)cnt+=query(rson[t],mid+<span class="number">1</span>,r,x,y);</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(lxl u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cf[u]+=cf[father[u]];</span><br><span class="line"><span class="keyword">if</span>(!a[u].empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> it=a[u].begin();</span><br><span class="line">root[u]=insert(root[u],root[father[u]],<span class="number">1</span>,m,*it);</span><br><span class="line">++it;</span><br><span class="line"><span class="keyword">for</span>(;it!=a[u].end();++it)root[u]=insert(root[u],root[u],<span class="number">1</span>,m,*it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> root[u]=root[father[u]];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==father[u])<span class="keyword">continue</span>;</span><br><span class="line">dfs(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">GetLCA</span><span class="params">(lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])<span class="built_in">std</span>::swap(x,y);</span><br><span class="line">x=father[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(depth[x]&gt;depth[y])<span class="built_in">std</span>::swap(x,y);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">check</span><span class="params">(lxl u,lxl v,lxl lca,lxl limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">sum+=query(root[u],<span class="number">1</span>,m,<span class="number">1</span>,limit);</span><br><span class="line">sum+=query(root[v],<span class="number">1</span>,m,<span class="number">1</span>,limit);</span><br><span class="line">sum-=query(root[lca],<span class="number">1</span>,m,<span class="number">1</span>,limit);</span><br><span class="line"><span class="keyword">if</span>(father[lca])sum-=query(root[father[lca]],<span class="number">1</span>,m,<span class="number">1</span>,limit);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">R <span class="keyword">int</span> i,j;</span><br><span class="line">n=read(),m=read(),q=read();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read();</span><br><span class="line">add(u,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl b=read();</span><br><span class="line">a[b].push_back(i),++cf[b];</span><br><span class="line">&#125;</span><br><span class="line">BuildTree(root[<span class="number">0</span>],<span class="number">1</span>,m);</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">0</span>),dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read(),a=read();</span><br><span class="line">lxl lca=GetLCA(u,v),sum=cf[u]+cf[v]-cf[lca];</span><br><span class="line"><span class="keyword">if</span>(father[lca])sum-=cf[father[lca]];</span><br><span class="line">a=<span class="built_in">std</span>::min(sum,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld "</span>,a);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=a;++j)</span><br><span class="line">&#123;</span><br><span class="line">lxl l=<span class="number">1</span>,r=m,mid,out=INF;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">mid=((l+r)&gt;&gt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(check(u,v,lca,mid)&gt;=j)r=mid<span class="number">-1</span>,out=mid;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld "</span>,out);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="#2"></a>#2</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">200010</span>;</span><br><span class="line">lxl n,m,q,NodeCnt,EdgeSize;</span><br><span class="line">lxl head[big],top[big],size[big],son[big],depth[big],father[big],cf[big];</span><br><span class="line">lxl root[big],lson[big&lt;&lt;<span class="number">4</span>],rson[big&lt;&lt;<span class="number">4</span>],sum[big&lt;&lt;<span class="number">4</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;lxl&gt;a[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl next,v;</span><br><span class="line">&#125;e[big&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v) EdgeAdd(u,v),EdgeAdd(v,u)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize].v=v;</span><br><span class="line">e[EdgeSize].next=head[u];</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(lxl u,lxl fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">father[u]=fa,depth[u]=depth[fa]+<span class="number">1</span>;</span><br><span class="line">size[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line">dfs1(v,u);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(size[v]&gt;size[son[u]])son[u]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(lxl u,lxl _top)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">top[u]=_top;</span><br><span class="line"><span class="keyword">if</span>(son[u])dfs2(son[u],_top);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==father[u]||v==son[u])<span class="keyword">continue</span>;</span><br><span class="line">dfs2(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(lxl &amp;t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t)t=++NodeCnt;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">BuildTree(lson[t],l,mid),BuildTree(rson[t],mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(lxl t)</span></span>&#123;sum[t]=sum[lson[t]]+sum[rson[t]];&#125;</span><br><span class="line"><span class="function">lxl <span class="title">insert</span><span class="params">(lxl t1,lxl t2,lxl l,lxl r,lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t1=++NodeCnt;</span><br><span class="line">lson[t1]=lson[t2],rson[t1]=rson[t2],sum[t1]=sum[t2];</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;++sum[t1];<span class="keyword">return</span> t1;&#125;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)lson[t1]=insert(lson[t1],lson[t2],l,mid,x);</span><br><span class="line"><span class="keyword">else</span> rson[t1]=insert(rson[t1],rson[t2],mid+<span class="number">1</span>,r,x);</span><br><span class="line">PushUp(t1);</span><br><span class="line"><span class="keyword">return</span> t1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">query</span><span class="params">(lxl t1,lxl t2,lxl t3,lxl t4,lxl l,lxl r,lxl k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl mid((l+r)&gt;&gt;1),lall=sum[lson[t1]]+sum[lson[t2]]-sum[lson[t3]]-sum[lson[t4]];</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">if</span>(lall&lt;k)<span class="keyword">return</span> query(rson[t1],rson[t2],rson[t3],rson[t4],mid+<span class="number">1</span>,r,k-lall);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(lson[t1],lson[t2],lson[t3],lson[t4],l,mid,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(lxl u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cf[u]+=cf[father[u]];</span><br><span class="line"><span class="keyword">if</span>(!a[u].empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> it=a[u].begin();</span><br><span class="line">root[u]=insert(root[u],root[father[u]],<span class="number">1</span>,m,*it);</span><br><span class="line">++it;</span><br><span class="line"><span class="keyword">for</span>(;it!=a[u].end();++it)root[u]=insert(root[u],root[u],<span class="number">1</span>,m,*it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> root[u]=root[father[u]];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==father[u])<span class="keyword">continue</span>;</span><br><span class="line">dfs(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">GetLCA</span><span class="params">(lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])<span class="built_in">std</span>::swap(x,y);</span><br><span class="line">x=father[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(depth[x]&gt;depth[y])<span class="built_in">std</span>::swap(x,y);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">R <span class="keyword">int</span> i,j;</span><br><span class="line">n=read(),m=read(),q=read();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read();</span><br><span class="line">add(u,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl b=read();</span><br><span class="line">a[b].push_back(i),++cf[b];</span><br><span class="line">&#125;</span><br><span class="line">BuildTree(root[<span class="number">0</span>],<span class="number">1</span>,m);</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">0</span>),dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read(),a=read();</span><br><span class="line">lxl lca=GetLCA(u,v),sum=cf[u]+cf[v]-cf[lca];</span><br><span class="line"><span class="keyword">if</span>(father[lca])sum-=cf[father[lca]];</span><br><span class="line">a=<span class="built_in">std</span>::min(sum,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld "</span>,a);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=a;++j)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld "</span>,query(root[u],root[v],root[lca],root[father[lca]],<span class="number">1</span>,m,j));</span><br><span class="line"><span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:树上主席树&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/数据结构/"/>
    
    <category term="数据结构-主席树" scheme="https://www.lemir3.red/categories/数据结构/数据结构-主席树/"/>
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="主席树" scheme="https://www.lemir3.red/tags/主席树/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu4137Rmq Problem / mex</title>
    <link href="https://www.lemir3.red/2020/08/27/jie-ti-bao-gao-luogu4137rmq-problem-mex/"/>
    <id>https://www.lemir3.red/2020/08/27/jie-ti-bao-gao-luogu4137rmq-problem-mex/</id>
    <published>2020-08-27T06:41:09.000Z</published>
    <updated>2020-08-27T08:53:54.174Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:各种不删除莫队</p><a id="more"></a><h1 id="Rmq-Problem-mex"><a href="#Rmq-Problem-mex" class="headerlink" title="Rmq Problem / mex"></a>Rmq Problem / mex</h1><p><a href="https://www.luogu.com.cn/problem/P4137" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>虽说是道可持久化值域线段树一眼题,但是拿来练习 <del>卡常</del> 莫队还挺不错…</p><p>$mex$这个信息不太好处理,于是想到了用回滚莫队.</p><p>先是考虑了一个只增的莫队,用一个哈希表来记录当有哪些数,发现往集合里加数时只会让$mex$增加,如果加进的数等于$mex$就让$mex$暴力后移,更新答案的均摊复杂度为$O(\sqrt n)$.</p><p>只增莫队的思路就是:对于左端点同块的询问按右端点单增排序,莫队的右端点和左端点都移到当前块的右端点上,对于每一个询问的右端点就直接向后增加进集合并更新当前答案,询问的左端点就复制一份当前的答案,向后增加至询问的左端点后更新进答案数组,然后删除回滚,仅在哈希表上发生删除.</p><p>于是拿了54分,总的复杂度不对.</p><p>考虑到$mex$的性质,先把总的$mex$维护出来,然后在删数时,如果一个数的数量被减到了$0$,那么就拿去更新$mex$,这样就可以$O(1)$更新答案了(不过因为用了哈希表效率依旧不高).</p><p>所以写了一个只减的莫队,将左端点同块的询问按右端点单减排序,莫队的右端点先移到$n$,对于每一个询问的右端点直接减去并更新当前的答案,莫队的左端点先移到当前块的左端点,每次询问的左端点就复制一份当前的答案,减到询问的左端点后更新进答案数组,然后增加回滚,仅在哈希表上发生增加.</p><p>于是拿了82分,复杂度瓶颈出在了哈希表上.</p><p>发现这道题$n$的规模是$2e5$,但是$a_i$的规模达到了$1e9$,所以$mex$最大为$n$.</p><p>所以直接令$a_i=\min\{a_i,n+1\}$,数组模拟哈希表即可拿到满分.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="54"><a href="#54" class="headerlink" title="54"></a>54</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fgcse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fgcse-lm"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fipa-sra"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-pre"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-vrp"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fpeephole2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ffast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fsched-spec"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"unroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-labels"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fdevirtualize"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcaller-saves"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcrossjumping"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fthread-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-funroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fwhole-program"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-freorder-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fschedule-insns"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-tail-merge"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fschedule-insns2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fstrict-aliasing"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fstrict-overflow"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcse-skip-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcse-follow-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fsched-interblock"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fpartial-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"no-stack-protector"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-freorder-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-findirect-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fhoist-adjacent-loads"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-frerun-cse-after-loop"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-finline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-switch-conversion"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-foptimize-sibling-calls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fexpensive-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-funsafe-loop-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-functions-called-once"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fdelete-null-pointer-checks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">200010</span>,ch_top=<span class="number">4e7</span>;</span><br><span class="line">lxl n,m,len,_l=<span class="number">1</span>,_r,LastBlock,now;</span><br><span class="line">lxl a[big],block[big],l[big],r[big],ans[big],*_block=block,*_a=a,*ll=l,*rr=r;</span><br><span class="line"><span class="keyword">char</span> ch[ch_top],*now_r=ch<span class="number">-1</span>,*now_w=ch<span class="number">-1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl l,r,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Query &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> block[l]==block[another.l]?r&lt;another.r:block[l]&lt;block[another.l];</span><br><span class="line">&#125;</span><br><span class="line">&#125;q[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">HashMap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl size=<span class="number">0</span>;</span><br><span class="line">lxl head[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl u,v,next;</span><br><span class="line">&#125;e[big&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function">lxl <span class="title">hash</span><span class="params">(lxl u)</span></span>&#123;<span class="keyword">return</span> u%big;&#125;</span><br><span class="line"><span class="keyword">inline</span> lxl&amp; <span class="keyword">operator</span> [](lxl u)</span><br><span class="line">&#123;</span><br><span class="line">lxl hu=hash(u);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[hu]);i;i=e[i].next)<span class="keyword">if</span>(e[i].u==u)<span class="keyword">return</span> e[i].v;</span><br><span class="line">e[++size]=(_Data)&#123;u,<span class="number">-1</span>,head[hu]&#125;,head[hu]=size;</span><br><span class="line"><span class="keyword">return</span> e[size].v;</span><br><span class="line">&#125;</span><br><span class="line">_HashMap()&#123;size=<span class="number">0</span>,<span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span> head);&#125;</span><br><span class="line">&#125;<span class="built_in">map</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(*++now_r&lt;<span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">int</span> x=*now_r-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">while</span>(*++now_r&gt;=<span class="string">'0'</span>)x=x*<span class="number">10</span>+*now_r-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> st[<span class="number">20</span>];<span class="keyword">static</span> <span class="keyword">int</span> top;</span><br><span class="line">    <span class="keyword">while</span>(st[++top]=<span class="string">'0'</span>+x%<span class="number">10</span>,x/=<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">while</span>(*++now_w=st[top],--top);</span><br><span class="line">    *++now_w=<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">len=<span class="built_in">sqrt</span>(n);</span><br><span class="line">lxl tot=n/len;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=tot;++i)l[i]=*(rr+i<span class="number">-1</span>)+<span class="number">1</span>,r[i]=len*i;</span><br><span class="line"><span class="keyword">if</span>(*(rr+tot)&lt;n)++tot,l[tot]=*(rr+tot<span class="number">-1</span>)+<span class="number">1</span>,r[tot]=n;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=tot;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(*(ll+i));j&lt;=*(rr+i);++j)</span><br><span class="line">block[j]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(~<span class="built_in">map</span>[*(_a+x)])--<span class="built_in">map</span>[*(_a+x)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(lxl x,lxl &amp;FAns)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">++<span class="built_in">map</span>[*(_a+x)];</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">map</span>[FAns])++FAns;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> st=clock();</span><br><span class="line">freopen(<span class="string">"P4137_7.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"data.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">fread(ch,<span class="number">1</span>,ch_top,<span class="built_in">stdin</span>);</span><br><span class="line">R <span class="keyword">int</span> i,j;</span><br><span class="line">n=read(),m=read();</span><br><span class="line">prework();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)a[i]=read();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)q[i].l=read(),q[i].r=read(),q[i].id=i;</span><br><span class="line"><span class="built_in">std</span>::sort(q+<span class="number">1</span>,q+<span class="number">1</span>+m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl l_=q[i].l,r_=q[i].r;</span><br><span class="line"><span class="keyword">if</span>(*(_block+l_)==*(_block+r_))</span><br><span class="line">&#123;</span><br><span class="line">lxl _ans(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(j=l_+<span class="number">1</span>;j&lt;=r_;++j)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(l_);k&lt;=j;++k)</span><br><span class="line"><span class="keyword">if</span>(_ans==*(_a+k))++_ans;</span><br><span class="line">ans[q[i].id]=_ans;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(block[l_]!=LastBlock)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(_r&gt;r[*(_block+l_)])del(_r--);</span><br><span class="line"><span class="keyword">while</span>(_l&lt;r[*(_block+l_)]+<span class="number">1</span>)del(_l++);</span><br><span class="line">_r=_l<span class="number">-1</span>;</span><br><span class="line">LastBlock=*(_block+l_),now=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(_r&lt;r_)add(++_r,now);</span><br><span class="line">lxl tmp=now,__l=_l;</span><br><span class="line"><span class="keyword">while</span>(__l&gt;l_)add(--__l,tmp);</span><br><span class="line">ans[q[i].id]=tmp;</span><br><span class="line"><span class="keyword">while</span>(__l&lt;_l)del(__l++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)write(ans[i]);</span><br><span class="line">fwrite(ch,<span class="number">1</span>,now_w-ch,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">double</span> ed=clock();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nusing time :%llfms\n"</span>,ed-st);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 1</span></span><br><span class="line"><span class="comment">1 2 0 2 1</span></span><br><span class="line"><span class="comment">1 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="ac"><a href="#ac" class="headerlink" title="ac"></a>ac</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fgcse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fgcse-lm"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fipa-sra"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-pre"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-vrp"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fpeephole2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ffast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fsched-spec"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"unroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-labels"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fdevirtualize"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcaller-saves"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcrossjumping"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fthread-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-funroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fwhole-program"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-freorder-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fschedule-insns"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-tail-merge"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fschedule-insns2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fstrict-aliasing"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fstrict-overflow"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcse-skip-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcse-follow-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fsched-interblock"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fpartial-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"no-stack-protector"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-freorder-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-findirect-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fhoist-adjacent-loads"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-frerun-cse-after-loop"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-finline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-switch-conversion"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-foptimize-sibling-calls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fexpensive-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-funsafe-loop-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-functions-called-once"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fdelete-null-pointer-checks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">200010</span>,ch_top=<span class="number">4e7</span>;</span><br><span class="line">lxl n,m,len,_l=<span class="number">1</span>,_r,LastBlock,now;</span><br><span class="line">lxl a[big],block[big],l[big],r[big],ans[big],*_block=block,*_a=a,*ll=l,*rr=r,<span class="built_in">map</span>[big];</span><br><span class="line"><span class="keyword">char</span> ch[ch_top],*now_r=ch<span class="number">-1</span>,*now_w=ch<span class="number">-1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl l,r,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Query &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> block[l]==block[another.l]?r&gt;another.r:block[l]&lt;block[another.l];</span><br><span class="line">&#125;</span><br><span class="line">&#125;q[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">HashMap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl size=<span class="number">0</span>;</span><br><span class="line">lxl head[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl u,v,next;</span><br><span class="line">&#125;e[big&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function">lxl <span class="title">hash</span><span class="params">(lxl u)</span></span>&#123;<span class="keyword">return</span> u%big;&#125;</span><br><span class="line"><span class="keyword">inline</span> lxl&amp; <span class="keyword">operator</span> [](lxl u)</span><br><span class="line">&#123;</span><br><span class="line">lxl hu=hash(u);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[hu]);i;i=e[i].next)<span class="keyword">if</span>(e[i].u==u)<span class="keyword">return</span> e[i].v;</span><br><span class="line">e[++size]=(_Data)&#123;u,<span class="number">-1</span>,head[hu]&#125;,head[hu]=size;</span><br><span class="line"><span class="keyword">return</span> e[size].v;</span><br><span class="line">&#125;</span><br><span class="line">_HashMap()&#123;size=<span class="number">0</span>,<span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span> head);&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(*++now_r&lt;<span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">int</span> x=*now_r-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">while</span>(*++now_r&gt;=<span class="string">'0'</span>)x=x*<span class="number">10</span>+*now_r-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> st[<span class="number">20</span>];<span class="keyword">static</span> <span class="keyword">int</span> top;</span><br><span class="line">    <span class="keyword">while</span>(st[++top]=<span class="string">'0'</span>+x%<span class="number">10</span>,x/=<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">while</span>(*++now_w=st[top],--top);</span><br><span class="line">    *++now_w=<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">len=<span class="built_in">sqrt</span>(n);</span><br><span class="line">lxl tot=n/len;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=tot;++i)l[i]=*(rr+i<span class="number">-1</span>)+<span class="number">1</span>,r[i]=len*i;</span><br><span class="line"><span class="keyword">if</span>(*(rr+tot)&lt;n)++tot,l[tot]=*(rr+tot<span class="number">-1</span>)+<span class="number">1</span>,r[tot]=n;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=tot;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(*(ll+i));j&lt;=*(rr+i);++j)</span><br><span class="line">block[j]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">++<span class="built_in">map</span>[a[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(lxl x,lxl &amp;FAns)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(~<span class="built_in">map</span>[a[x]])--<span class="built_in">map</span>[a[x]];</span><br><span class="line"><span class="keyword">if</span>(!(~<span class="built_in">map</span>[a[x]]))FAns=<span class="built_in">std</span>::min(FAns,a[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> st=clock();</span><br><span class="line"><span class="comment">// freopen("P4137_7.in","r",stdin);</span></span><br><span class="line"><span class="comment">// freopen("data.out","w",stdout);</span></span><br><span class="line">fread(ch,<span class="number">1</span>,ch_top,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">memset</span>(<span class="built_in">map</span>,<span class="number">-1</span>,<span class="keyword">sizeof</span> <span class="built_in">map</span>);</span><br><span class="line">R <span class="keyword">int</span> i,j;</span><br><span class="line">n=read(),m=read();</span><br><span class="line">prework();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)a[i]=<span class="built_in">std</span>::min(read(),n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)q[i].l=read(),q[i].r=read(),q[i].id=i;</span><br><span class="line"><span class="built_in">std</span>::sort(q+<span class="number">1</span>,q+<span class="number">1</span>+m);</span><br><span class="line"><span class="keyword">while</span>(_r&lt;n)add(++_r);</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">map</span>[now])++now;</span><br><span class="line">&#123;</span><br><span class="line">lxl l_=q[i].l,r_=q[i].r;</span><br><span class="line"><span class="keyword">if</span>(*(_block+l_)==*(_block+r_))</span><br><span class="line">&#123;</span><br><span class="line">lxl _ans(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(j=l_;j&lt;=r_;++j)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(l_);k&lt;=j;++k)</span><br><span class="line"><span class="keyword">if</span>(_ans==*(_a+k))++_ans;</span><br><span class="line">ans[q[i].id]=_ans;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(*(_block+l_)!=LastBlock)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(_r&lt;n)add(++_r);</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">map</span>[now])++now;</span><br><span class="line"><span class="keyword">while</span>(_l&lt;l[*(_block+l_)])del(_l++,now);</span><br><span class="line">LastBlock=*(_block+l_);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(_r&gt;r_)del(_r--,now);</span><br><span class="line">lxl tmp=now,__l=_l;</span><br><span class="line"><span class="keyword">while</span>(__l&lt;l_)del(__l++,tmp);</span><br><span class="line">ans[q[i].id]=tmp;</span><br><span class="line"><span class="keyword">while</span>(__l&gt;_l)add(--__l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)write(ans[i]);</span><br><span class="line">fwrite(ch,<span class="number">1</span>,now_w-ch,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">double</span> ed=clock();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nusing time :%llfms\n"</span>,ed-st);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 1</span></span><br><span class="line"><span class="comment">1 2 0 2 1</span></span><br><span class="line"><span class="comment">1 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:各种不删除莫队&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://www.lemir3.red/categories/其他/"/>
    
    <category term="其他-莫队" scheme="https://www.lemir3.red/categories/其他/其他-莫队/"/>
    
    
    <category term="其他" scheme="https://www.lemir3.red/tags/其他/"/>
    
    <category term="莫队" scheme="https://www.lemir3.red/tags/莫队/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」[SHOI2008]堵塞的交通</title>
    <link href="https://www.lemir3.red/2020/08/26/jie-ti-bao-gao-shoi2008-du-sai-de-jiao-tong/"/>
    <id>https://www.lemir3.red/2020/08/26/jie-ti-bao-gao-shoi2008-du-sai-de-jiao-tong/</id>
    <published>2020-08-26T13:28:33.000Z</published>
    <updated>2020-08-26T13:46:24.915Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:线段树维护节点信息</p><a id="more"></a><h1 id="SHOI2008-堵塞的交通"><a href="#SHOI2008-堵塞的交通" class="headerlink" title="[SHOI2008]堵塞的交通"></a>[SHOI2008]堵塞的交通</h1><p><a href="https://www.luogu.com.cn/problem/P4246" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>晚上在机房莫名奇妙地看了半个小时别人的游记深感自己的颓废于是写篇博客缓解下…</p><p>话说摘要写了一句废话,不过这题确实是这样…</p><p>没有用到任何科技,只是用线段树维护节点的联通信息.</p><p>将一列作为线段树的叶子节点,然后来维护一个$2$行$len$列的矩形内部的联通情况.</p><ul><li>u: 左上到右上联通</li><li>d: 左下到右下联通</li><li>l: 左上到左下联通</li><li>r: 右上到右下联通</li><li>p: 左下到右上联通</li><li>q: 左下到右上联通</li></ul><p>然后用一个数组$con_{0/1,n}$来记录左右是否有边.</p><p>分类讨论如何合并节点信息:</p><ul><li>对于u和d,以u为例,可以左儿子和右儿子的u都为true然后中间的点有边相连,或者左儿子的左上和右下联通,右儿子的左下和右上联通,中间的点有边相连.</li><li>对于l和r,以l为例,可以左儿子本身就联通,或者左儿子的u和d都为true,右儿子的l为true,然后中间有边相连,也就是绕到右儿子去联通这条路径.</li><li>对于p和q,以p为例,可以左儿子的u为true,右儿子的p为true,中间有边相连,或者左儿子的p为true,右儿子的d为true,中间有边相连.</li></ul><p>看一下PushUp函数:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(_Info &amp;t,_Info l,_Info r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t.left=l.left,t.right=r.right;</span><br><span class="line">t.l=l.l|(con[<span class="number">0</span>][l.right]&amp;con[<span class="number">1</span>][l.right]&amp;l.u&amp;l.d&amp;r.l);</span><br><span class="line">t.r=r.r|(con[<span class="number">0</span>][l.right]&amp;con[<span class="number">1</span>][l.right]&amp;r.u&amp;r.d&amp;l.r);</span><br><span class="line">t.u=(l.u&amp;r.u&amp;con[<span class="number">0</span>][l.right])|(l.p&amp;r.q&amp;con[<span class="number">1</span>][l.right]);</span><br><span class="line">t.d=(l.d&amp;r.d&amp;con[<span class="number">1</span>][l.right])|(l.q&amp;r.p&amp;con[<span class="number">0</span>][l.right]);</span><br><span class="line">t.p=(l.u&amp;r.p&amp;con[<span class="number">0</span>][l.right])|(l.p&amp;r.d&amp;con[<span class="number">1</span>][l.right]);</span><br><span class="line">t.q=(l.d&amp;r.q&amp;con[<span class="number">1</span>][l.right])|(l.q&amp;r.u&amp;con[<span class="number">0</span>][l.right]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后因为线段树的节点没法维护节点之外的信息,所以在询问$(l,r)$时要查出$(1,l)$,$(l,r)$,$(r,n)$的联通情况,然后类比PushUp合并情况判断是否联通.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl n,NodeCnt,root;</span><br><span class="line">lxl lson[big&lt;&lt;<span class="number">2</span>],rson[big&lt;&lt;<span class="number">2</span>],con[<span class="number">2</span>][big];</span><br><span class="line"><span class="keyword">char</span> opt[<span class="number">50</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl left,right;</span><br><span class="line"><span class="keyword">bool</span> u,d,l,r,p,q;</span><br><span class="line">&#125;info[big&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());<span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(_Info &amp;t,_Info l,_Info r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t.left=l.left,t.right=r.right;</span><br><span class="line">t.l=l.l|(con[<span class="number">0</span>][l.right]&amp;con[<span class="number">1</span>][l.right]&amp;l.u&amp;l.d&amp;r.l);</span><br><span class="line">t.r=r.r|(con[<span class="number">0</span>][l.right]&amp;con[<span class="number">1</span>][l.right]&amp;r.u&amp;r.d&amp;l.r);</span><br><span class="line">t.u=(l.u&amp;r.u&amp;con[<span class="number">0</span>][l.right])|(l.p&amp;r.q&amp;con[<span class="number">1</span>][l.right]);</span><br><span class="line">t.d=(l.d&amp;r.d&amp;con[<span class="number">1</span>][l.right])|(l.q&amp;r.p&amp;con[<span class="number">0</span>][l.right]);</span><br><span class="line">t.p=(l.u&amp;r.p&amp;con[<span class="number">0</span>][l.right])|(l.p&amp;r.d&amp;con[<span class="number">1</span>][l.right]);</span><br><span class="line">t.q=(l.d&amp;r.q&amp;con[<span class="number">1</span>][l.right])|(l.q&amp;r.u&amp;con[<span class="number">0</span>][l.right]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(lxl &amp;t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t)t=++NodeCnt;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;info[t].u=info[t].d=<span class="literal">true</span>,info[t].left=l,info[t].right=r;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">BuildTree(lson[t],l,mid),BuildTree(rson[t],mid+<span class="number">1</span>,r);</span><br><span class="line">PushUp(info[t],info[lson[t]],info[rson[t]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify1</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl row,lxl val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x==mid)</span><br><span class="line">&#123;</span><br><span class="line">con[row][x]=val;</span><br><span class="line">PushUp(info[t],info[lson[t]],info[rson[t]]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)modify1(lson[t],l,mid,x,row,val);</span><br><span class="line"><span class="keyword">else</span> modify1(rson[t],mid+<span class="number">1</span>,r,x,row,val);</span><br><span class="line">PushUp(info[t],info[lson[t]],info[rson[t]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify2</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;info[t].l=info[t].r=info[t].p=info[t].q=val;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)modify2(lson[t],l,mid,x,val);</span><br><span class="line"><span class="keyword">else</span> modify2(rson[t],mid+<span class="number">1</span>,r,x,val);</span><br><span class="line">PushUp(info[t],info[lson[t]],info[rson[t]]);</span><br><span class="line">&#125;</span><br><span class="line">_<span class="function">Info <span class="title">query</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)<span class="keyword">return</span> info[t];</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(y&lt;=mid)<span class="keyword">return</span> query(lson[t],l,mid,x,y);</span><br><span class="line"><span class="keyword">if</span>(x&gt;mid)<span class="keyword">return</span> query(rson[t],mid+<span class="number">1</span>,r,x,y);</span><br><span class="line">_Info ret;</span><br><span class="line">PushUp(ret,query(lson[t],l,mid,x,y),query(rson[t],mid+<span class="number">1</span>,r,x,y));</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line">BuildTree(root,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,opt+<span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">1</span>]==<span class="string">'E'</span>)<span class="keyword">break</span>;</span><br><span class="line">lxl a=read(),b=read(),c=read(),d=read();</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">1</span>]==<span class="string">'O'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a==c)modify1(root,<span class="number">1</span>,n,<span class="built_in">std</span>::min(b,d),a<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> modify2(root,<span class="number">1</span>,n,b,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">1</span>]==<span class="string">'C'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a==c)modify1(root,<span class="number">1</span>,n,<span class="built_in">std</span>::min(b,d),a<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">else</span> modify2(root,<span class="number">1</span>,n,b,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">1</span>]==<span class="string">'A'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">bool</span> falg=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(b&gt;d)<span class="built_in">std</span>::swap(a,c),<span class="built_in">std</span>::swap(b,d);</span><br><span class="line">_Info ans1=query(root,<span class="number">1</span>,n,b,d),ans2=query(root,<span class="number">1</span>,n,<span class="number">1</span>,b),ans3=query(root,<span class="number">1</span>,n,d,n);</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ans1.u)falg=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(ans1.d&amp;&amp;ans2.r&amp;&amp;ans3.l)falg=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ans1.p)falg=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(ans1.d&amp;&amp;ans2.r)falg=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(ans1.u&amp;&amp;ans3.l)falg=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ans1.q)falg=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(ans1.u&amp;&amp;ans2.r)falg=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(ans1.d&amp;&amp;ans3.l)falg=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ans1.d)falg=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(ans1.u&amp;&amp;ans2.r&amp;&amp;ans3.l)falg=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(falg?<span class="string">"Y\n"</span>:<span class="string">"N\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:线段树维护节点信息&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/数据结构/"/>
    
    <category term="线段树" scheme="https://www.lemir3.red/categories/数据结构/线段树/"/>
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="线段树" scheme="https://www.lemir3.red/tags/线段树/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu3768简单的数学题</title>
    <link href="https://www.lemir3.red/2020/08/25/jie-ti-bao-gao-luogu3768-jian-dan-de-shu-xue-ti/"/>
    <id>https://www.lemir3.red/2020/08/25/jie-ti-bao-gao-luogu3768-jian-dan-de-shu-xue-ti/</id>
    <published>2020-08-25T13:24:49.000Z</published>
    <updated>2020-08-26T01:37:34.778Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:反演+杜教筛</p><a id="more"></a><h1 id="P3768-简单的数学题"><a href="#P3768-简单的数学题" class="headerlink" title="P3768 简单的数学题"></a>P3768 简单的数学题</h1><p><a href="https://www.luogu.com.cn/problem/P3768" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>求$(\sum_{i=1}^{n}\sum_{j=1}^{n}i\cdot j\cdot\gcd(i,j))\bmod p$.</p><p>枚举约数并进行莫比乌斯反演:</p><script type="math/tex; mode=display">\begin{aligned}\sum_{i=1}^{n}\sum_{j=1}^{n}i\cdot j\cdot\gcd(i,j)\\&=\sum_{d=1}^{n}d^3\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor \frac{n}{d} \rfloor}i\cdot j\cdot[\gcd(i,j)=1]\\&=\sum_{d=1}^{n}d^3\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{n}{d}\rfloor}i\cdot j\cdot\sum_{l|i,l|j}\mu(l)\\&=\sum_{d=1}^{n}d^3\sum_{l=1}^{\lfloor\frac{n}{d}\rfloor}\mu(l)\sum_{i|l}^{\lfloor\frac{n}{d}\rfloor}\sum_{j|l}^{\lfloor\frac{n}{d}\rfloor}i\cdot j\end{aligned}</script><p>令$i=i’\times l$,$j=j’\times l$:</p><script type="math/tex; mode=display">\begin{aligned}\sum_{d=1}^{n}d^3\sum_{l=1}^{\lfloor\frac{n}{d}\rfloor}\mu(l)\sum_{i|l}^{\lfloor\frac{n}{d}\rfloor}\sum_{j|l}^{\lfloor\frac{n}{d}\rfloor}i\cdot j\\&=\sum_{d=1}^{n}d^3\sum_{l=1}^{\lfloor\frac{n}{d}\rfloor}\mu(l)\cdot l^2\sum_{i=1}^{\lfloor\frac{n}{dl}\rfloor}\sum_{j=1}^{\lfloor\frac{n}{dl}\rfloor}i\cdot j\end{aligned}</script><p>设$sum(n)=1+2+3+\cdots+n$,设$T=d\cdot l$,交换枚举顺序得:</p><script type="math/tex; mode=display">\begin{aligned}\sum_{d=1}^{n}d^3\sum_{l=1}^{\lfloor\frac{n}{d}\rfloor}\mu(l)\cdot l^2\sum_{i=1}^{\lfloor\frac{n}{dl}\rfloor}\sum_{j=1}^{\lfloor\frac{n}{dl}\rfloor}i\cdot j\\&=\sum_{d=1}^{n}sum^2(\frac{n}{T})\sum_{d|T}d^3(\frac{T}{d})^2\mu(\frac{T}{d})\\&=\sum_{d=1}^{n}sum^2(\frac{n}{T})\cdot T^2\sum_{d|T}d\cdot\mu(\frac{T}{d})\end{aligned}</script><p>设$f(n)=n^2(\mu*id)$.</p><p>根据莫比乌斯反演公式,有:</p><script type="math/tex; mode=display">\varphi *1=id\\\rightarrow id*\mu=\varphi</script><p>所以:</p><script type="math/tex; mode=display">f(n)=n^2\varphi(n)</script><p>考虑进行杜教筛,令$S(n)=\sum_{i=1}^{n}f(n)$,有:</p><script type="math/tex; mode=display">g(1)S(n)=\sum_{i=1}^{n}(f*g)(i)-\sum_{i=2}^{n}g(i)S(\lfloor\frac{n}{i}\rfloor)</script><p>现考虑设出合适的数论函数$g$.</p><script type="math/tex; mode=display">\begin{aligned}\sum_{i=1}^{n}(f*g)(i)\\&=\sum_{i=1}^{n}\sum_{d|i}f(d)g(\frac{i}{d})\\&=\sum_{i=1}^{n}\sum_{d|i}d^2\varphi(d)g(\frac{i}{d})\\&=\sum_{i=1}^{n}i\sum_{d|i}d^2g(\frac{i}{d})\end{aligned}</script><p>设$g(n)=n^2$,约去$d^2$:</p><script type="math/tex; mode=display">\begin{aligned}\sum_{i=1}^{n}i\sum_{d|i}d^2g(\frac{i}{d})\\&=\sum_{i=1}^{n}i^3\end{aligned}</script><p>这个可以直接计算,于是可利用杜教筛快速求和.</p><p>回到原式:</p><script type="math/tex; mode=display">\sum_{d=1}^{n}sum^2(\frac{n}{T})\cdot T^2\sum_{d|T}d\cdot\mu(\frac{T}{d})</script><p>前面的$sum^2(\frac{n}{T})$可以用等差数列求和求出$sum(\frac{n}{T})$后平方,数论分块计算,后面部分用杜教筛求出前缀和.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>    register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">8000010</span>;</span><br><span class="line">lxl p,n,PrimeCnt,inv2,inv4,inv6,ans;</span><br><span class="line">lxl vis[big],prime[big],phi[big],sphi[big];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;lxl,lxl&gt;MemPhi;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPow</span><span class="params">(lxl a,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%p)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a%p);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(   <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;big;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;prime[++PrimeCnt]=i,vis[i]=<span class="literal">true</span>,phi[i]=i<span class="number">-1</span>;&#125;</span><br><span class="line"><span class="keyword">for</span>(   <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=PrimeCnt;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(prime[j]*i&gt;big)<span class="keyword">break</span>;</span><br><span class="line">vis[prime[j]*i]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(i%prime[j])phi[i*prime[j]]=(prime[j]<span class="number">-1</span>)*phi[i]%p;</span><br><span class="line"><span class="keyword">else</span> &#123;phi[i*prime[j]]=prime[j]*phi[i]%p;<span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(   <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;big;++i)sphi[i]=(sphi[i<span class="number">-1</span>]+phi[i]*i%p*i%p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">sum2</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x%=p;</span><br><span class="line"><span class="comment">// return 1ll*((FastPow(x,3)*2%p+FastPow(x,2)*3%p)%p+x)%p*inv6%p;</span></span><br><span class="line"><span class="comment">// return ((((2*x%p*x%p*x%p+p)%p+(3*x%p*x%p+p)%p)%p+x%p)%p*inv6+p)%p;</span></span><br><span class="line"><span class="keyword">return</span> x*(x+<span class="number">1</span>)%p*(x+x+<span class="number">1</span>)%p*inv6%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">sum3</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x%=p;</span><br><span class="line"><span class="comment">// return 1ll*((FastPow(x,4)+FastPow(x,3)*2%p)%p+FastPow(x,2))%p*inv4%p;</span></span><br><span class="line"><span class="keyword">return</span> (((((x*x%p*x%p*x%p+p)%p)+(<span class="number">2</span>*x%p*x%p*x%p+p)%p)%p+(x*x%p+p)%p)%p*inv4+p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">sum</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x%=p;</span><br><span class="line"><span class="keyword">return</span> x*(x+<span class="number">1</span>)%p*inv2%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">SumPhiii</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;big)<span class="keyword">return</span> sphi[x];</span><br><span class="line"><span class="keyword">if</span>(MemPhi[x])<span class="keyword">return</span> MemPhi[x];</span><br><span class="line"><span class="comment">// lxl ret=sum3(x);</span></span><br><span class="line">lxl ret=sum(x);</span><br><span class="line">ret=ret*ret%p;</span><br><span class="line"><span class="comment">// if(ret_!=ret)debug(ret),debug(ret_),endl;</span></span><br><span class="line"><span class="keyword">for</span>(   lxl l(<span class="number">2</span>),r;l&lt;=x;l=r+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">r=x/(x/l);</span><br><span class="line">lxl mul=(sum2(r)-sum2(l<span class="number">-1</span>))%p,mul2=SumPhiii(x/l);</span><br><span class="line">ret=(ret-mul2*mul%p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> MemPhi[x]=(ret+p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p=read(),n=read();</span><br><span class="line">prework();</span><br><span class="line">inv2=FastPow(<span class="number">2</span>,p<span class="number">-2</span>),inv4=FastPow(<span class="number">4</span>,p<span class="number">-2</span>),inv6=FastPow(<span class="number">6</span>,p<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span>(   lxl l(<span class="number">1</span>),r;l&lt;=n;l=r+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl nt=n/l,mul=sum(nt),mul2;</span><br><span class="line">r=n/(n/l),mul=mul*mul%p;</span><br><span class="line">mul2=(SumPhiii(r)-SumPhiii(l<span class="number">-1</span>))%p;</span><br><span class="line">ans=(ans+mul*mul2%p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ONLINE_JUDGE</span></span><br><span class="line">--ans;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(ans+p)%p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:反演+杜教筛&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-数论" scheme="https://www.lemir3.red/categories/数学/数学-数论/"/>
    
    <category term="数学-数论-莫比乌斯反演" scheme="https://www.lemir3.red/categories/数学/数学-数论/数学-数论-莫比乌斯反演/"/>
    
    <category term="数学-数论-杜教筛" scheme="https://www.lemir3.red/categories/数学/数学-数论/数学-数论-莫比乌斯反演/数学-数论-杜教筛/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="数论" scheme="https://www.lemir3.red/tags/数论/"/>
    
    <category term="莫比乌斯反演" scheme="https://www.lemir3.red/tags/莫比乌斯反演/"/>
    
    <category term="杜教筛" scheme="https://www.lemir3.red/tags/杜教筛/"/>
    
  </entry>
  
  <entry>
    <title>数论函数相关</title>
    <link href="https://www.lemir3.red/2020/08/24/shu-lun-han-shu-xiang-guan/"/>
    <id>https://www.lemir3.red/2020/08/24/shu-lun-han-shu-xiang-guan/</id>
    <published>2020-08-24T13:30:36.000Z</published>
    <updated>2020-08-26T00:09:19.726Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:定义在正整数域上的函数</p><a id="more"></a><h1 id="数论函数"><a href="#数论函数" class="headerlink" title="数论函数"></a>数论函数</h1><blockquote><p>  自变数$n$在某个整数集合中取值,因变数$y$取复数值的函数$y=f(n)$称为<strong>数论函数</strong>或<strong>算术函数</strong>,在不说明定义域时默认为$N$.</p></blockquote><h2 id="积性函数"><a href="#积性函数" class="headerlink" title="积性函数"></a>积性函数</h2><p>对于定义域为$D$的数论函数$f(n)$,如果满足:</p><script type="math/tex; mode=display">f(ab)=f(a)f(b),(a,b)=1,a,b\in D</script><p>则称数论函数$f(n)$为积性函数.</p><p>如果对于任意$(a,b)\neq1$也满足$f(ab)=f(a)f(b)$,则称数论函数$f(n)$为完全积性函数.</p><p>有一些常见的积性函数:</p><ul><li>单位函数$\epsilon(n)=[n=1]$</li><li>常数函数$1(n)=1$</li><li>恒等函数$id(n)=n$</li><li>除数函数$d(n)=\sum_{i|n}^{n}1$</li><li>除数和函数$\sigma(n)=\sum_{i|n}^{n}i$</li><li>欧拉函数$\varphi(n)=\sum_{i=1}^n[(i,n)=1]$</li><li>莫比乌斯函数$\mu(n)=\begin{cases}1 &amp;  n=1 \\\ (-1)^x &amp;  n=p_1p_2\cdots p_x \\\ 0 &amp;  otherwise \end{cases}$</li></ul><h2 id="狄利克雷卷积"><a href="#狄利克雷卷积" class="headerlink" title="狄利克雷卷积"></a>狄利克雷卷积</h2><p>两个数论函数的狄利克雷卷积定义为:</p><blockquote><script type="math/tex; mode=display">(f*g)(n)=\sum_{d|n}^{n}f(d)g(\frac{n}{d})</script></blockquote><p>狄利克雷卷积满足常见的运算律:</p><ul><li>$f*g=g*f$</li><li>$(f*g)*h=f*(g*h)$</li><li>$f*(g+h)=f*g+f*h$</li></ul><p>并且有$\epsilon$作为狄利克雷卷积的单位元,对于任意数论函数$f(n)$有$f(n)*\epsilon=f(n)$.</p><h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><ul><li>$\mu*1=\epsilon$</li><li>$\varphi*1=id$</li><li>$1*1=d$</li><li>$id*1=\sigma$</li></ul><h2 id="线性筛-欧拉筛"><a href="#线性筛-欧拉筛" class="headerlink" title="线性筛(欧拉筛)"></a>线性筛(欧拉筛)</h2><p>类似埃氏筛,用质数来标记合数,且让每个合数仅被自己的最小质因子标记一次,复杂度达到$O(n)$.</p><h3 id="质数"><a href="#质数" class="headerlink" title="质数"></a>质数</h3><p>此代码求出了$maxn$范围内的质数:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">2</span>);i&lt;maxn;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;prime[++PrimeCnt]=i,vis[i]=<span class="literal">true</span>;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=PrimeCnt;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(prime[j]*i&gt;maxn)<span class="keyword">break</span>;</span><br><span class="line">vis[prime[j]*i]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="莫比乌斯函数"><a href="#莫比乌斯函数" class="headerlink" title="莫比乌斯函数"></a>莫比乌斯函数</h3><p>利用这种思路,结合$\mu$的性质即可筛出$maxn$范围内的$\mu$:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">2</span>);i&lt;maxn;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;prime[++PrimeCnt]=i,mu[i]=<span class="number">-1</span>,vis[i]=<span class="literal">true</span>;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=PrimeCnt;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(prime[j]*i&gt;maxn)<span class="keyword">break</span>;</span><br><span class="line">vis[prime[j]*i]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(i%prime[j])mu[i*prime[j]]=-mu[i];</span><br><span class="line"><span class="keyword">else</span> &#123;mu[i*prime[j]]=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><p>显然$n$为质数时,$\varphi(n)=n-1$.</p><p>根据唯一分解定理可以将整数分解为质数幂次的乘积,有一结论,若$n=\prod_{i=1}^{n}p_i^{k_i}$,那么$\varphi(n)=n\times\prod_{i=1}^{s}\frac{p_i-1}{p_i}$.</p><p>考虑线性筛的过程,设一个数$n$的最小质因子为$p_1$,那么它在线性筛时会被$p_1$筛去,设$n’\times p_1=n$.</p><p>若$n’~mod~p_1=0$,那么$n’$包含了$n$的所有质因子,于是有:</p><script type="math/tex; mode=display">\begin{aligned}\varphi(n)&=n\times \prod_{i=1}^{s}\frac{p_i-1}{p_i}\\&=p_1\times n'\times \prod_{i=1}^{s}\frac{p_i-1}{p_i}\\&=p_1\times \varphi(n')\end{aligned}</script><p>若$n’~mod~p_1\neq0$,那么$n’$与$p_1$互质,根据欧拉函数的积性有:</p><script type="math/tex; mode=display">\begin{aligned}\varphi(n)&=\varphi(p_1)\times\varphi(n')\\&=(p_1-1)\times\varphi(n')\end{aligned}</script><p>代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">2</span>);i&lt;maxn;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;prime[++PrimeCnt]=i,phi[i]=i<span class="number">-1</span>,vis[i]=<span class="literal">true</span>;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=PrimeCnt;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(prime[j]*i&gt;maxn)<span class="keyword">break</span>;</span><br><span class="line">vis[prime[j]*i]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(i%prime[j])phi[i*prime[j]]=phi[i]*(prime[j]<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;phi[i*prime[j]]=phi[i]*prime[j];<span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="杜教筛"><a href="#杜教筛" class="headerlink" title="杜教筛"></a>杜教筛</h2><p>对于数论函数$f$,求$S(n)=\sum_{i=1}^{n}f(i)$.</p><p>考虑构造$S(n)$与$S(\lfloor \frac{i}{n} \rfloor)$的关系.</p><p>对于任意数论函数$f$,有:</p><script type="math/tex; mode=display">\sum_{i=1}^{n}(f*g)(i)=\sum_{i=1}^{n}g(i)S(\lfloor \frac{i}{n} \rfloor)</script><p>证明,考虑转化为枚举$d$和$\frac{i}{d}$:</p><script type="math/tex; mode=display">\begin{aligned}\sum_{i=1}^{n}\sum_{d|i}^{i}f(d)g(\frac{i}{d})&=\sum_{i=1}^{n}\sum_{j=1}^{\lfloor \frac{n}{i} \rfloor}g(i)f(j)\\&=\sum_{i=1}^{n}g(i)\sum_{j=1}^{\lfloor \frac{n}{i} \rfloor}f(j)\\&=\sum_{i=1}^{n}g(i)S(\lfloor \frac{n}{i} \rfloor)\end{aligned}</script><p>得到杜教筛的核心式子:</p><blockquote><script type="math/tex; mode=display">g(1)S(n)=\sum_{i=1}^{n}(f*g)(i)-\sum_{i=2}^{n}g(i)S(\lfloor \frac{n}{i} \rfloor)</script></blockquote><p>只要能找到合适的数论函数$g$,结合数论分块就可以利用递归快速计算$S(n)$.</p><p>复杂度$O(n^{\frac{3}{4}})$,线性筛预处理前$n^{\frac{2}{3}}$项的前缀和能做到$O(n^{\frac{2}{3}})$.</p><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><p>计算$S(n)=\sum_{i=1}^{n}\mu(i)$:</p><blockquote><script type="math/tex; mode=display">  \text{根据}\mu\text{的性质,我们有:}  \\  \mu *1=\epsilon  \\  \text{进行杜教筛:}  \\  \begin{aligned}  S(n)&=\sum_{i=1}^{n}(\mu*1)(i)-\sum_{i=2}^{n}S(\lfloor \frac{n}{i} \rfloor)  \\&=1-\sum_{i=2}^{n}S(\lfloor \frac{n}{i} \rfloor)  \end{aligned}</script></blockquote><p>就可以很简单地写成代码,注意代码用到了$smu$预处理前面的前缀和和$MemMu$进行记忆化来优化:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SumMu</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;big)<span class="keyword">return</span> smu[x];</span><br><span class="line"><span class="keyword">if</span>(MemMu[x])<span class="keyword">return</span> MemMu[x];</span><br><span class="line"><span class="keyword">int</span> ret=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">2</span>),j;i&lt;=x;i=j+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">j=x/(x/i);</span><br><span class="line">ret-=(SumMu(x/i))*(j-i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> MemMu[x]=ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><p>计算$S(n)=\sum_{i=1}^{n}\varphi(i)$:</p><blockquote><script type="math/tex; mode=display">\text{根据}\varphi\text{的性质,我们有:}\\\varphi*1=id\\\text{进行杜教筛:}\\\begin{aligned}S(n)&=\sum_{i=1}^{n}(\varphi*1)-\sum_{i=2}^{n}S(\lfloor \frac{n}{i} \rfloor)\\&=\frac{n(n+1)}{2}-\sum_{i=2}^{n}S(\lfloor \frac{n}{i} \rfloor)\end{aligned}</script></blockquote><p>与上一例同理:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SumPhi</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;big)<span class="keyword">return</span> sphi[x];</span><br><span class="line"><span class="keyword">if</span>(MemPhi[x])<span class="keyword">return</span> MemPhi[x];</span><br><span class="line"><span class="keyword">int</span> ret=x*(x+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">2</span>),j;i&lt;=x;i=j+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">j=x/(x/i);</span><br><span class="line">ret-=(SumPhi(x/i))*(j-i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> MemPhi[x]=ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h2><p>反演方法是一种求解序列的方法,这种方法可以把一个序列用另一个序列表示出来.</p><p>也就是根据两个序列$\{f(n)\}$和$\{g(n)\}$所满足的特殊关系,给出它们的相互表示方法.</p><p>其中莫比乌斯反演是在数论函数中常用的反演方法.</p><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><blockquote><p>  对于数论函数$f(n)$与$g(n)$,若$f=g*1$,那么$g=f*\mu$.</p></blockquote><p>证明:</p><blockquote><p>  利用狄利克雷卷积的性质:</p><script type="math/tex; mode=display">  f=g*1  \\  \begin{aligned}  f*\mu&=g*1*\mu  \\&=g*\epsilon  \\&=g  \end{aligned}</script></blockquote><h3 id="例-1"><a href="#例-1" class="headerlink" title="例"></a>例</h3><p>计算$\sum_{i=1}^{n}\sum_{j=1}^{n}[(i,j)=1]$.</p><blockquote><script type="math/tex; mode=display">\text{利用}\mu*1=\epsilon\text{进行反演:}\\\begin{aligned}\sum_{i=1}^{n}\sum_{j=1}^{n}[(i,j)=1]\\&=\sum_{i=1}^{n}\sum_{j=1}^{n}\epsilon(\gcd(i,j))\\&=\sum_{i=1}^{n}\sum_{j=1}^{n}\sum_{d|\gcd(i,j)}\mu(d)\\&=\sum_{i=1}^{n}\sum_{j=1}^{n}\sum_{d|i,d|j}\mu(d)\\&=\sum_{d=1}^{n}\sum_{i=1}^{\lfloor \frac{n}{d} \rfloor}\sum_{j=1}^{\lfloor \frac{n}{d} \rfloor}\mu(d)\\&=\sum_{d=1}^{n}\mu(d)\cdot \lfloor \frac{n}{d} \rfloor \cdot \lfloor \frac{n}{d} \rfloor\end{aligned}</script></blockquote><p>数论分块求解,$pre$为$\mu$的前缀和:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;l&lt;=n;l=r+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">r=min(a/(a/l),b/(b/l));</span><br><span class="line">ans+=(pre[r]-pre[l<span class="number">-1</span>])*(a/l)*(b/l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:定义在正整数域上的函数&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-数论" scheme="https://www.lemir3.red/categories/数学/数学-数论/"/>
    
    <category term="数学-数论-莫比乌斯反演" scheme="https://www.lemir3.red/categories/数学/数学-数论/数学-数论-莫比乌斯反演/"/>
    
    <category term="数学-数论-杜教筛" scheme="https://www.lemir3.red/categories/数学/数学-数论/数学-数论-莫比乌斯反演/数学-数论-杜教筛/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="数论" scheme="https://www.lemir3.red/tags/数论/"/>
    
    <category term="莫比乌斯反演" scheme="https://www.lemir3.red/tags/莫比乌斯反演/"/>
    
    <category term="杜教筛" scheme="https://www.lemir3.red/tags/杜教筛/"/>
    
  </entry>
  
  <entry>
    <title>[SCOI2007]修车解题报告</title>
    <link href="https://www.lemir3.red/2020/08/24/scoi2007-xiu-che-jie-ti-bao-gao/"/>
    <id>https://www.lemir3.red/2020/08/24/scoi2007-xiu-che-jie-ti-bao-gao/</id>
    <published>2020-08-24T12:01:29.000Z</published>
    <updated>2020-08-24T12:18:39.168Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:费用流建模</p><a id="more"></a><h1 id="SCOI2007-修车"><a href="#SCOI2007-修车" class="headerlink" title="[SCOI2007]修车"></a>[SCOI2007]修车</h1><p><a href="https://www.luogu.com.cn/problem/P2053" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>考虑一个工人修车的序列为$W_1,W_2,W_3,\cdots,W_n$,考虑修车会使后面的所有车产生等待时间,那么这个工人产生的等待时间为:</p><script type="math/tex; mode=display">\sum_{i=1}^{n}(n-i+1)W_i\\=nW_1+(n-1)W_2+(n-2)W_3+\cdots+2W_{n-1}+W_n</script><p>所以说倒数第$i$个修就会产生$i$乘上修车时间的代价.</p><p>那么考虑一个二分图,左边是车,右边是工人,工人拆成$n$个点表示是在倒数第几个修(作为阶段),连边$(e,i,t)$表示车$e$连上第$t$阶段的工人.</p><p>然后跑最小费用最大流即得答案.</p><p>因为费用是正的,所以显然可以发现选边会从$(i,1)$连续开始,满足条件.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 4557430888798830399</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">2010</span>;</span><br><span class="line">lxl n,m,EdgeSize,s,t,MinCost;</span><br><span class="line">lxl head[big],vis[big],dis[big],cur[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl next,v,w,flow;</span><br><span class="line">&#125;e[big*big*<span class="number">2</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;lxl&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v,flow,w) EdgeAdd(u,v,flow,w),EdgeAdd(v,u,0,-w)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v,lxl flow,lxl w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize].v=v;</span><br><span class="line">e[EdgeSize].next=head[u];</span><br><span class="line">e[EdgeSize].w=w;</span><br><span class="line">e[EdgeSize].flow=flow;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis),<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dis);</span><br><span class="line"><span class="built_in">memcpy</span>(cur,head,<span class="keyword">sizeof</span> cur);</span><br><span class="line">q.push(s),vis[s]=<span class="literal">true</span>,dis[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">lxl u=q.front();q.pop(),vis[u]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v,w=e[i].w,fl=e[i].flow;</span><br><span class="line"><span class="keyword">if</span>(fl&gt;<span class="number">0</span>&amp;&amp;dis[v]&gt;dis[u]+w)</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]+w;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])q.push(v),vis[v]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dis[t]!=INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">dfs</span><span class="params">(lxl u,lxl flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(u==t||!flow)<span class="keyword">return</span> flow;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(R lxl &amp;i(cur[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v,w=e[i].w,fl=e[i].flow;</span><br><span class="line"><span class="keyword">if</span>(!vis[v]&amp;&amp;fl&gt;<span class="number">0</span>&amp;&amp;dis[v]==dis[u]+w)</span><br><span class="line">&#123;</span><br><span class="line">lxl delta=dfs(v,<span class="built_in">std</span>::min(flow-sum,fl));</span><br><span class="line">e[i].flow-=delta,e[i^<span class="number">1</span>].flow+=delta;</span><br><span class="line">sum+=delta,MinCost+=delta*w;</span><br><span class="line"><span class="keyword">if</span>(sum==flow)<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vis[u]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(SPFA())</span><br><span class="line"><span class="keyword">while</span>(dfs(s,INF));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">R <span class="keyword">int</span> i,j,k;</span><br><span class="line">m=read(),n=read();</span><br><span class="line">s=n*m+n+<span class="number">1</span>,t=s+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">&#123;</span><br><span class="line">lxl time_=read();</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=n;++k)add(i,n+(j<span class="number">-1</span>)*n+k,<span class="number">1</span>,time_*k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)add(s,i,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n*m;++i)add(n+i,t,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">dinic();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,<span class="number">1.0</span>*MinCost/n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:费用流建模&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="图论-网络流" scheme="https://www.lemir3.red/categories/图论/图论-网络流/"/>
    
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="网络流" scheme="https://www.lemir3.red/tags/网络流/"/>
    
  </entry>
  
  <entry>
    <title>[WC2011]最大XOR和路径解题报告</title>
    <link href="https://www.lemir3.red/2020/08/20/wc2011-zui-da-xor-he-lu-jing-jie-ti-bao-gao/"/>
    <id>https://www.lemir3.red/2020/08/20/wc2011-zui-da-xor-he-lu-jing-jie-ti-bao-gao/</id>
    <published>2020-08-20T07:46:39.000Z</published>
    <updated>2020-08-21T09:27:48.296Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:线性基求解最大路径异或和</p><a id="more"></a><h1 id="WC2011-最大XOR和路径"><a href="#WC2011-最大XOR和路径" class="headerlink" title="[WC2011]最大XOR和路径"></a>[WC2011]最大XOR和路径</h1><p><a href="https://www.luogu.com.cn/problem/P4151" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>其实是一道很鸟的题.</p><p>因为是求路径的异或和所以重复走过的边对答案没有贡献,但是可以由这条边增广到其他地方,然而在增广返回时又把贡献给取消了.</p><p>思考什么时候才会有贡献,只有当返回的路径不按照原路径,也就是增广到一个环里面时,才会增加这个环的贡献.</p><p>所以处理出图中每一个环,环上边权的异或和添加进线性基中以求最大的异或和.</p><p>现在需要求$1$到$n$的一条路径,随便取出$1$到$n$的一条链的异或和再在线性基上进行增广.</p><p>考虑为什么链可以随便取,因为注意到$1$到$n$的路径上如果有多条链的话那么链也成环,在用这个环进行增广时如果有更优的链会相当于取消掉了原先随便取的链而取到了更优的链.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">50010</span>,large=<span class="number">100010</span>;</span><br><span class="line">lxl n,m,EdgeSize,__base,falg;</span><br><span class="line">lxl head[big],vis[big],p[<span class="number">70</span>],dis[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next,w;</span><br><span class="line">&#125;e[large&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="built_in">std</span>::pair&lt;lxl,lxl&gt; &gt;__s;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v,w) EdgeAdd(u,v,w),EdgeAdd(v,u,w)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v,lxl w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize].w=w;</span><br><span class="line">e[EdgeSize].next=head[u];</span><br><span class="line">e[EdgeSize].v=v;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> __insert(lxl x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(R lxl i(<span class="number">60</span>);i&gt;=<span class="number">0</span>;--i)</span><br><span class="line"><span class="keyword">if</span>(x&gt;&gt;i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!p[i])&#123;p[i]=x;<span class="keyword">break</span>;&#125;</span><br><span class="line">x^=p[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(lxl u,lxl val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dis[u]=val,vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v,w=e[i].w;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])dfs(v,val^w);</span><br><span class="line"><span class="keyword">else</span> __insert(val^w^dis[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">R <span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read(),w=read();</span><br><span class="line">add(u,v,w);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">__base=dis[n];</span><br><span class="line"><span class="keyword">for</span>(lxl i=<span class="number">60</span>;i&gt;=<span class="number">0</span>;--i)<span class="keyword">if</span>((__base^p[i])&gt;__base)__base^=p[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,__base);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:线性基求解最大路径异或和&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/图论/数据结构/"/>
    
    <category term="数据结构-线性基" scheme="https://www.lemir3.red/categories/图论/数据结构/数据结构-线性基/"/>
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="线性基" scheme="https://www.lemir3.red/tags/线性基/"/>
    
  </entry>
  
  <entry>
    <title>「LibreOJ NOIP Round #1」七曜圣贤解题报告</title>
    <link href="https://www.lemir3.red/2020/08/19/libreoj-noip-round-1-qi-yao-sheng-xian-jie-ti-bao-gao/"/>
    <id>https://www.lemir3.red/2020/08/19/libreoj-noip-round-1-qi-yao-sheng-xian-jie-ti-bao-gao/</id>
    <published>2020-08-19T07:13:15.000Z</published>
    <updated>2020-08-19T07:46:26.269Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:题目信息转化思维题</p><a id="more"></a><h1 id="「LibreOJ-NOIP-Round-1」七曜圣贤"><a href="#「LibreOJ-NOIP-Round-1」七曜圣贤" class="headerlink" title="「LibreOJ NOIP Round #1」七曜圣贤"></a>「LibreOJ NOIP Round #1」七曜圣贤</h1><p><a href="https://loj.ac/problem/541" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>loj17年noip模拟赛d2t2,挺好的一道思维题.</p><p>题意很好理解,有编号$[0,b)$的红茶,姆q的车上初始有编号$[0,a]$的红茶,$m$个时刻,每个时刻有三种事件,若事件不合理则视为不发生事件:</p><ol><li><p>购入编号为$p_i$的红茶放入车中.</p></li><li><p>编号为$p_i$的红茶从车上掉出.</p></li><li><p>捡回掉出的红茶中最早掉出的红茶.</p></li></ol><p>答案为每个时刻红茶编号的$mex \times (i^2+7i) ~ mod ~ 998244353$的异或和.</p><p>可以看出捡回操作捡回最早掉出的是本题的关键,而且答案是取$mex$,所以有一个单调队列的模型:如果一个红茶的编号比另一个更晚掉出的红茶的编号大,那么它不可能成为$mex$,在它被捡回之前的$mex$至少都为那个更晚掉出的红茶.</p><p>大体思路就是:设只考虑加入操作的答案为$x$,用单调队列维护出掉出车外的红茶编号的最小值$y$,$mex$即为$min(x,y)$.</p><p>所以,我们用一个数组记录每种编号的红茶的状态,$0$为从不在车上,$1$为在车上,$2$为曾经在车上,然后用另一个数组按时间记录掉出车外的红茶并像队列一样记录这个数组的头尾.</p><p>具体的细节见代码.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">2000010</span>;</span><br><span class="line">lxl T,n,m,seed,a,b,d;</span><br><span class="line">lxl p[big],del[big],q[big],red[big],cnt[big];</span><br><span class="line"><span class="keyword">namespace</span> IO&#123;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> seed;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">randnum</span><span class="params">()</span></span>&#123;</span><br><span class="line">seed^=seed&lt;&lt;<span class="number">13</span>;</span><br><span class="line">seed^=seed&gt;&gt;<span class="number">17</span>;</span><br><span class="line">seed^=seed&lt;&lt;<span class="number">5</span>;</span><br><span class="line"><span class="keyword">return</span> seed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(lxl &amp;x)</span></span>&#123;<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;x);<span class="keyword">return</span> x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init_case</span><span class="params">(lxl &amp;m,lxl &amp;a,lxl &amp;b,lxl &amp;d,lxl p[])</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%u%d%d%d%d"</span>,&amp;m,&amp;seed,&amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(randnum()%c==<span class="number">0</span>)p[i]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> p[i]=randnum()%b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update_ans</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> &amp;ans_sum,<span class="keyword">unsigned</span> <span class="keyword">int</span> cur_ans,<span class="keyword">int</span> no)</span></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line">ans_sum^=(<span class="keyword">long</span> <span class="keyword">long</span>)no*(no+<span class="number">7</span>)%mod*cur_ans%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"><span class="keyword">using</span> IO::init_case;</span><br><span class="line"><span class="keyword">using</span> IO::update_ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line">R int i(0),j;</span><br><span class="line">lxl l=<span class="number">1</span>,r=<span class="number">0</span>,top=<span class="number">0</span>,tot=<span class="number">0</span>,ans=a+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> out=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=b;++i)red[i]=cnt[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=a;++i)red[i]=<span class="number">1</span>,++cnt[i];</span><br><span class="line">i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">j=p[++i];</span><br><span class="line"><span class="keyword">if</span>(d==<span class="number">1</span>&amp;&amp;red[j])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>((!(~j))||red[j]==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(top==tot)<span class="keyword">continue</span>;</span><br><span class="line">red[del[++top]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(q[l]==top)++l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!red[j])</span><br><span class="line">&#123;</span><br><span class="line">red[j]=<span class="number">1</span>;</span><br><span class="line">++cnt[j];</span><br><span class="line"><span class="keyword">while</span>(cnt[ans])++ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">red[j]=<span class="number">2</span>,del[++tot]=j;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r&amp;&amp;j&lt;=del[q[r]])--r;</span><br><span class="line">q[++r]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> add=(<span class="number">1l</span>l*i*i%mod+i*<span class="number">7</span>)%mod;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=r)out^=<span class="number">1l</span>l*<span class="built_in">std</span>::min(ans,del[q[l]])*add%mod;</span><br><span class="line"><span class="keyword">else</span> out^=<span class="number">1l</span>l*ans*add%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,out);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">read(T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">init_case(m,a,b,d,p);</span><br><span class="line">work();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:题目信息转化思维题&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/数据结构/"/>
    
    <category term="数据结构-单调队列" scheme="https://www.lemir3.red/categories/数据结构/数据结构-单调队列/"/>
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="单调队列" scheme="https://www.lemir3.red/tags/单调队列/"/>
    
  </entry>
  
  <entry>
    <title>[NOI2009]变换序列解题报告</title>
    <link href="https://www.lemir3.red/2020/08/19/noi2009-bian-huan-xu-lie-jie-ti-bao-gao/"/>
    <id>https://www.lemir3.red/2020/08/19/noi2009-bian-huan-xu-lie-jie-ti-bao-gao/</id>
    <published>2020-08-18T23:30:55.000Z</published>
    <updated>2020-08-19T00:03:57.254Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:反向匈牙利恐成最大赢家</p><a id="more"></a><h1 id="NOI2009-变换序列"><a href="#NOI2009-变换序列" class="headerlink" title="[NOI2009]变换序列"></a>[NOI2009]变换序列</h1><p><a href="https://www.luogu.com.cn/problem/P1963" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>可见每个位置有两个选择,而且选择的数和其他位置不能重复.</p><p>所以有一个二分图模型,位置为左集,数为右集,左集中每个点会连两条边到右集.</p><p>用匈牙利算法求得最大匹配即为可行解.</p><p>要求字典序最小的解,考虑匈牙利算法的过程,一旦发生了增广,会把原先已经完成了匹配的左集中的点对应右集中的点向后移,也就是字典序变大,所以匈牙利求出了字典序最大的解.</p><p>那么倒序枚举左集中的点即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">10010</span>;</span><br><span class="line">lxl n,ans;</span><br><span class="line">lxl match[big],edge[<span class="number">2</span>][big],InvMatch[big],vis[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hungry</span><span class="params">(lxl u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;<span class="number">2</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=edge[i][u];</span><br><span class="line"><span class="keyword">if</span>(vis[v])<span class="keyword">continue</span>;</span><br><span class="line">vis[v]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(!(~match[v])||hungry(match[v]))</span><br><span class="line">&#123;</span><br><span class="line">match[v]=u;</span><br><span class="line">InvMatch[u]=v;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(match,<span class="number">-1</span>,<span class="keyword">sizeof</span> match);</span><br><span class="line">R <span class="keyword">int</span> i,j;</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl d=read(),a=(i+d)%n,b=(i-d+n)%n;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b)<span class="built_in">std</span>::swap(a,b);</span><br><span class="line">edge[<span class="number">0</span>][i]=a,edge[<span class="number">1</span>][i]=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=n<span class="number">-1</span>;~i;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">ans+=hungry(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans&lt;n<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">"No Answer\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;++i)<span class="built_in">printf</span>(<span class="string">"%lld "</span>,InvMatch[i]);</span><br><span class="line"><span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:反向匈牙利恐成最大赢家&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="图论-二分图" scheme="https://www.lemir3.red/categories/图论/图论-二分图/"/>
    
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="二分图" scheme="https://www.lemir3.red/tags/二分图/"/>
    
  </entry>
  
  <entry>
    <title>自适应辛普森法笔记</title>
    <link href="https://www.lemir3.red/2020/08/12/zi-gua-ying-xin-pu-sen-fa-bi-ji/"/>
    <id>https://www.lemir3.red/2020/08/12/zi-gua-ying-xin-pu-sen-fa-bi-ji/</id>
    <published>2020-08-12T13:49:11.000Z</published>
    <updated>2020-08-13T15:21:46.933Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:求解定积分近似值</p><a id="more"></a><h2 id="自适应辛普森法"><a href="#自适应辛普森法" class="headerlink" title="自适应辛普森法"></a>自适应辛普森法</h2><p>思想是把被积函数分成小段,每一小段用二次函数的积分来拟合.</p><p>二次函数的积分公式被称为simpson公式,这里给出推导:</p><blockquote><script type="math/tex; mode=display">\text{有二次函数f(x):}\\f(x)=Ax^2+Bx+C\\\text{容易得到f(x)的原函数F(x):}\\F(x)=\int_0^xf(x){\mathrm d}x=\frac{A}{3}x^3+\frac{B}{2}x^2+Cx+D\\\text{根据Newton-Leibniz公式,有:}\\\begin{aligned}\int_l^rf(x){\mathrm d}x&=F(r)-F(l)\\&=\frac{A}{3}r^3+\frac{B}{2}r^2+Cr+D-\frac{A}{3}l^3-\frac{B}{2}l^2-Cl-D\\&=\frac{A}{3}(r^3-l^3)+\frac{B}{2}(r^2-l^2)+C(r-l)\\&=(r-l)(\frac{A}{3}(l^2+r^2+lr)+\frac{B}{2}(l+r)+C)\\&=\frac{r-l}{6}(2A(l^2+r^2+lr)+3B(l+r)+6C)\\&=\frac{r-l}{6}((Al^2+Bl+C)+(Ar^2+Br+C)+4(A(\frac{r-l}{2})^2+B\frac{r-l}{2}+C))\\&=\frac{r-l}{6}(f(l)+f(r)+4f(\frac{r-l}{2}))\end{aligned}</script></blockquote><p>现在的问题是如何控制拟合的精度,在被积函数的一个小段上,如果把这一段拿来当作二次函数求得的积分值和把这一段等分成两段分别当作二次函数求得的积分值之和相差在一个事先指定的误差之内则停止递归.</p><p>在折半向下递归时,指定的误差当然也要折半.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>计算积分$\int_L^R\frac{cx+d}{ax+b}{\mathrm d}x$并保留六位小数.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">double</span> a,b,c,d,l,r;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (c*x+d)/(a*x+b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">simpson</span><span class="params">(<span class="keyword">double</span> l,<span class="keyword">double</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> (r-l)*(f(l)+f(r)+<span class="number">4</span>*f(mid))/<span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ask</span><span class="params">(<span class="keyword">double</span> l,<span class="keyword">double</span> r,<span class="keyword">double</span> eps,<span class="keyword">double</span> ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">double</span> fl=simpson(l,mid),fr=simpson(mid,r);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(fl+fr-ans)&lt;=eps*<span class="number">15</span>)<span class="keyword">return</span> fl+fr+(fl+fr-ans)/<span class="number">15</span>;</span><br><span class="line"><span class="keyword">return</span> ask(l,mid,eps/<span class="number">2</span>,fl)+ask(mid,r,eps/<span class="number">2</span>,fr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf%lf%lf"</span>,&amp;a,&amp;b,&amp;c,&amp;d,&amp;l,&amp;r);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.6lf\n"</span>,ask(l,r,<span class="number">1e-8</span>,simpson(l,r)));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:求解定积分近似值&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-计算几何" scheme="https://www.lemir3.red/categories/数学/数学-计算几何/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="计算几何" scheme="https://www.lemir3.red/tags/计算几何/"/>
    
  </entry>
  
  <entry>
    <title>LOJ6208树上询问解题报告</title>
    <link href="https://www.lemir3.red/2020/08/10/loj6208-shu-shang-xun-wen-jie-ti-bao-gao/"/>
    <id>https://www.lemir3.red/2020/08/10/loj6208-shu-shang-xun-wen-jie-ti-bao-gao/</id>
    <published>2020-08-10T13:40:42.000Z</published>
    <updated>2020-08-21T12:04:14.164Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:矩阵表达修改</p><a id="more"></a><h1 id="LOJ6208树上询问"><a href="#LOJ6208树上询问" class="headerlink" title="LOJ6208树上询问"></a>LOJ6208树上询问</h1><p><a href="https://loj.ac/problem/6208" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>树上的路径修改和单点询问,首先想到用树剖来做.</p><p>每个节点是两个权值,放到线段树上不好维护,但是可以轻易地写成矩阵:</p><script type="math/tex; mode=display">\begin{bmatrix}k_i,t_i,1\end{bmatrix}\begin{bmatrix}1,0,0\\0,1,0\\d,0,1\end{bmatrix}=\begin{bmatrix}k_i+d,t_i,1\end{bmatrix}\\\begin{bmatrix}k_i,t_i,1\end{bmatrix}\begin{bmatrix}1,d,0\\0,1,0\\0,0,1\end{bmatrix}=\begin{bmatrix}k_i,t_i+d\times k_i,1\end{bmatrix}</script><p>因为只用单点询问所以打好下传标记就可以了,每个标记在单点上只会被乘一遍.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl n,m,NodeCnt,IdCnt,EdgeSize,root;</span><br><span class="line">lxl lson[big&lt;&lt;<span class="number">2</span>],rson[big&lt;&lt;<span class="number">2</span>],mark[big&lt;&lt;<span class="number">2</span>],head[big],top[big],fa[big],depth[big],size[big],son[big],id[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl a[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">_Matrix()&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);&#125;</span><br><span class="line"><span class="keyword">inline</span> _Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> _Matrix &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">_Matrix b;</span><br><span class="line">R <span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">3</span>;++k)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">3</span>;++j)</span><br><span class="line">b.a[i][j]+=a[i][k]*another.a[k][j];</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> _Matrix <span class="keyword">operator</span> +(<span class="keyword">const</span> _Matrix &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">_Matrix b;</span><br><span class="line">R <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)b.a[<span class="number">0</span>][i]=a[<span class="number">0</span>][i]+another.a[<span class="number">0</span>][i];</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;sum[big&lt;&lt;<span class="number">2</span>],tag[big&lt;&lt;<span class="number">2</span>],I;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl next,v;</span><br><span class="line">&#125;e[big&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize].v=v;</span><br><span class="line">e[EdgeSize].next=head[u];</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(lxl &amp;t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t)t=++NodeCnt;</span><br><span class="line">sum[t].a[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>,sum[t].a[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>,sum[t].a[<span class="number">0</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">tag[t]=I;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">BuildTree(lson[t],l,mid),BuildTree(rson[t],mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(lxl t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!mark[t])<span class="keyword">return</span>;</span><br><span class="line">sum[lson[t]]=sum[lson[t]]*tag[t];</span><br><span class="line">sum[rson[t]]=sum[rson[t]]*tag[t];</span><br><span class="line">tag[lson[t]]=tag[lson[t]]*tag[t];</span><br><span class="line">tag[rson[t]]=tag[rson[t]]*tag[t];</span><br><span class="line">mark[lson[t]]=mark[rson[t]]=<span class="literal">true</span>;</span><br><span class="line">tag[t]=I,mark[t]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl y,lxl type,lxl d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)</span><br><span class="line">&#123;</span><br><span class="line">_Matrix b;</span><br><span class="line"><span class="keyword">if</span>(!type)</span><br><span class="line">&#123;</span><br><span class="line">b.a[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>,b.a[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>,b.a[<span class="number">0</span>][<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">b.a[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>,b.a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>,b.a[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">b.a[<span class="number">2</span>][<span class="number">0</span>]=d,b.a[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">0</span>,b.a[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">b.a[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>,b.a[<span class="number">0</span>][<span class="number">1</span>]=d,b.a[<span class="number">0</span>][<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">b.a[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>,b.a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>,b.a[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">b.a[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">0</span>,b.a[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">0</span>,b.a[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum[t]=sum[t]*b,tag[t]=tag[t]*b;</span><br><span class="line">mark[t]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">PushDown(t);</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)modify(lson[t],l,mid,x,y,type,d);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid)modify(rson[t],mid+<span class="number">1</span>,r,x,y,type,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">query</span><span class="params">(lxl t,lxl l,lxl r,lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> sum[t].a[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">PushDown(t);</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)<span class="keyword">return</span> query(lson[t],l,mid,x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(rson[t],mid+<span class="number">1</span>,r,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(lxl u,lxl father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fa[u]=father,depth[u]=depth[father]+<span class="number">1</span>;</span><br><span class="line">size[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==father)<span class="keyword">continue</span>;</span><br><span class="line">dfs1(v,u);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(size[son[u]]&lt;size[v])son[u]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(lxl u,lxl top_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">top[u]=top_,id[u]=++IdCnt;</span><br><span class="line"><span class="keyword">if</span>(!son[u])<span class="keyword">return</span>;</span><br><span class="line">dfs2(son[u],top_);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa[u]||v==son[u])<span class="keyword">continue</span>;</span><br><span class="line">dfs2(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ModifyTree</span><span class="params">(lxl x,lxl y,lxl type,lxl d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;top[x]!=top[y];)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(depth[top[x]]&lt;depth[top[y]])<span class="built_in">std</span>::swap(x,y);</span><br><span class="line">modify(root,<span class="number">1</span>,n,id[top[x]],id[x],type,d);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(depth[x]&gt;depth[y])<span class="built_in">std</span>::swap(x,y);</span><br><span class="line">modify(root,<span class="number">1</span>,n,id[x],id[y],type,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("tree1.in","r",stdin);</span></span><br><span class="line"><span class="comment">// freopen("test.out","w",stdout);</span></span><br><span class="line">I.a[<span class="number">0</span>][<span class="number">0</span>]=I.a[<span class="number">1</span>][<span class="number">1</span>]=I.a[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">R <span class="keyword">int</span> i,j;</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read();</span><br><span class="line">EdgeAdd(u,v),EdgeAdd(v,u);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">0</span>),dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">BuildTree(root,<span class="number">1</span>,n);</span><br><span class="line">m=read();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl opt=read(),x,y;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">x=read(),y=read();</span><br><span class="line">ModifyTree(x,<span class="number">1</span>,<span class="number">0</span>,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">x=read(),y=read();</span><br><span class="line">ModifyTree(x,<span class="number">1</span>,<span class="number">1</span>,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">x=read();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(root,<span class="number">1</span>,n,id[x]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:矩阵表达修改&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-矩阵" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/"/>
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/数据结构/"/>
    
    <category term="数据结构-线段树" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/数据结构/数据结构-线段树/"/>
    
    <category term="树链剖分" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/数据结构/数据结构-线段树/树链剖分/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="线段树" scheme="https://www.lemir3.red/tags/线段树/"/>
    
    <category term="矩阵" scheme="https://www.lemir3.red/tags/矩阵/"/>
    
    <category term="树链剖分" scheme="https://www.lemir3.red/tags/树链剖分/"/>
    
  </entry>
  
  <entry>
    <title>P3708_koishi的数学题解题报告</title>
    <link href="https://www.lemir3.red/2020/08/07/p3708-koishi-de-shu-xue-ti-jie-ti-bao-gao/"/>
    <id>https://www.lemir3.red/2020/08/07/p3708-koishi-de-shu-xue-ti-jie-ti-bao-gao/</id>
    <published>2020-08-07T13:00:05.000Z</published>
    <updated>2020-08-13T00:42:45.702Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:数列求和</p><a id="more"></a><h1 id="P3708-koishi的数学题"><a href="#P3708-koishi的数学题" class="headerlink" title="P3708 koishi的数学题"></a>P3708 koishi的数学题</h1><p><a href="https://www.luogu.com.cn/problem/P3708" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><script type="math/tex; mode=display">\sum_{i=1}^{n}x ~mod ~i\\= \sum_{i=1}^{n}x-\lfloor \frac{x}{i} \rfloor \cdot i\\=n\cdot x-\sum_{i=1}^n \lfloor \frac{x}{i} \rfloor \cdot i</script><p>问题转化为求$\sum_{i=1}^n \lfloor \frac{x}{i} \rfloor \cdot i$.</p><p>考虑将$\sum_{i=1}^n \lfloor \frac{x}{i} \rfloor \cdot i$作为数列中的一项进行差分,在$x$变化到$x+1$时,因为$x$与$x+1$互素,所以有$\lfloor \frac{x+1}{i} \rfloor-\lfloor \frac{x}{i}\rfloor=1 ~(i|x+1)$.</p><p>再乘上一个$i$,数列$ \{ \sum_{i=1}^n \lfloor \frac{1}{i} \rfloor \cdot i , \sum_{i=1}^n \lfloor \frac{2}{i} \rfloor \cdot i , \cdots,\sum_{i=1}^n \lfloor \frac{n}{i} \rfloor \cdot i \} $的差分数列为角标的约数之和.</p><p>前缀和还原一下就好了.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">1000010</span>;</span><br><span class="line">lxl n;</span><br><span class="line">lxl f[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">R <span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(j=i;j&lt;=n;j+=i)</span><br><span class="line">f[j]+=i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)f[i]+=f[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line">prework();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)<span class="built_in">printf</span>(<span class="string">"%lld "</span>,n*i-f[i]);</span><br><span class="line"><span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:数列求和&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-数论" scheme="https://www.lemir3.red/categories/数学/数学-数论/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="数论" scheme="https://www.lemir3.red/tags/数论/"/>
    
  </entry>
  
  <entry>
    <title>bzoj4502串解题报告</title>
    <link href="https://www.lemir3.red/2020/08/05/bzoj4502-chuan-jie-ti-bao-gao/"/>
    <id>https://www.lemir3.red/2020/08/05/bzoj4502-chuan-jie-ti-bao-gao/</id>
    <published>2020-08-05T13:17:03.000Z</published>
    <updated>2020-08-05T23:35:19.060Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:AC自动机解决前后缀问题</p><a id="more"></a><h1 id="bzoj4502串"><a href="#bzoj4502串" class="headerlink" title="bzoj4502串"></a>bzoj4502串</h1><p><a href="https://darkbzoj.tk/problem/4502" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先不考虑重复,将所有的原串的前缀两两结合得到答案串.</p><p>所以建出一颗ac自动机,在ac自动机上每一个状态对应一个前缀,状态数的平方即为答案串的个数.</p><p>现在考虑计算重复的答案串,对于一个答案串,为了避免重复,我们只能记录划分线最靠右边的一种方案,记这按着种方案划分后左边的串为$s_0$,右边的串为$s_1$.</p><p>对于任意一种其他的划分方案,记划分后左边的串为$s_0^′$,右边的串为$s_1^′$.</p><p>那么因为是答案串所以$s_1$和$s_1^′$均作为ac自动机上的状态,而且$s_1$为$s_1^′$的作为一个原串的前缀的最长后缀,根据定义显然$s_1=fail(s_1^′)$.</p><p>所以对于原串中所有以$(s_1^′-s_1)$作为后缀的前缀$s_0$,都会因为$s_1$的存在产生一次重复,因为这样会形成$(s_0,s_1^′)$与$(s_0,s_1)$两个相同的答案串,但是划分方式不同,问题就转化为:对于ac自动机上的一个状态以及它的fail指针对应的状态,有多少个以两个状态相差部分作为后缀的状态.</p><p>求一个串作为多少个串的后缀是一个很经典的问题,在ac自动机的fail树上统计子树大小即可.</p><p>找到作为这两个状态相差的部分的状态可以用倍增在ac自动机上跳,将fail指针对应的状态跳到根之后原状态所在的状态就是了,考虑一下ac自动机上fail指针到根的路径和原状态到根的路径即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">#pragma GCC optimize('O2')</span><br><span class="line">#pragma GCC optimize('O3')</span><br><span class="line">#pragma GCC optimize('Ofast')</span><br><span class="line">#pragma GCC target('sse,sse2,sse3,sse4.1,sse4.2,adm,avx,popcnt')</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">300010</span>,small=<span class="number">10010</span>;</span><br><span class="line">lxl n,NodeCnt,len,ans;</span><br><span class="line">lxl trie[<span class="number">26</span>][big],fail[big],size[big],st[<span class="number">20</span>][big];</span><br><span class="line"><span class="keyword">char</span> s[small];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;lxl&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">p</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=len;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl num=s[i]-<span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span>(!trie[num][p])trie[num][p]=++NodeCnt,st[<span class="number">0</span>][NodeCnt]=p;</span><br><span class="line">p=trie[num][p];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">GetFail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;<span class="number">26</span>;++i)<span class="keyword">if</span>(trie[i][<span class="number">0</span>])q.push(trie[i][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span>(;!q.empty();)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=q.front();q.pop();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;<span class="number">26</span>;++i)</span><br><span class="line"><span class="keyword">if</span>(trie[i][u])</span><br><span class="line">&#123;</span><br><span class="line">fail[trie[i][u]]=trie[i][fail[u]];</span><br><span class="line">q.push(trie[i][u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> trie[i][u]=trie[i][fail[u]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("data.txt","r",stdin);</span></span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(;n;--n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">insert();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;<span class="number">20</span>;++j)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=NodeCnt;++i)</span><br><span class="line">st[j][i]=st[j<span class="number">-1</span>][st[j<span class="number">-1</span>][i]];</span><br><span class="line">GetFail();</span><br><span class="line">ans=NodeCnt*NodeCnt;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=NodeCnt;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(fail[i]);j;j=fail[j])</span><br><span class="line">++size[j];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=NodeCnt;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl k(fail[i]),i_(i);</span><br><span class="line"><span class="keyword">if</span>(!k)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">19</span>);j&gt;=<span class="number">0</span>;--j)<span class="keyword">if</span>(st[j][k]&amp;&amp;st[j][i_])k=st[j][k],i_=st[j][i_];</span><br><span class="line">i_=st[<span class="number">0</span>][i_];</span><br><span class="line">ans-=size[i_];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:AC自动机解决前后缀问题&lt;/p&gt;</summary>
    
    
    
    <category term="字符串" scheme="https://www.lemir3.red/categories/字符串/"/>
    
    <category term="字符串-AC自动机" scheme="https://www.lemir3.red/categories/字符串/字符串-AC自动机/"/>
    
    
    <category term="AC自动机" scheme="https://www.lemir3.red/tags/AC自动机/"/>
    
    <category term="字符串" scheme="https://www.lemir3.red/tags/字符串/"/>
    
  </entry>
  
  <entry>
    <title>[网络流24题]魔术球问题解题报告</title>
    <link href="https://www.lemir3.red/2020/07/31/wang-luo-liu-24-ti-mo-zhu-qiu-wen-ti-jie-ti-bao-gao/"/>
    <id>https://www.lemir3.red/2020/07/31/wang-luo-liu-24-ti-mo-zhu-qiu-wen-ti-jie-ti-bao-gao/</id>
    <published>2020-07-31T00:32:24.000Z</published>
    <updated>2020-07-31T01:34:16.600Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:负权费用流思路</p><a id="more"></a><h1 id="网络流24题-魔术球问题"><a href="#网络流24题-魔术球问题" class="headerlink" title="[网络流24题]魔术球问题"></a>[网络流24题]魔术球问题</h1><p><a href="https://www.luogu.com.cn/problem/P2765" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>这个思路特别地鬼怪.</p><p>首先将和为完全平方数的数字小的向大的连边,流量为inf.</p><p>现在考虑将这些数字分成n个集合,所以将源点拆点,连一条流量为n的边,数字拆点,连一条流量为1的边,出点连向汇点,入点连向源点的出点.</p><p>这样一条增广路就对应了一个柱子上放的数.</p><p>但是我们要这条增广路尽量地长,才能保证取到的数字连续,因为显然数字越小与它连边的数越多,尽可能地长的路径就可以取到更多的数.</p><p>通过找规律发现柱子上的完全平方数最大为n*n,所以处理一下防止增广到后面的大数,<del>没想到证明方法不过规律挺容易就发现了.</del></p><p>所以将数字拆点之间的边设定费用为-1,这样就会增广更多的数来得到最小费用,最小费用取反即为答案.</p><p>现在问题是如何输出数字连续的方案,从汇点开始递归,遍历虚边上流量为1的边,建模的方式可以保证路径上的向源点方向单调减少,所以一直向前输出即可.</p><p>但是需要注意的是可能出现有一个柱子上只放了一个数,这条增广路可能由后面的点得到,所以汇点开始遍历的时候除去大于答案的数,之后输出在$[1,ans]$中没有输出的数到这个柱子对应的方案上.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 4557430888798830399</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl small=<span class="number">6060</span>,big=<span class="number">100010</span>;</span><br><span class="line">lxl n,EdgeSize,s,ss,t,MinCost,yag;</span><br><span class="line">lxl head[small],cur[small],dis[small],vis[small],po[<span class="number">60</span>],flag[big];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;lxl&gt;q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl next,v,w,flow;</span><br><span class="line">&#125;e[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v,lxl flow,lxl w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize].v=v;</span><br><span class="line">e[EdgeSize].next=head[u];</span><br><span class="line">e[EdgeSize].flow=flow;</span><br><span class="line">e[EdgeSize].w=w;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis),<span class="built_in">memset</span>(dis,INF,<span class="keyword">sizeof</span> dis);</span><br><span class="line"><span class="comment">// debug(dis[1]);return false;</span></span><br><span class="line"><span class="built_in">memcpy</span>(cur,head,<span class="keyword">sizeof</span> cur);</span><br><span class="line">dis[s]=<span class="number">0</span>,vis[s]=<span class="literal">true</span>,q.push(s);</span><br><span class="line"><span class="keyword">for</span>(;!q.empty();)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=q.front();q.pop(),vis[u]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v,w=e[i].w,fl=e[i].flow;</span><br><span class="line"><span class="keyword">if</span>(fl&gt;<span class="number">0</span>&amp;&amp;dis[v]&gt;dis[u]+w)</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]+w;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])vis[v]=<span class="literal">true</span>,q.push(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dis[t]&lt;INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">dfs</span><span class="params">(lxl u,lxl flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(u==t)<span class="keyword">return</span> flow;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">vis[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(R lxl &amp;i(cur[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v,fl=e[i].flow,w=e[i].w;</span><br><span class="line"><span class="keyword">if</span>(fl&gt;<span class="number">0</span>&amp;&amp;!vis[v]&amp;&amp;dis[v]==dis[u]+w)</span><br><span class="line">&#123;</span><br><span class="line">lxl delta=dfs(v,<span class="built_in">std</span>::min(flow-sum,fl));</span><br><span class="line">e[i].flow-=delta,e[i^<span class="number">1</span>].flow+=delta;</span><br><span class="line">sum+=delta,MinCost+=delta*w;</span><br><span class="line"><span class="keyword">if</span>(sum==flow)<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vis[u]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;SPFA();)<span class="keyword">for</span>(;dfs(s,INF););</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=n;++i)po[++po[<span class="number">0</span>]]=i*i;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">EdgeSize=<span class="number">0</span>;</span><br><span class="line">EdgeAdd(s,ss,n,<span class="number">0</span>),EdgeAdd(ss,s,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=yag;++i)EdgeAdd(i,i+yag,<span class="number">1</span>,<span class="number">-1</span>),EdgeAdd(i+yag,i,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=yag;++i)</span><br><span class="line">&#123;</span><br><span class="line">EdgeAdd(ss,i,INF,<span class="number">0</span>),EdgeAdd(i,ss,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">EdgeAdd(i+yag,t,INF,<span class="number">0</span>),EdgeAdd(t,i+yag,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=yag;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(po[<span class="number">0</span>]);j;--j)</span><br><span class="line"><span class="keyword">if</span>(i*<span class="number">2</span>&lt;po[j])EdgeAdd(i+yag,po[j]-i,INF,<span class="number">0</span>),EdgeAdd(po[j]-i,i+yag,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(lxl u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// if(u==ss)return;</span></span><br><span class="line">u-=yag;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld "</span>,u);flag[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line"><span class="keyword">if</span>(e[i].flow==<span class="number">1</span>&amp;&amp;e[i].v!=ss)&#123;print(e[i].v);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("data.txt","r",stdin);</span></span><br><span class="line"><span class="comment">// freopen("out","w",stdout);</span></span><br><span class="line">n=read();yag=n*n;</span><br><span class="line"><span class="comment">// debug(yag);</span></span><br><span class="line">s=yag+yag+<span class="number">1</span>,ss=yag+yag+<span class="number">2</span>,t=yag+yag+<span class="number">3</span>;</span><br><span class="line">init();</span><br><span class="line">dinic();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,-MinCost);</span><br><span class="line"><span class="comment">// for(R int i(head[690]);~i;i=e[i].next)if(e[i].flow==1)debug(e[i].v-yag);</span></span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[t]);~i;i=e[i].next)</span><br><span class="line"><span class="keyword">if</span>(e[i].flow==<span class="number">1</span>&amp;&amp;e[i].v-yag&lt;=-MinCost)print(e[i].v),<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=-MinCost;++i)<span class="keyword">if</span>(!flag[i])<span class="built_in">printf</span>(<span class="string">"%d "</span>,i);<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:负权费用流思路&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="图论-网络流" scheme="https://www.lemir3.red/categories/图论/图论-网络流/"/>
    
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="网络流" scheme="https://www.lemir3.red/tags/网络流/"/>
    
  </entry>
  
  <entry>
    <title>[国家集训队]Crash的数字表格/JZPTAB解题报告</title>
    <link href="https://www.lemir3.red/2020/07/29/guo-jia-ji-xun-dui-crash-de-shu-zi-biao-ge-jzptab-jie-ti-bao-gao/"/>
    <id>https://www.lemir3.red/2020/07/29/guo-jia-ji-xun-dui-crash-de-shu-zi-biao-ge-jzptab-jie-ti-bao-gao/</id>
    <published>2020-07-29T13:29:54.000Z</published>
    <updated>2020-08-26T00:04:20.199Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:莫反后数论分块</p><a id="more"></a><h1 id="国家集训队-Crash的数字表格-JZPTAB"><a href="#国家集训队-Crash的数字表格-JZPTAB" class="headerlink" title="[国家集训队]Crash的数字表格 / JZPTAB"></a>[国家集训队]Crash的数字表格 / JZPTAB</h1><p><a href="https://www.luogu.com.cn/problem/P1829" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>设$n\leq m$.</p><script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=1}^{m}lcm(i,j)\\=\sum_{i=1}^{n}\sum_{j=1}^{m}\frac{i\cdot j}{\gcd(i,j)}\\=\sum_{i=1}^{n}\sum_{i=1}^{m}\sum_{d|i,d|j,\gcd(\frac{i}{d},\frac{j}{d})=1}\frac{i\cdot j}{d}\\=\sum_{d=1}^{n}d\cdot \sum_{i=1}^{\lfloor \frac{n}{d} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{d} \rfloor}\varepsilon(\gcd(i,j))\cdot i\cdot j</script><p>设$sum(n,m)=\sum_{i=1}^{n}\sum_{j=1}^{m} \varepsilon(~gcd(i,j)~)\cdot i\cdot j$,根据$\mu*1=\varepsilon$进行反演:</p><script type="math/tex; mode=display">sum(n,m)=\sum_{i=1}^{n}\sum_{j=1}^{m} \varepsilon(\gcd(i,j))\cdot i\cdot j\\=\sum_{i=1}^{n}\sum_{j=1}^{m}\sum_{d|\gcd(i,j)}^{n}\mu(d)\cdot i \cdot j\\=\sum_{d=1}^{n}\sum_{d|i}^{n}\sum_{d|j}^{m}\mu(d)\cdot i \cdot j</script><p>设$i=i’ \cdot d$,$j=j’ \cdot d$:</p><script type="math/tex; mode=display">sum(n,m)=\sum_{d=1}^{n}\mu(d)\cdot d^2\sum_{i=1}^{\lfloor \frac{n}{d} \rfloor}\sum_{j=1}^{\lfloor \frac{m}{d} \rfloor}i\cdot j</script><p>发现可以用数论分块求,现在将$sum(n,m)$回代:</p><script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=1}^{m}lcm(i,j)\\=\sum_{d=1}^{n}d\cdot sum(\lfloor \frac{n}{d} \rfloor,\lfloor \frac{m}{d} \rfloor)</script><p>这又可以通过数论分块来求.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">10000010</span>,mod=<span class="number">20101009</span>;</span><br><span class="line">lxl n,m,PrimeCnt,ans;</span><br><span class="line">lxl mu[big],pri[big],PreMu[big],vis[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mu[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;big;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])pri[++PrimeCnt]=i,vis[i]=<span class="literal">true</span>,mu[i]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=PrimeCnt;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(pri[j]*i&gt;big)<span class="keyword">break</span>;</span><br><span class="line">vis[pri[j]*i]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(!(i%pri[j]))&#123;mu[i*pri[j]]=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">mu[i*pri[j]]=-mu[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">sum</span><span class="params">(lxl a,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((a*(a+<span class="number">1</span>))/<span class="number">2</span>%mod*(b*(b+<span class="number">1</span>))/<span class="number">2</span>%mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">func</span><span class="params">(lxl x ,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">res</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>),j;i&lt;=<span class="built_in">std</span>::min(x,y);i=j+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">j=<span class="built_in">std</span>::min(x/(x/i),y/(y/i));</span><br><span class="line">res=(res+(PreMu[j]-PreMu[i<span class="number">-1</span>]+mod)%mod*sum(x/i,y/i)%mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">prework();</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> d(<span class="number">1</span>);d&lt;=n;++d)PreMu[d]=(PreMu[d<span class="number">-1</span>]+(mu[d]+mod)*(d*d)%mod)%mod;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>),j;i&lt;=<span class="built_in">std</span>::min(n,m);i=j+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">j=<span class="built_in">std</span>::min(n/(n/i),m/(m/i));</span><br><span class="line">ans=(ans+(j-i+<span class="number">1</span>)*(i+j)/<span class="number">2</span>%mod*func(n/i,m/i)%mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:莫反后数论分块&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-数论" scheme="https://www.lemir3.red/categories/数学/数学-数论/"/>
    
    <category term="数学-数论-莫比乌斯反演" scheme="https://www.lemir3.red/categories/数学/数学-数论/数学-数论-莫比乌斯反演/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="数论" scheme="https://www.lemir3.red/tags/数论/"/>
    
    <category term="莫比乌斯反演" scheme="https://www.lemir3.red/tags/莫比乌斯反演/"/>
    
  </entry>
  
  <entry>
    <title>bzoj3028食物解题报告</title>
    <link href="https://www.lemir3.red/2020/07/29/bzoj3028-shi-wu-jie-ti-bao-gao/"/>
    <id>https://www.lemir3.red/2020/07/29/bzoj3028-shi-wu-jie-ti-bao-gao/</id>
    <published>2020-07-29T12:30:30.000Z</published>
    <updated>2020-08-11T07:03:04.491Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:生成函数+泰勒展开+隔板法</p><a id="more"></a><h1 id="BZOJ3028食物"><a href="#BZOJ3028食物" class="headerlink" title="BZOJ3028食物"></a>BZOJ3028食物</h1><p><a href="https://darkbzoj.tk/problem/3028" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先可以对题目中的限制做生成函数,设$ai$为某个限制携带$i$个的方案数.</p><p>于是有:</p><script type="math/tex; mode=display">憨包:\{a_n\}=\{1,0,1,0,1,0,\cdots\}\\F(x)=\sum_{n}x^{2n}\\=\frac{1}{1-x^2}\\可乐:\{a_n\}=\{1,1\}\\F(x)=1+x\\鸡腿:\{a_n\}=\{1,1,1\}\\F(x)=1+x+x^2\\蜜桃多:\{a_n\}=\{0,1,0,1,0,1,\cdots\}\\F(x)=\sum_{n}x^{n+1}\\=\frac{x}{1-x^2}\\鸡块:\{a_n\}=\{1,0,0,1,0,0,0,1,\cdots\}\\F(x)=\sum_{n}x^{4n}\\=\frac{1}{1-x^4}\\小熊:\{a_n\}=\{1,1,1,1,0,0,0,\cdots\}\\F(x)=1+x^1+x^2+x^3\\bzoj炒肉:\{a_n\}=\{1,1\}\\F(x)=1+x\\面包:\{a_n\}=\{1,0,0,1,0,0,1,\cdots\}\\F(x)=\sum_{n}x^{3n}\\=\frac{1}{1-x^3}</script><p>把这些生成函数乘起来,得到$F(x)=\frac{x}{(1-x)^4}$.</p><p>根据泰勒展开,有:$\sum^\infty_{i=0} x^i=\frac{1}{1-x}$,所以:</p><script type="math/tex; mode=display">F(x)=x(\sum_{i=0}^\infty x^i)^4</script><p>就得到了$F(x)$的展开形式,现在要求出的是$n$次项的系数.</p><p>考虑这样一个关系,对于$n$次项的系数$a$,它由4个多项式进行卷积得到,所以$n$次项的系数与$n$的组合方式有关(想一下卷积的过程),把$n$分为4个非负数相加,因为可能出现0所以左右等式同时加4,得到:</p><script type="math/tex; mode=display">n+4=\underbrace{1+1+1+\cdots+1}_{n+4}</script><p>使用隔板法,在$n+4$个数形成的$n+3$个位置中插入3个板形成4个数,那么显然有$\binom{n+3}{3}$种方案,又因为一开始的系数都为1,所以$a=\binom{n+3}{3}$.</p><p>再考虑上前面的$x$,$n$次项的系数为$\binom{n+2}{3}$种.</p><h2 id="代码-2-2-9-狂-喜"><a href="#代码-2-2-9-狂-喜" class="headerlink" title="代码(2 2 9 狂 喜)"></a>代码(2 2 9 狂 喜)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">11451</span>,mod=<span class="number">10007</span>;</span><br><span class="line">lxl n;</span><br><span class="line"><span class="keyword">char</span> s[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPow</span><span class="params">(lxl a,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%mod)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a%mod);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="comment">// std::cout&lt;&lt;s&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>),len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);i&lt;=len;++i)n=(n*<span class="number">10</span>+s[i]-<span class="string">'0'</span>)%mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,((n*n*n)%mod+(<span class="number">3</span>*n*n)%mod+<span class="number">2</span>*n%mod)%mod*FastPow(<span class="number">6</span>,mod<span class="number">-2</span>)%mod);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:生成函数+泰勒展开+隔板法&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-组合" scheme="https://www.lemir3.red/categories/数学/数学-组合/"/>
    
    <category term="数学-生成函数" scheme="https://www.lemir3.red/categories/数学/数学-组合/数学-生成函数/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="组合" scheme="https://www.lemir3.red/tags/组合/"/>
    
    <category term="生成函数" scheme="https://www.lemir3.red/tags/生成函数/"/>
    
  </entry>
  
  <entry>
    <title>07222020总结</title>
    <link href="https://www.lemir3.red/2020/07/22/07222020-zong-jie/"/>
    <id>https://www.lemir3.red/2020/07/22/07222020-zong-jie/</id>
    <published>2020-07-22T12:00:40.000Z</published>
    <updated>2020-08-13T00:35:02.968Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:这两天考试的小结</p><a id="more"></a><h1 id="07212020"><a href="#07212020" class="headerlink" title="07212020"></a>07212020</h1><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>一棵有权单向树,有一些节点可以直接跳到深度小于等于它的点上,费用为深度的差值*k,求每个点到根的最短距离.</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>考的时候读错题,1个小时想了2个解法都因为我以为是无向边被自己hack…</p><p>然后打了一个$O(n^2)$的连边拿了40.</p><p>单向的就很水了,bfs遍历,根据深度和距离记录一个最优值所在的点,下面的可以上跳的点就跳到最优的点上,然后自己也就成为了下一个最优点,每层之间跳不花费代价所以要转移一下.</p><p>遍历的时候用当前距离加上边权向下更新下面的距离就可以了.</p><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给一些数轴上的点,每个点有速度,可以拿走k个点,求这些点相碰的最短时间.</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>二分出相碰的时间暴力算一下有多少个要相遇和k比对一下就90pts了.</p><p>因为要相遇的就拿去一个是最优的.</p><p>然后考虑优化一下暴力的过程,先按原来每个点的位置排序得到,然后算出经过一段时间后到达的位置,发现相遇就是出现一对逆序对.</p><p>因为值域是实数所以离散一下放进树状数组就能做了.</p><h1 id="07222020"><a href="#07222020" class="headerlink" title="07222020"></a>07222020</h1><h2 id="A-1"><a href="#A-1" class="headerlink" title="A"></a>A</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给一个长度为2n的实数序列,q组询问给出长度为偶数的区间,在区间中两两选择一个取上整一个取下整,求修改后的区间和与原先的区间和最小的差值.</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>考场上发现了一个性质,两个都是小数的化交换取上下整没有影响,于是打了个$O(nq)$的拿了50分,有个优化最后20分钟没调出来所以t了.</p><p>然后是正解,先考虑全部取上整算出一个差值,然后取下整来向下减,取上整改成取下整只用减个1.</p><p>然后考虑取多少个下整,最多就只能取区间长度的一半个,减去后如果小于0的说明没法全取,否则全部取最优.</p><p>如果没法全取,减去区间中整数的数量得到把去上整的上界摆满后有几个必须取下整,减出来小于0的话说明上整的排满的话取下整的任意拿都是最优的,因为再多放只会把数字减得更低导致差值变大,否则考虑与整数两边交换一下,取上下整的小数平分,可以发现最后答案是小数位或1-小数位.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:这两天考试的小结&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.lemir3.red/categories/总结/"/>
    
    
    <category term="总结" scheme="https://www.lemir3.red/tags/总结/"/>
    
  </entry>
  
  <entry>
    <title>多项式笔记-快速傅里叶变换与快速数论变换</title>
    <link href="https://www.lemir3.red/2020/07/22/duo-xiang-shi-bi-ji-kuai-su-fu-li-xie-bian-huan-yu-kuai-su-shu-lun-bian-huan/"/>
    <id>https://www.lemir3.red/2020/07/22/duo-xiang-shi-bi-ji-kuai-su-fu-li-xie-bian-huan-yu-kuai-su-shu-lun-bian-huan/</id>
    <published>2020-07-22T07:50:57.000Z</published>
    <updated>2020-07-22T07:56:32.797Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:fft和ntt</p><a id="more"></a><p>因为高考原因竞赛机房不能使用所以在别的机房写的,没装git于是发到了知乎上.</p><p><a href="https://zhuanlan.zhihu.com/p/157334427" target="_blank" rel="noopener">link</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:fft和ntt&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-数论" scheme="https://www.lemir3.red/categories/数学/数学-数论/"/>
    
    <category term="数学-多项式" scheme="https://www.lemir3.red/categories/数学/数学-数论/数学-多项式/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="数论" scheme="https://www.lemir3.red/tags/数论/"/>
    
    <category term="多项式" scheme="https://www.lemir3.red/tags/多项式/"/>
    
  </entry>
  
</feed>
