<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lemir3&#39;s blog</title>
  
  
  <link href="https://www.lemir3.red/atom.xml" rel="self"/>
  
  <link href="https://www.lemir3.red/"/>
  <updated>2020-09-26T11:45:08.279Z</updated>
  <id>https://www.lemir3.red/</id>
  
  <author>
    <name>lemir3</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「解题报告」CF123E Maze</title>
    <link href="https://www.lemir3.red/2020/09/25/jie-ti-bao-gao-cf123e-maze/"/>
    <id>https://www.lemir3.red/2020/09/25/jie-ti-bao-gao-cf123e-maze/</id>
    <published>2020-09-25T09:44:06.000Z</published>
    <updated>2020-09-26T11:45:08.279Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:数理基础题</p><a id="more"></a><h1 id="CF123E-Maze"><a href="#CF123E-Maze" class="headerlink" title="CF123E Maze"></a>CF123E Maze</h1><p><a href="http://codeforces.com/problemset/problem/123/E" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>通过观察2013年国家集训队胡渊鸣的论文《浅析信息学竞赛中概率论的基础与应用》,我们不难发现这是一道数理基础题.</p><p>题目大意大概是给定一颗树,树的节点有一定的概率成为路径的起点$S$或终点$T$,从起点$S$出发,求dfs算法到达$T$的期望步数,每次dfs从当前点出发向未到达过的点随机遍历.</p><p>确立样本空间$\Omega$为从$S$出发到$T$的路径的集合,随机变量$X$作用于$\Omega$上,表示每条路径的长度,概率测度$P$为$\Omega$的某个子集到$\R$的函数$P(A)=\sum_{\omega \in A}P(\omega)$,即走出路径$\omega$的概率.</p><p>我们需要求$E[X]$,在路径长度很大时显然无法直接做,但是通过<code>期望的线性性质</code>,我们可以通过经过路径中的边$e$的期望$E[e]$进行转化,即$E[X]=\sum_{e \in \omega}E[e]$.</p><p>现在需要考虑在走出从$S$到$T$的路径中每条边经过的期望,我们将从$S$到$T$的树上简单路径称为必经路径,在这条路径上的边仅可能且必须被经过一次,那么这条路径上的边被经过的期望为$1$.对于一条在必经路径之外的边$(u,v)$,设$a$是必经路径上离这条边最近的点,$b$为将必经路径上的点从$S$到$T$排成序列后$a$的后继,$w$为经由边$(u,v)$到必经路径的与$a$相连的点,那么从$a$出发,到$w$或者$b$仅取决与随机生成的序列中$w$和$b$的位置关系,而在随机序列中一个元素排在另一个元素前面的概率无疑是$\frac{1}{2}$,那么这条路径之外的边被经过的期望为$0 \times \frac{1}{2}+2\times \frac{1}{2}=1$.</p><p>论文中就讲到了这里,但还有实际情况需要考虑,一个情况是$T$作为$S$的祖先,那么路径被限制在了$T$的子树内,设$v$为必经路径上与$T$相连的点,结合上述,路径长度的期望为$size_v$.</p><p>若$S$与$T$没有从属关系,那么路径上一定不可能存在$T$的子树内的边,因为到达$T$之后算法立即终止,那么路径长度的期望为$n-1-(size_T-1)=n-size_T$.</p><p>看洛谷上翻译题面的数据范围为$n \leq 105$,偷税地打了一个树剖,暴力枚举点对算出作为终点和起点地概率后通过$lca$判断从属计算期望.</p><p>uuz:哎呀,这就ac了真狡猾.jpg</p><p>然后,Runtime Error on #17,打开原题面,$n \leq 10^5$… </p><p><del>敬祝译者及他的母亲万寿无疆.</del></p><p>那么就得考虑使用数据结构维护上述过程了,对于一个确定的终点$T$,若起点出现在它的子树内,设$v$为必经路径上与$T$相连的点,期望路径长度为$size_v$,若在它的子树外,期望路径长度为$n-size_T$.</p><p>思路就显然了,维护树的dfs序之后用线段树在整个子树上加上路径长度的期望乘以$T$作为终点的概率,在处理所有可能成为终点的点之后,对每个可能成为起点的点单点询问,将询问得的值乘以这个点成为起点的概率得到期望,并累加进答案.</p><p>因为是用暴力改的所以dfs序是用树剖得到的.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl n,EdgeSize,IdCnt,root,NodeCnt,sumx,sumy;</span><br><span class="line">lxl head[big],top[big],size[big],son[big],id[big],fa[big],dep[big],x[big],y[big];</span><br><span class="line">lxl c[<span class="number">2</span>][big&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">double</span> tag[big&lt;&lt;<span class="number">2</span>],sum[big&lt;&lt;<span class="number">2</span>],ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next;</span><br><span class="line">&#125;e[big&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v) EdgeAdd(u,v),EdgeAdd(v,u)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize]=(_Edge)&#123;v,head[u]&#125;;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(lxl u,lxl father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fa[u]=father,dep[u]=dep[father]+<span class="number">1</span>;</span><br><span class="line">size[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==father)<span class="keyword">continue</span>;</span><br><span class="line">dfs1(v,u);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(size[son[u]]&lt;size[v])son[u]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(lxl u,lxl top_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">top[u]=top_,id[u]=++IdCnt;</span><br><span class="line"><span class="keyword">if</span>(son[u])dfs2(son[u],top_);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa[u]||v==son[u])<span class="keyword">continue</span>;</span><br><span class="line">dfs2(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(lxl t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson c[0][t]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson c[1][t]</span></span><br><span class="line"><span class="keyword">if</span>(tag[t]==<span class="number">0</span>)<span class="keyword">return</span>;</span><br><span class="line">sum[lson]+=tag[t],sum[rson]+=tag[t];</span><br><span class="line">tag[lson]+=tag[t],tag[rson]+=tag[t];</span><br><span class="line">tag[t]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(lxl &amp;t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t)t=++NodeCnt;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">BuildTree(c[<span class="number">0</span>][t],l,mid),BuildTree(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl y,<span class="keyword">double</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;sum[t]+=val,tag[t]+=val;<span class="keyword">return</span>;&#125;</span><br><span class="line">PushDown(t,l,r);</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)modify(c[<span class="number">0</span>][t],l,mid,x,y,val);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid)modify(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">query</span><span class="params">(lxl t,lxl l,lxl r,lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> sum[t];</span><br><span class="line">PushDown(t,l,r);</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)<span class="keyword">return</span> query(c[<span class="number">0</span>][t],l,mid,x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;n;++i)&#123;lxl u=read(),v=read();add(u,v);&#125;</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">0</span>),dfs2(<span class="number">1</span>,<span class="number">1</span>),BuildTree(root,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)x[i]=read(),y[i]=read(),sumx+=x[i],sumy+=y[i];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!y[i])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">double</span> p=(<span class="keyword">double</span>)y[i]/(<span class="keyword">double</span>)sumy;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(head[i]);~j;j=e[j].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[j].v;<span class="keyword">if</span>(v==fa[i])<span class="keyword">continue</span>;</span><br><span class="line">modify(root,<span class="number">1</span>,n,id[v],id[v]+size[v]<span class="number">-1</span>,p*size[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(id[i]<span class="number">-1</span>)modify(root,<span class="number">1</span>,n,<span class="number">1</span>,id[i]<span class="number">-1</span>,p*(n-size[i]));</span><br><span class="line"><span class="keyword">if</span>(id[i]+size[i]&lt;=n)modify(root,<span class="number">1</span>,n,id[i]+size[i],n,p*(n-size[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!x[i])<span class="keyword">continue</span>;</span><br><span class="line">ans+=query(root,<span class="number">1</span>,n,id[i])*((<span class="keyword">double</span>)x[i]/(<span class="keyword">double</span>)sumx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.9lf\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:数理基础题&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-概率期望" scheme="https://www.lemir3.red/categories/数学/数学-概率期望/"/>
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/数学/数学-概率期望/数据结构/"/>
    
    <category term="数据结构-线段树" scheme="https://www.lemir3.red/categories/数学/数学-概率期望/数据结构/数据结构-线段树/"/>
    
    <category term="树链剖分" scheme="https://www.lemir3.red/categories/数学/数学-概率期望/数据结构/数据结构-线段树/树链剖分/"/>
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="线段树" scheme="https://www.lemir3.red/tags/线段树/"/>
    
    <category term="树链剖分" scheme="https://www.lemir3.red/tags/树链剖分/"/>
    
    <category term="概率期望" scheme="https://www.lemir3.red/tags/概率期望/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu4915帕秋莉的魔导书</title>
    <link href="https://www.lemir3.red/2020/09/24/jie-ti-bao-gao-luogu4915-pa-qiu-li-de-mo-dao-shu/"/>
    <id>https://www.lemir3.red/2020/09/24/jie-ti-bao-gao-luogu4915-pa-qiu-li-de-mo-dao-shu/</id>
    <published>2020-09-24T13:41:06.000Z</published>
    <updated>2020-09-24T23:27:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:线段树维护前缀和</p><a id="more"></a><h1 id="luogu4915帕秋莉的魔导书"><a href="#luogu4915帕秋莉的魔导书" class="headerlink" title="luogu4915帕秋莉的魔导书"></a>luogu4915帕秋莉的魔导书</h1><p><a href="https://www.luogu.com.cn/problem/P4915" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>母亲的,打这题代码像见了鬼一样,各种莫名奇妙地掉精度,炸范围,开够的数组莫名被清空一怒之下开大10倍空间…</p><p>话说回来这个出题人出了好多姆q题啊,<del>以后我题面也全写姆q了.</del></p><p>转化应该挺容易的,我们需要维护值域前缀和的部分和.</p><p>求得初始的前缀和后建出线段树维护部分和,考虑怎么带修,一个位置的值发生改变,那么这个位置后面的前缀和均会发生改变一个相同的值,区间修改即可.</p><p>因为值域太大考虑离散化,把作为在值域出现的值全部存下来离散化即可.</p><p>然而这样显然不可行,比如可爱的出题人给了这样一组hack:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">in:</span><br><span class="line">2 2</span><br><span class="line">1 3</span><br><span class="line">5 2</span><br><span class="line">1 3 3</span><br><span class="line">1 3 5</span><br><span class="line">out:</span><br><span class="line">3.0000</span><br><span class="line">3.6667</span><br></pre></td></tr></table></figure><p>因为题目是求期望,所以需要求得区间内的所有情况,但我们这样离散化仅保留了大小关系的信息,所以需要维护离散化之后的值域上两个数之间省略的原值域的大小,在维护前缀和的过程中,省略的值可以整体考虑,因为没有在其范围内的询问或插入,整体的值仅和省略区间的左端点的值有关.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"assert.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> lbl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">300010</span>,small=<span class="number">1000010</span>;</span><br><span class="line">lxl n,m,BCnt,QCnt,cut,NowQ,NowB,knoc,root,NodeCnt;</span><br><span class="line">lxl val[big],kno[big],whi[small],siz[big];</span><br><span class="line">lxl c[<span class="number">2</span>][big&lt;&lt;<span class="number">2</span>],sum[big&lt;&lt;<span class="number">2</span>],sum2[big&lt;&lt;<span class="number">2</span>],tag[big&lt;&lt;<span class="number">2</span>],size[big&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">double</span> di;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Pachy</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl a,w;</span><br><span class="line">&#125;b[small];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl l,r;</span><br><span class="line"><span class="keyword">double</span> len;</span><br><span class="line">&#125;q[small];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(lxl t)</span></span>&#123;sum[t]=sum[c[<span class="number">0</span>][t]]+sum[c[<span class="number">1</span>][t]];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(lxl t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!tag[t])<span class="keyword">return</span>;</span><br><span class="line">lxl lson=c[<span class="number">0</span>][t],rson=c[<span class="number">1</span>][t];</span><br><span class="line">sum[lson]+=tag[t]*size[lson],sum[rson]+=tag[t]*size[rson];</span><br><span class="line">sum2[lson]+=tag[t]*(size[lson]<span class="number">-1</span>),sum2[rson]+=tag[t]*(size[rson]<span class="number">-1</span>);</span><br><span class="line">tag[lson]+=tag[t],tag[rson]+=tag[t];</span><br><span class="line">tag[t]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(lxl &amp;t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t)t=++NodeCnt;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;size[t]=siz[l],sum[t]=val[l]*size[t],sum2[t]=val[l]*(size[t]<span class="number">-1</span>);<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">BuildTree(c[<span class="number">0</span>][t],l,mid),BuildTree(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r);</span><br><span class="line">PushUp(t);</span><br><span class="line">size[t]=size[c[<span class="number">0</span>][t]]+size[c[<span class="number">1</span>][t]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl y,lxl kd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;sum[t]+=kd*size[t],sum2[t]+=kd*(size[t]<span class="number">-1</span>),tag[t]+=kd;<span class="keyword">return</span>;&#125;</span><br><span class="line">PushDown(t);</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)insert(c[<span class="number">0</span>][t],l,mid,x,y,kd);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid)insert(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y,kd);</span><br><span class="line">PushUp(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lbl <span class="title">query</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)<span class="keyword">return</span> (lbl)sum[t]/di;</span><br><span class="line">PushDown(t);</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ret</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)ret+=query(c[<span class="number">0</span>][t],l,mid,x,y);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid)ret+=query(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lbl <span class="title">query2</span><span class="params">(lxl t,lxl l,lxl r,lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> (lbl)sum2[t]/di;</span><br><span class="line">PushDown(t);</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)<span class="keyword">return</span> query2(c[<span class="number">0</span>][t],l,mid,x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query2(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("data.txt","r",stdin),freopen("test.out","w",stdout);</span></span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)b[++BCnt].a=read(),b[BCnt].w=read(),kno[++knoc]=b[i].a;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">whi[i]=read();</span><br><span class="line"><span class="keyword">if</span>(whi[i]==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">q[++QCnt].l=read(),q[QCnt].r=read(),q[QCnt].len=q[QCnt].r-q[QCnt].l+<span class="number">1</span>;</span><br><span class="line">kno[++knoc]=q[QCnt].l,kno[++knoc]=q[QCnt].r;</span><br><span class="line"><span class="comment">// debugf(q[QCnt].len),debug(q[QCnt].l),debug(q[QCnt].r),endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> b[++BCnt].a=read(),b[BCnt].w=read(),kno[++knoc]=b[BCnt].a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=QCnt;++i)debugf(q[i].len),debug(q[i].l),debug(q[i].r),endl;</span></span><br><span class="line"><span class="built_in">std</span>::sort(kno+<span class="number">1</span>,kno+<span class="number">1</span>+knoc),cut=<span class="built_in">std</span>::unique(kno+<span class="number">1</span>,kno+<span class="number">1</span>+knoc)-kno<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=BCnt;++i)b[i].a=<span class="built_in">std</span>::lower_bound(kno+<span class="number">1</span>,kno+<span class="number">1</span>+cut,b[i].a)-kno;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=QCnt;++i)</span><br><span class="line">q[i].l=<span class="built_in">std</span>::lower_bound(kno+<span class="number">1</span>,kno+<span class="number">1</span>+cut,q[i].l)-kno,</span><br><span class="line">q[i].r=<span class="built_in">std</span>::lower_bound(kno+<span class="number">1</span>,kno+<span class="number">1</span>+cut,q[i].r)-kno;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)val[b[i].a]+=b[i].w;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=cut;++i)val[i]+=val[i<span class="number">-1</span>],siz[i]=kno[i+<span class="number">1</span>]-kno[i];</span><br><span class="line">siz[cut]=<span class="number">1</span>,NowB=n,BuildTree(root,<span class="number">1</span>,cut);</span><br><span class="line"><span class="comment">// debugf(q[1].len);</span></span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line"><span class="keyword">if</span>(whi[i]==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">++NowQ;</span><br><span class="line"><span class="comment">// assert(q[NowQ].len&gt;0.01);</span></span><br><span class="line">di=q[NowQ].len;</span><br><span class="line"><span class="comment">// if((lxl)di==0)debug(NowQ),debugf(q[NowQ].len),debugf(di),endl;</span></span><br><span class="line"><span class="keyword">double</span> all=query(root,<span class="number">1</span>,cut,q[NowQ].l,q[NowQ].r)-query2(root,<span class="number">1</span>,cut,q[NowQ].r);</span><br><span class="line"><span class="comment">// std::cout&lt;&lt;std::fixed&lt;&lt;std::setprecision(4)&lt;&lt;all;endl;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.4lf\n"</span>,all);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> ++NowB,insert(root,<span class="number">1</span>,cut,b[NowB].a,cut,b[NowB].w);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2 2</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">5 2</span></span><br><span class="line"><span class="comment">1 3 3</span></span><br><span class="line"><span class="comment">1 3 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:线段树维护前缀和&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/数据结构/"/>
    
    <category term="数据结构-线段树" scheme="https://www.lemir3.red/categories/数据结构/数据结构-线段树/"/>
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="线段树" scheme="https://www.lemir3.red/tags/线段树/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」「POI2011」ROT-Tree Rotations</title>
    <link href="https://www.lemir3.red/2020/09/24/jie-ti-bao-gao-poi2011-rot-tree-rotations/"/>
    <id>https://www.lemir3.red/2020/09/24/jie-ti-bao-gao-poi2011-rot-tree-rotations/</id>
    <published>2020-09-24T01:08:32.000Z</published>
    <updated>2020-09-24T01:15:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:值域线段树合并</p><a id="more"></a><h1 id="「POI2011」ROT-Tree-Rotations"><a href="#「POI2011」ROT-Tree-Rotations" class="headerlink" title="「POI2011」ROT-Tree Rotations"></a>「POI2011」ROT-Tree Rotations</h1><p><a href="https://www.luogu.com.cn/problem/P3521" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>你呀,总能给我整出点新花样.jpg</p><p>首先可以确定的是子树内的任意交换对子树外的逆序对统计并不会造成影响.</p><p>所以我们对每个叶子节点建立值域线段树,向上合并的时候计算子树按是否交换计算逆序对就好了.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">1000010</span>;</span><br><span class="line">lxl n,NodeCnt,TreeCnt,root,swp[<span class="number">2</span>];</span><br><span class="line">lxl lson[big],rson[big],c[<span class="number">2</span>][big&lt;&lt;<span class="number">4</span>],sum[big&lt;&lt;<span class="number">4</span>],val[big],segr[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl &amp;t,lxl l,lxl r,lxl x,lxl k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t)t=++NodeCnt;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> <span class="keyword">void</span>(sum[t]+=k);</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)modify(c[<span class="number">0</span>][t],l,mid,x,k);</span><br><span class="line"><span class="keyword">else</span> modify(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,k);</span><br><span class="line">sum[t]=sum[c[<span class="number">0</span>][t]]+sum[c[<span class="number">1</span>][t]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(lxl &amp;p,lxl &amp;q,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// if(!p||!q)return void(p+q);</span></span><br><span class="line"><span class="keyword">if</span>(!q)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(!p)<span class="keyword">return</span> <span class="keyword">void</span>(p=q);</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> <span class="keyword">void</span>(sum[p]+=sum[q]);</span><br><span class="line">swp[<span class="number">0</span>]+=sum[c[<span class="number">1</span>][p]]*sum[c[<span class="number">0</span>][q]],swp[<span class="number">1</span>]+=sum[c[<span class="number">0</span>][p]]*sum[c[<span class="number">1</span>][q]];</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">merge(c[<span class="number">0</span>][p],c[<span class="number">0</span>][q],l,mid),merge(c[<span class="number">1</span>][p],c[<span class="number">1</span>][q],mid+<span class="number">1</span>,r);</span><br><span class="line">sum[p]=sum[c[<span class="number">0</span>][p]]+sum[c[<span class="number">1</span>][p]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(lxl &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t=++TreeCnt;</span><br><span class="line">lxl x=read();</span><br><span class="line"><span class="keyword">if</span>(x)val[t]=x,modify(segr[t],<span class="number">1</span>,n,val[t],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> in(lson[t]),in(rson[t]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">work</span><span class="params">(lxl u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(val[u])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">lxl tmp=work(lson[u])+work(rson[u]);</span><br><span class="line">swp[<span class="number">0</span>]=swp[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">merge(segr[lson[u]],segr[rson[u]],<span class="number">1</span>,n),segr[u]=segr[lson[u]];</span><br><span class="line"><span class="comment">// if(lson[u]==3)debug(sum[segr[lson[u]]]),debug(sum[segr[rson[u]]]);</span></span><br><span class="line">tmp+=<span class="built_in">std</span>::min(swp[<span class="number">0</span>],swp[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),in(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,work(root));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:值域线段树合并&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/数据结构/"/>
    
    <category term="数据结构-线段树" scheme="https://www.lemir3.red/categories/数据结构/数据结构-线段树/"/>
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="线段树" scheme="https://www.lemir3.red/tags/线段树/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」CF1401D Maximum Distributed Tree</title>
    <link href="https://www.lemir3.red/2020/09/23/jie-ti-bao-gao-cf1401d-maximum-distributed-tree/"/>
    <id>https://www.lemir3.red/2020/09/23/jie-ti-bao-gao-cf1401d-maximum-distributed-tree/</id>
    <published>2020-09-23T13:02:09.000Z</published>
    <updated>2020-09-23T13:17:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:tag是不是得加个物理(笑)</p><a id="more"></a><h1 id="CF1401D-Maximum-Distributed-Tree"><a href="#CF1401D-Maximum-Distributed-Tree" class="headerlink" title="CF1401D Maximum Distributed Tree"></a>CF1401D Maximum Distributed Tree</h1><p><a href="http://codeforces.com/contest/1401/problem/D" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>今天中午回寝室拿医生叫喝的帕秋莉水,被一个物理爷问了这道题…</p><p><del>物理人都是博物家吗.</del></p><p>首先考虑题目中给出的关于$k$的限制,让边权之积等于$k$且$1$的个数尽量小,那么$k$分解质因子之后的因子个数小于边数的话那么边权就直接为$k$的各个质因子和用$1$补全的,大于边数的话根据贪心的思想将单增排序后的因子前面的乘起来即可.</p><p>然后将路径的边权和转化成每个边的贡献,显然可以发现,一个边被计算的次数是它通向的点的子树的节点个数乘上子树外的节点个数,把每条边的计算次数求出来排序后贪心分配边权即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>,mod=<span class="number">1000000007</span>;</span><br><span class="line">lxl T,n,EdgeSize,ans;</span><br><span class="line">lxl k[big],head[big],size[big],val[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next;</span><br><span class="line">&#125;e[big&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">EdgeSize=ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(k,<span class="number">0</span>,<span class="keyword">sizeof</span> k),<span class="built_in">memset</span>(val,<span class="number">0</span>,<span class="keyword">sizeof</span> val);</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head),<span class="built_in">memset</span>(size,<span class="number">0</span>,<span class="keyword">sizeof</span> size);</span><br><span class="line"><span class="built_in">memset</span>(e,<span class="number">0</span>,<span class="keyword">sizeof</span> e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(u,v) EdgeAdd(u,v),EdgeAdd(v,u)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize]=(_Edge)&#123;v,head[u]&#125;;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(lxl u,lxl fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">size[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line">dfs(v,u);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(lxl u,lxl fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line">val[++val[<span class="number">0</span>]]=((size[<span class="number">1</span>]-size[v])*size[v]);</span><br><span class="line">dfs2(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(lxl d1,lxl d2)</span></span>&#123;<span class="keyword">return</span> d1&gt;d2;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T=read();</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">init();</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;n;++i)&#123;lxl u=read(),v=read();add(u,v);&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>),dfs2(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">k[<span class="number">0</span>]=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=k[<span class="number">0</span>];++i)k[i]=read();</span><br><span class="line"><span class="built_in">std</span>::sort(k+<span class="number">1</span>,k+<span class="number">1</span>+k[<span class="number">0</span>],cmp),<span class="built_in">std</span>::sort(val+<span class="number">1</span>,val+<span class="number">1</span>+val[<span class="number">0</span>],cmp);</span><br><span class="line">lxl l=<span class="number">1</span>,r=k[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=<span class="built_in">std</span>::max(n,k[<span class="number">0</span>]);++i)<span class="keyword">if</span>(!k[i])k[i]=<span class="number">1</span>;</span><br><span class="line">--n;</span><br><span class="line"><span class="keyword">if</span>(k[<span class="number">0</span>]&gt;n<span class="number">-1</span>)&#123;l=k[<span class="number">0</span>]-n+<span class="number">1</span>;<span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=k[<span class="number">0</span>]-n;++i)k[l]=k[l]*k[i]%mod;&#125;</span><br><span class="line"><span class="comment">// debug(l);</span></span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)ans=(ans+val[i]*k[l+i<span class="number">-1</span>]+mod)%mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">16</span></span><br><span class="line"><span class="comment">5 10</span></span><br><span class="line"><span class="comment">16 1</span></span><br><span class="line"><span class="comment">14 1</span></span><br><span class="line"><span class="comment">7 5</span></span><br><span class="line"><span class="comment">13 2</span></span><br><span class="line"><span class="comment">16 11</span></span><br><span class="line"><span class="comment">1 7</span></span><br><span class="line"><span class="comment">1 4</span></span><br><span class="line"><span class="comment">3 14</span></span><br><span class="line"><span class="comment">8 16</span></span><br><span class="line"><span class="comment">1 6</span></span><br><span class="line"><span class="comment">4 9</span></span><br><span class="line"><span class="comment">4 12</span></span><br><span class="line"><span class="comment">5 13</span></span><br><span class="line"><span class="comment">1 15</span></span><br><span class="line"><span class="comment">18</span></span><br><span class="line"><span class="comment">45893 9901 51229 15511 46559 28433 4231 30241 29837 34421 12953 6577 12143 52711 40493 89 34819 28571</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:tag是不是得加个物理(笑)&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-数论" scheme="https://www.lemir3.red/categories/数学/数学-数论/"/>
    
    <category term="图论" scheme="https://www.lemir3.red/categories/数学/数学-数论/图论/"/>
    
    <category term="贪心" scheme="https://www.lemir3.red/categories/数学/数学-数论/图论/贪心/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="数论" scheme="https://www.lemir3.red/tags/数论/"/>
    
    <category term="贪心" scheme="https://www.lemir3.red/tags/贪心/"/>
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu4230连环病原体</title>
    <link href="https://www.lemir3.red/2020/09/23/jie-ti-bao-gao-luogu4230-lian-huan-bing-yuan-ti/"/>
    <id>https://www.lemir3.red/2020/09/23/jie-ti-bao-gao-luogu4230-lian-huan-bing-yuan-ti/</id>
    <published>2020-09-23T09:26:38.000Z</published>
    <updated>2020-09-23T09:38:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:尺取法动态树判环</p><a id="more"></a><h1 id="luogu4230连环病原体"><a href="#luogu4230连环病原体" class="headerlink" title="luogu4230连环病原体"></a>luogu4230连环病原体</h1><p><a href="https://www.luogu.com.cn/problem/P4230" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>尺取法应该是很显然的,一个区间内包含环后,后面的边继续加入也依旧满足条件,所以可以直接对于一个固定的$l$去寻找第一个成环的位置$r$,而$l$的顺次增大会导致减少一条边,满足条件的$r$只会不动或者向后移.</p><p>考虑位置$l$与第一个成环的位置$r$对答案的贡献,举个例子就很直观,设$m=8,l=1,r=2$:</p><blockquote><p>  ans:7 7 6 5 4 3 2 1</p><p>  除开$[1,2]$内均为$m-r+1$,ans:0 0 6 5 4 3 2 1</p><p>  差分一次:0 0 6 -1 -1 -1 -1 -1</p><p>  差分两次:0 0 6 -7 0 0 0 0</p></blockquote><p>容易发现贡献是一个常序列并上一个公差为$1$的等差数列,对等差数列差分两次后就成了单点修改,在处理完之后进行一遍前缀和还原,再加上所有常数列的差分,再进行一次前缀和还原即得答案.</p><p>判环使用lct实现的动态树就好了,每次加入$r$时,如果发现两端的点已经连通就说明加入这条边会成环于是找到了第一个位置$r$,其他的细节看代码吧.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">400010</span>;</span><br><span class="line">lxl n,m,NodeCnt,l,r,con,SegCnt;</span><br><span class="line">lxl c[<span class="number">2</span>][big],fa[big],tag[big],q[big],d[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl u,v;</span><br><span class="line">&#125;e[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl l,r,val;</span><br><span class="line">&#125;s[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!tag[x])<span class="keyword">return</span>;</span><br><span class="line">lxl &amp;l=c[<span class="number">0</span>][x],&amp;r=c[<span class="number">1</span>][x];</span><br><span class="line">tag[l]=tag[l]^<span class="number">1</span>,tag[r]=tag[r]^<span class="number">1</span>,tag[x]=tag[x]^<span class="number">1</span>;</span><br><span class="line"><span class="built_in">std</span>::swap(l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">IsRoot</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">return</span> c[<span class="number">0</span>][fa[x]]!=x&amp;&amp;c[<span class="number">1</span>][fa[x]]!=x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl y=fa[x],z=fa[y],d=c[<span class="number">1</span>][y]==x;</span><br><span class="line"><span class="keyword">if</span>(!IsRoot(y))c[c[<span class="number">1</span>][z]==y][z]=x;</span><br><span class="line">fa[x]=z,fa[y]=x,fa[c[d^<span class="number">1</span>][x]]=y;</span><br><span class="line">c[d][y]=c[d^<span class="number">1</span>][x],c[d^<span class="number">1</span>][x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">q[q[<span class="number">0</span>]=<span class="number">1</span>]=x;<span class="keyword">for</span>(R <span class="keyword">int</span> i(x);!IsRoot(i);i=fa[i])q[++q[<span class="number">0</span>]]=fa[i];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(q[<span class="number">0</span>]);i;--i)PushDown(q[i]);</span><br><span class="line"><span class="keyword">while</span>(!IsRoot(x))</span><br><span class="line">&#123;</span><br><span class="line">lxl y=fa[x],z=fa[y];</span><br><span class="line"><span class="keyword">if</span>(!IsRoot(fa[x]))rotate((c[<span class="number">0</span>][y]==x)^(c[<span class="number">0</span>][z]==y)?x:y);</span><br><span class="line">rotate(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">for</span>(R <span class="keyword">int</span> t(<span class="number">0</span>);x;t=x,x=fa[x])splay(x),c[<span class="number">1</span>][x]=t;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">MakeRoot</span><span class="params">(lxl x)</span></span>&#123;access(x),splay(x),tag[x]^=<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FindRoot</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">access(x),splay(x);</span><br><span class="line"><span class="keyword">while</span>(c[<span class="number">0</span>][x])PushDown(x),x=c[<span class="number">0</span>][x];splay(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MakeRoot(x);</span><br><span class="line"><span class="keyword">if</span>(FindRoot(y)!=x||fa[y]!=x||c[<span class="number">0</span>][y])<span class="keyword">return</span>;</span><br><span class="line">fa[y]=c[<span class="number">1</span>][x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">link</span><span class="params">(lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MakeRoot(x);</span><br><span class="line"><span class="keyword">if</span>(FindRoot(y)==x)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">fa[x]=y;<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)e[i]=(_Edge)&#123;read(),read()&#125;;</span><br><span class="line">l=r=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=m)</span><br><span class="line">&#123;</span><br><span class="line">con=link(e[r].u,e[r].v);</span><br><span class="line"><span class="comment">// if(l==3)debug(r),debug(con);</span></span><br><span class="line"><span class="keyword">while</span>((!con)&amp;&amp;r&lt;m)++r,con=link(e[r].u,e[r].v);</span><br><span class="line"><span class="comment">// ,debug(l),debug(r),debugi(con),endl;</span></span><br><span class="line"><span class="keyword">if</span>(con)s[++SegCnt]=&#123;l,r,m-r+<span class="number">1</span>&#125;,d[r+<span class="number">1</span>]+=m-r,d[r+<span class="number">2</span>]+=-(m-r+<span class="number">1</span>);</span><br><span class="line"><span class="comment">// ,debug(l),debug(r),endl;</span></span><br><span class="line">cut(e[l].u,e[l].v),++l,con=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(r==m&amp;&amp;!con)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)d[i]+=d[i<span class="number">-1</span>];</span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;=m;++i)debug(d[i]);</span></span><br><span class="line"><span class="comment">// debug(SegCnt);</span></span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=SegCnt;++i)d[s[i].l]+=s[i].val,d[s[i].r+<span class="number">1</span>]-=s[i].val;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)d[i]+=d[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)<span class="built_in">printf</span>(<span class="string">"%lld "</span>,d[i]);<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 10</span></span><br><span class="line"><span class="comment">5 6</span></span><br><span class="line"><span class="comment">6 5</span></span><br><span class="line"><span class="comment">1 7</span></span><br><span class="line"><span class="comment">1 8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:尺取法动态树判环&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/图论/数据结构/"/>
    
    <category term="数据结构-动态树" scheme="https://www.lemir3.red/categories/图论/数据结构/数据结构-动态树/"/>
    
    <category term="其他" scheme="https://www.lemir3.red/categories/图论/数据结构/数据结构-动态树/其他/"/>
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="其他" scheme="https://www.lemir3.red/tags/其他/"/>
    
    <category term="动态树" scheme="https://www.lemir3.red/tags/动态树/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」「NOI2020」美食家</title>
    <link href="https://www.lemir3.red/2020/09/22/jie-ti-bao-gao-noi2020-mei-shi-jia/"/>
    <id>https://www.lemir3.red/2020/09/22/jie-ti-bao-gao-noi2020-mei-shi-jia/</id>
    <published>2020-09-22T09:35:27.000Z</published>
    <updated>2020-09-22T09:50:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:转移矩阵拆点解决图论问题</p><a id="more"></a><h1 id="「NOI2020」美食家"><a href="#「NOI2020」美食家" class="headerlink" title="「NOI2020」美食家"></a>「NOI2020」美食家</h1><p><a href="https://www.luogu.com.cn/problem/P6772" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>今年noi的题啊,同步赛上直接打的阶乘狂暴…</p><p>题目要求的是从起点出发经过$T$的时间后的最长路.</p><p>先简化问题,边权均为$1$,那么就是经过$T$条边的最长路,可以写出dp:</p><script type="math/tex; mode=display">f_{k,u,v}=\max_{p\in V}\{f_{k-1,u,p}+G_{p,v}\}</script><p>其中$G$为邻接矩阵,那么我们可以定义一个矩阵运算表示上述过程:</p><script type="math/tex; mode=display">C_{i,j}=\max_{k\in V}\{A_{i,k}+B_{k,j}\}</script><p>那么dp的转移就可以写为:</p><script type="math/tex; mode=display">f_{k}=f_{k-1}\times G</script><p>我们定义的运算容易发现是满足结合律的,所以可以用矩阵的幂次表示:</p><script type="math/tex; mode=display">f_{k}=f_{0}\times G^k</script><p>这样就可以矩阵快速幂了.</p><p>回到原题,边权不为$1$显然不能只能套用上述做法,然而$1\leq w_i \leq 5$,这启发我们对点进行拆点.</p><p>具体地来说,点$u$连向点$v$的长度为$w$的边,我们可以将其视为在$u$拆出的点中滞留了$w$次,最后一次到达$v$,并将点权转化到最后一次的连边上.</p><p>因为我们只关心从$1$号点出发的情况,所以用一个向量(矩阵的第一行)去乘矩阵来降低算法常数.</p><p>对于题目中的节日,我们可以在节日的间隔之间用矩阵乘法进行转移,然后在求得的向量的对应点上加上节日带来的额外贡献.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl small=<span class="number">5</span>,big=<span class="number">51</span>,large=<span class="number">251</span>;</span><br><span class="line">lxl n,m,T,k,tot;</span><br><span class="line">lxl c[big],id[big][small],A[large],B[large];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl a[large][large];</span><br><span class="line">_Matrix()&#123;<span class="built_in">memset</span>(a,<span class="number">0xc0</span>,<span class="keyword">sizeof</span> a);&#125;</span><br><span class="line"><span class="keyword">inline</span> lxl* <span class="keyword">operator</span> [](<span class="keyword">const</span> lxl i)&#123;<span class="keyword">return</span> a[i];&#125;</span><br><span class="line"><span class="keyword">inline</span> _Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> _Matrix &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">_Matrix B;</span><br><span class="line">R <span class="keyword">int</span> i,k,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=tot;++i)</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=tot;++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][k]&lt;<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=tot;++j)</span><br><span class="line">B.a[i][j]=<span class="built_in">std</span>::max(B.a[i][j],a[i][k]+another.a[k][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Q[<span class="number">31</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Festival</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl t,x,w;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Festival &amp;another)<span class="keyword">const</span>&#123;<span class="keyword">return</span> t&lt;another.t;&#125;</span><br><span class="line">&#125;f[large];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">VectorMulMatrix</span><span class="params">(_Matrix C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(B,<span class="number">0xc0</span>,<span class="keyword">sizeof</span> B);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(<span class="number">1</span>);k&lt;=tot;++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(A[k]&lt;<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=tot;++j)</span><br><span class="line">B[j]=<span class="built_in">std</span>::max(B[j],A[k]+C[k][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(A,B,<span class="keyword">sizeof</span> A);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(A,<span class="number">0xc0</span>,<span class="keyword">sizeof</span> A);</span><br><span class="line">n=read(),m=read(),T=read(),k=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)c[i]=read();</span><br><span class="line">A[<span class="number">1</span>]=c[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)id[i][<span class="number">0</span>]=++tot;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read(),w=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;w;++j)<span class="keyword">if</span>(!id[u][j])id[u][j]=++tot;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;w;++j)Q[<span class="number">0</span>][id[u][j<span class="number">-1</span>]][id[u][j]]=<span class="number">0</span>;</span><br><span class="line">Q[<span class="number">0</span>][id[u][w<span class="number">-1</span>]][id[v][<span class="number">0</span>]]=c[v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=k;++i)f[i].t=read(),f[i].x=read(),f[i].w=read();</span><br><span class="line"><span class="built_in">std</span>::sort(f+<span class="number">1</span>,f+<span class="number">1</span>+k);</span><br><span class="line">f[<span class="number">0</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,f[k+<span class="number">1</span>]=&#123;T,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=<span class="number">30</span>;++i)Q[i]=Q[i<span class="number">-1</span>]*Q[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=k+<span class="number">1</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl tim=f[i].t-f[i<span class="number">-1</span>].t;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">30</span>);~j;--j)<span class="keyword">if</span>((tim&gt;&gt;j)&amp;<span class="number">1</span>)VectorMulMatrix(Q[j]);</span><br><span class="line">A[f[i].x]+=f[i].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(A[<span class="number">1</span>]&lt;<span class="number">0</span>?<span class="string">"-1\n"</span>:<span class="string">"%lld\n"</span>,A[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:转移矩阵拆点解决图论问题&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-矩阵" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/"/>
    
    <category term="图论" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/图论/"/>
    
    <category term="动态规划" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/图论/动态规划/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="动态规划" scheme="https://www.lemir3.red/tags/动态规划/"/>
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="矩阵" scheme="https://www.lemir3.red/tags/矩阵/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu4211[LNOI2014]LCA</title>
    <link href="https://www.lemir3.red/2020/09/21/jie-ti-bao-gao-luogu4211-lnoi2014-lca/"/>
    <id>https://www.lemir3.red/2020/09/21/jie-ti-bao-gao-luogu4211-lnoi2014-lca/</id>
    <published>2020-09-21T12:27:35.000Z</published>
    <updated>2020-09-21T12:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:离线差分解决多点lca深度问题</p><a id="more"></a><h1 id="luogu4211-LNOI2014-LCA"><a href="#luogu4211-LNOI2014-LCA" class="headerlink" title="luogu4211[LNOI2014]LCA"></a>luogu4211[LNOI2014]LCA</h1><p><a href="https://www.luogu.com.cn/problem/P4211" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>一个显然的思路是把每个点的询问离线下来,暴力跑出所有需要的lca.</p><p>然后看一眼部分分,等差数列分档是用来检测选手数组大小的吗…</p><p>考虑询问时是一个区间求和,可以把它拆成两个前缀和解决.</p><p>也就是说我们需要求出的是$[1,i]$这个区间内的所有点分别关于一个点$z$的lca的深度和.</p><p>有一种lca的求法是对一个点到根的路径进行染色,另一个点进行上移,第一个移动到的有颜色的点即为它们的lca.借用这种思路,我们按编号单增地枚举点,并将它到根节点的路径上的点权值全部加一,枚举到一个询问的左端点时,询问它对应的$z$到根的路径上的权值和并在这个询问对应的答案中减去这个值,枚举到右端点时则加上这个值,根据上述lca的求法容易得到正确性的证明.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">50010</span>;</span><br><span class="line">lxl n,m,NodeCnt,EdgeSize,IdCnt,root;</span><br><span class="line">lxl c[<span class="number">2</span>][big&lt;&lt;<span class="number">2</span>],tag[big&lt;&lt;<span class="number">2</span>],sum[big&lt;&lt;<span class="number">2</span>],head[big],fa[big],top[big],size[big],son[big],id[big],ans[big];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;lxl,lxl&gt; &gt;pos[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl v,next;</span><br><span class="line">&#125;e[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">EdgeAdd</span><span class="params">(lxl u,lxl v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[EdgeSize]=(_Edge)&#123;v,head[u]&#125;;</span><br><span class="line">head[u]=EdgeSize++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(lxl t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!tag[t])<span class="keyword">return</span>;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">sum[c[<span class="number">0</span>][t]]+=tag[t]*(mid-l+<span class="number">1</span>);</span><br><span class="line">sum[c[<span class="number">1</span>][t]]+=tag[t]*(r-mid);</span><br><span class="line">tag[c[<span class="number">0</span>][t]]+=tag[t],tag[c[<span class="number">1</span>][t]]+=tag[t];</span><br><span class="line">tag[t]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(lxl &amp;t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t)t=++NodeCnt;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">BuildTree(c[<span class="number">0</span>][t],l,mid),BuildTree(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">TreeQuery</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)<span class="keyword">return</span> sum[t];</span><br><span class="line">PushDown(t,l,r);</span><br><span class="line">lxl mid((l+r)&gt;&gt;1),all(0);</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)all+=TreeQuery(c[<span class="number">0</span>][t],l,mid,x,y);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid)all+=TreeQuery(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y);</span><br><span class="line"><span class="keyword">return</span> all;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TreeModify</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl y,lxl val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;sum[t]+=(r-l+<span class="number">1</span>)*val,tag[t]+=val;<span class="keyword">return</span>;&#125;</span><br><span class="line">PushDown(t,l,r);</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)TreeModify(c[<span class="number">0</span>][t],l,mid,x,y,val);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid)TreeModify(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y,val);</span><br><span class="line">sum[t]=sum[c[<span class="number">0</span>][t]]+sum[c[<span class="number">1</span>][t]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(lxl u,lxl father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fa[u]=father,size[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line">dfs1(v,u);</span><br><span class="line">size[u]+=size[v];</span><br><span class="line"><span class="keyword">if</span>(size[v]&gt;size[son[u]])son[u]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(lxl u,lxl top_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">top[u]=top_,id[u]=++IdCnt;</span><br><span class="line"><span class="keyword">if</span>(son[u])dfs2(son[u],top_);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(head[u]);~i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">lxl v=e[i].v;</span><br><span class="line"><span class="keyword">if</span>(v==son[u])<span class="keyword">continue</span>;</span><br><span class="line">dfs2(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;u;u=fa[top[u]])TreeModify(root,<span class="number">1</span>,n,id[top[u]],id[u],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">query</span><span class="params">(lxl u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;u;u=fa[top[u]])sum+=TreeQuery(root,<span class="number">1</span>,n,id[top[u]],id[u]);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">2</span>);i&lt;=n;++i)&#123;lxl u=read()+<span class="number">1</span>;EdgeAdd(u,i);&#125;</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">0</span>),dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">BuildTree(root,<span class="number">1</span>,IdCnt);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl l=read()+<span class="number">1</span>,r=read()+<span class="number">1</span>,z=read()+<span class="number">1</span>;</span><br><span class="line">pos[l<span class="number">-1</span>].push_back(<span class="built_in">std</span>::make_pair(z,-i)),pos[r].push_back(<span class="built_in">std</span>::make_pair(z,i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">modify(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=pos[i].begin();it!=pos[i].end();++it)</span><br><span class="line"><span class="keyword">if</span>(it-&gt;second&lt;<span class="number">0</span>)ans[-it-&gt;second]-=query(it-&gt;first);</span><br><span class="line"><span class="keyword">else</span> ans[it-&gt;second]+=query(it-&gt;first);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]%<span class="number">201314</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:离线差分解决多点lca深度问题&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/图论/数据结构/"/>
    
    <category term="数据结构-线段树" scheme="https://www.lemir3.red/categories/图论/数据结构/数据结构-线段树/"/>
    
    <category term="树链剖分" scheme="https://www.lemir3.red/categories/图论/数据结构/数据结构-线段树/树链剖分/"/>
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="线段树" scheme="https://www.lemir3.red/tags/线段树/"/>
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="树链剖分" scheme="https://www.lemir3.red/tags/树链剖分/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu1357花园</title>
    <link href="https://www.lemir3.red/2020/09/21/jie-ti-bao-gao-luogu1357-hua-yuan/"/>
    <id>https://www.lemir3.red/2020/09/21/jie-ti-bao-gao-luogu1357-hua-yuan/</id>
    <published>2020-09-21T08:56:13.000Z</published>
    <updated>2020-09-21T09:12:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:矩阵表示状压dp的状态转移</p><a id="more"></a><h1 id="luogu1357花园"><a href="#luogu1357花园" class="headerlink" title="luogu1357花园"></a>luogu1357花园</h1><p><a href="https://www.luogu.com.cn/problem/P1357" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>其实有个很显然的思路,设$f_{i,s}$为考虑前$i$位,前$m$位放置的状态为$s$的方案数.</p><p>然后转移的时候,可以发现$s$的第一位是没用的,因为已经超出了$m$位的范围,也就是:</p><script type="math/tex; mode=display">f_{i,s}=f_{i-1,s>>1}+f_{i-1,(s>>1)|(1<<(m-1))}</script><p>于是可以发现,对于一个确定的状态$s$,有且最多仅有$2$个状态能转移到它,那么可以将每一个状态的转移关系处理好放在矩阵中,类似于图论中邻接矩阵的用法,我们可以通过矩阵乘法来得到每一个状态能够转移到的状态.</p><p>考虑上环,通过观察题解不难发现,对于一个确定的状态$s$,将dp的初始状态设成$f_{0,s}=1$,终止状态取为$f_{n,s}$,因为$0$号位的答案与$n$号位的状态相同所以是一个合法的环.</p><p>把这个做法移到矩阵上,只须要把初始的转移矩阵的主对角线视为$f_{0,s}=1$,在之后的乘法中自然会发生转移,最后统计主对角线上的值即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">32</span>,p=<span class="number">1000000007</span>;</span><br><span class="line">lxl n,m,k,all,ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl a[big][big];</span><br><span class="line">_Matrix()&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);&#125;</span><br><span class="line"><span class="keyword">inline</span> lxl* <span class="keyword">operator</span> [](<span class="keyword">const</span> lxl i)&#123;<span class="keyword">return</span> a[i];&#125;</span><br><span class="line"><span class="keyword">inline</span> _Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> _Matrix &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">_Matrix b;</span><br><span class="line">R <span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;big;++i)</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;big;++k)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;big;++j)</span><br><span class="line">b.a[i][j]=(b.a[i][j]+a[i][k]*another.a[k][j]%p)%p;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;I,A,T;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">BitCnt</span><span class="params">(lxl s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="function">lxl <span class="title">cnt</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(s)++cnt,s-=lowbit(s);</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> _<span class="function">Matrix <span class="title">FastPow</span><span class="params">(_Matrix A,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_Matrix C=I;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,A=A*A)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)C=C*A;</span><br><span class="line"><span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;all;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(BitCnt(i)&gt;k)<span class="keyword">continue</span>;</span><br><span class="line">lxl j=i&gt;&gt;<span class="number">1</span>;</span><br><span class="line">A[j][i]=<span class="number">1</span>;</span><br><span class="line">j|=<span class="number">1</span>&lt;&lt;(m<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(BitCnt(j)&lt;=k)A[j][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;all;++i)I[i][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read(),k=read();</span><br><span class="line">all=<span class="number">1</span>&lt;&lt;m;</span><br><span class="line">prework();</span><br><span class="line">T=FastPow(A,n);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;all;++i)ans=(ans+T[i][i])%p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:矩阵表示状压dp的状态转移&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-矩阵" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/"/>
    
    <category term="动态规划" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/动态规划/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="动态规划" scheme="https://www.lemir3.red/tags/动态规划/"/>
    
    <category term="矩阵" scheme="https://www.lemir3.red/tags/矩阵/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu4910帕秋莉的手环</title>
    <link href="https://www.lemir3.red/2020/09/21/jie-ti-bao-gao-luogu4910-pa-qiu-li-de-shou-huan/"/>
    <id>https://www.lemir3.red/2020/09/21/jie-ti-bao-gao-luogu4910-pa-qiu-li-de-shou-huan/</id>
    <published>2020-09-21T08:33:14.000Z</published>
    <updated>2020-09-21T08:54:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:矩阵优化dp</p><a id="more"></a><h1 id="luogu4910帕秋莉的手环"><a href="#luogu4910帕秋莉的手环" class="headerlink" title="luogu4910帕秋莉的手环"></a>luogu4910帕秋莉的手环</h1><p><a href="https://www.luogu.com.cn/problem/P4910" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>原题面狗屁不通,翻译一下:</p><blockquote><p>  求构造一个长度为n的01环,使得没有相邻的0的方案数.</p></blockquote><p>于是可以写一个简单dp,设$f_{i,0/1}$为仅考虑前$i$位,这一位上放$0/1$的方案数.</p><p>转移:</p><script type="math/tex; mode=display">f_{i,0}=f_{i-1,1}\\f_{i,1}=f_{i-1,0}+f_{i-1,1}</script><p>构造矩阵表示整个转移过程:</p><script type="math/tex; mode=display">\begin{bmatrix}f_{i,0},f_{i,1},f_{i-1,0},f_{i-1,1}\end{bmatrix}\times\begin{bmatrix}0,1,1,0\\1,1,0,1\\0,0,0,0\\0,0,0,0\end{bmatrix}=\begin{bmatrix}f_{i+1,0},f_{i+1,1},f_{i,0},f_{i,1}\end{bmatrix}</script><p>于是可以用矩阵快速幂加速递推.</p><p>答案为$f_{n,1}+f_{n-1,0}$,因为考虑是一个环,最后一位和第一位同时放$0$的情况要除去.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl small=<span class="number">4</span>,p=<span class="number">1000000007</span>;</span><br><span class="line">lxl T_,n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl a[small][small];</span><br><span class="line">_Matrix()&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);&#125;</span><br><span class="line"><span class="keyword">inline</span> lxl* <span class="keyword">operator</span> [](<span class="keyword">const</span> lxl &amp;i)&#123;<span class="keyword">return</span> a[i];&#125;</span><br><span class="line"><span class="keyword">inline</span> _Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> _Matrix &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">_Matrix b;</span><br><span class="line">R <span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;small;++i)</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;small;++k)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;small;++j)</span><br><span class="line">b.a[i][j]=(b.a[i][j]+a[i][k]*another.a[k][j]%p)%p;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;I,T,A;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> _<span class="function">Matrix <span class="title">FastPow</span><span class="params">(_Matrix A,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_Matrix C=I;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,A=A*A)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)C=C*A;</span><br><span class="line"><span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T[<span class="number">0</span>][<span class="number">0</span>]=T[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">A[<span class="number">0</span>][<span class="number">1</span>]=A[<span class="number">0</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">A[<span class="number">1</span>][<span class="number">0</span>]=A[<span class="number">1</span>][<span class="number">1</span>]=A[<span class="number">1</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;small;++i)I[i][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">prework();</span><br><span class="line">T_=read();</span><br><span class="line"><span class="keyword">while</span>(T_--)</span><br><span class="line">&#123;</span><br><span class="line">n=read();</span><br><span class="line">_Matrix B=T*FastPow(A,n<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(B[<span class="number">0</span>][<span class="number">1</span>]+B[<span class="number">0</span>][<span class="number">2</span>])%p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:矩阵优化dp&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-矩阵" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/"/>
    
    <category term="动态规划" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/动态规划/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="动态规划" scheme="https://www.lemir3.red/tags/动态规划/"/>
    
    <category term="矩阵" scheme="https://www.lemir3.red/tags/矩阵/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」「SHOI2013」超级跳马</title>
    <link href="https://www.lemir3.red/2020/09/21/jie-ti-bao-gao-shoi2013-chao-ji-tiao-ma/"/>
    <id>https://www.lemir3.red/2020/09/21/jie-ti-bao-gao-shoi2013-chao-ji-tiao-ma/</id>
    <published>2020-09-21T01:54:20.000Z</published>
    <updated>2020-09-21T02:24:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:矩阵优化dp转移</p><a id="more"></a><h1 id="「SHOI2013」超级跳马"><a href="#「SHOI2013」超级跳马" class="headerlink" title="「SHOI2013」超级跳马"></a>「SHOI2013」超级跳马</h1><p><a href="https://www.luogu.com.cn/problem/P3990" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>设$f_{i,j}$为在第$i$列第$j$行,能够转移的方案数的前缀和.</p><p>那么可以写出转移:</p><script type="math/tex; mode=display">f_{i+1,1}=f_{i,1}+f_{i,2}+f_{i-1,1}\\f_{i+1,2}=f_{i,1}+f_{i,2}+f_{i,3}+f_{i-1,2}\\\cdots\\f_{i+1,9}=f_{i,8}+f_{i,9}+f_{i,10}+f_{i-1,9}\\f_{i+1,10}=f_{i,9}+f_{i,10}+f_{i-1,10}</script><p>解释一下,$i$与$i+1$的奇偶性不同,所以可以通过跳马得到转移,$i+1$与$i-1$的奇偶性相同,只能直接累加进前缀和用于以后的转移.</p><p>发现转移的形式很优美,可以写成矩阵:</p><script type="math/tex; mode=display">\begin{bmatrix}f_{i,1},f_{i,2},f_{i,3},f_{i,4},f_{i,5},f_{i-1,1},f_{i-1,2},f_{i-1,3},f_{i-1,4},f_{i-1,5}\end{bmatrix}\times\\\begin{bmatrix}1,1,0,0,0,1,0,0,0,0\\1,1,1,0,0,0,1,0,0,0\\0,1,1,1,0,0,0,1,0,0\\0,0,1,1,1,0,0,0,1,0\\0,0,0,1,1,0,0,0,0,1\\1,0,0,0,0,0,0,0,0,0\\0,1,0,0,0,0,0,0,0,0\\0,0,1,0,0,0,0,0,0,0\\0,0,0,1,0,0,0,0,0,0\\0,0,0,0,1,0,0,0,0,0\end{bmatrix}\\=\begin{bmatrix}f_{i+1,1},f_{i+1,2},f_{i+1,3},f_{i+1,4},f_{i+1,5},f_{i,1},f_{i,2},f_{i,3},f_{i,4},f_{i,5}\end{bmatrix}</script><p>然后矩阵快速幂就可以了,最后$f_{m,n}-f_{m-2,n}$即为答案.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">101</span>,p=<span class="number">30011</span>;</span><br><span class="line">lxl n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl a[big][big];</span><br><span class="line">_Matrix()&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);&#125;</span><br><span class="line"><span class="keyword">inline</span> lxl* <span class="keyword">operator</span> [](<span class="keyword">const</span> lxl &amp;i)&#123;<span class="keyword">return</span> a[i];&#125;</span><br><span class="line"><span class="keyword">inline</span> _Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> _Matrix &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">_Matrix b;</span><br><span class="line">R <span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=n;++k)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">b.a[i][j]=(b.a[i][j]+a[i][k]*another.a[k][j]%p+p)%p;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;T,A,B,I;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> _<span class="function">Matrix <span class="title">FastPow</span><span class="params">(_Matrix A,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_Matrix C=I;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,A=A*A)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)C=C*A;</span><br><span class="line"><span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;n;++i)A[i][i+<span class="number">1</span>]=A[i+<span class="number">1</span>][i]=A[i][i]=<span class="number">1</span>;A[n][n]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)A[i][i+n]=A[i+n][i]=<span class="number">1</span>;</span><br><span class="line">n&lt;&lt;=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)I[i][i]=<span class="number">1</span>;</span><br><span class="line">T[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read();</span><br><span class="line">prework();</span><br><span class="line">T=T*FastPow(A,m<span class="number">-2</span>),B=T*A;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(B[<span class="number">1</span>][n&gt;&gt;<span class="number">1</span>]-T[<span class="number">1</span>][n]+p)%p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:矩阵优化dp转移&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-矩阵" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/"/>
    
    <category term="动态规划" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/动态规划/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="动态规划" scheme="https://www.lemir3.red/tags/动态规划/"/>
    
    <category term="矩阵" scheme="https://www.lemir3.red/tags/矩阵/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」[NOI Online #1 入门组]魔法</title>
    <link href="https://www.lemir3.red/2020/09/20/jie-ti-bao-gao-noi-online-1-ru-men-zu-mo-fa/"/>
    <id>https://www.lemir3.red/2020/09/20/jie-ti-bao-gao-noi-online-1-ru-men-zu-mo-fa/</id>
    <published>2020-09-20T12:13:01.000Z</published>
    <updated>2020-09-20T13:00:49.892Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:矩阵优化dp转移</p><a id="more"></a><h1 id="NOI-Online-1-入门组-魔法"><a href="#NOI-Online-1-入门组-魔法" class="headerlink" title="[NOI Online #1 入门组]魔法"></a>[NOI Online #1 入门组]魔法</h1><p><a href="https://www.luogu.com.cn/problem/P6190" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>如果不考虑$k$的存在,那么就可以直接跑floyd算法求出最短路.<br>先设$k$为1,求出最短路后,枚举一条边$(u,v,w)$,将每个状态$f_{i,j}$用$f_{i,u}+f_{v,j}-w$更新即可.</p><p>设$k$为2,设状态$f_{0/1/2,i,j}$为点$i$到$j$使用了至多$k$次魔法的最短路,容易发现一个更新$f_{2,i,j}$的方法:</p><script type="math/tex; mode=display">f_{2,i,j}=\min_{1 \leq x \leq n}\{f_{0/1,i,x}+f_{0/1,x,j}\}</script><p>发现这个形式类似矩阵乘法:</p><script type="math/tex; mode=display">C_{i,j}=\sum_{k=1}^{n}A_{i,k}B_{k,j}</script><p>所以将可以用矩阵乘法来进行上述dp的转移,但问题是$k\leq {10}^6$,需要用矩阵快速幂来加速.</p><p>因此该运算应该满足结合律,证明如下:</p><blockquote><p>令$A$为$m \times n$的矩阵,$B$为$n \times r$的矩阵,$C$为$r \times s$的矩阵,设$D=AB$,$E=BC$,现需要证明$DC=AE$:</p><p>$DC$的元素$(i,j)$为:</p><script type="math/tex; mode=display">\min_{1\leq x\leq r}\{d_{i,x},c_{x,j}\}=\min_{1\leq x \leq r}\{\min_{1\leq y \leq n}\{a_{i,y},b_{y,x}\},c_{x,j}\}</script><p>$AE$的元素$(i,j)$为:</p><script type="math/tex; mode=display">\min_{1\leq x \leq n}\{a_{i,x},e_{x,j}\}=\min_{1 \leq x \leq n}\{a_{i,x}\min_{1\leq y\leq r}\{b_{x,y},c_{y,j}\}\}</script><p>观察发现两式中包含元素相同,因此$(AB)C=DC=AE=A(BC)$.</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="　代码"></a>　代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">101</span>,large=<span class="number">2510</span>;</span><br><span class="line">lxl n,m,k;</span><br><span class="line">lxl edge[big][big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl u,v,w;</span><br><span class="line">&#125;e[large];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl a[big][big];</span><br><span class="line">_Matrix()&#123;<span class="built_in">memset</span>(a,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> a);&#125;</span><br><span class="line"><span class="keyword">inline</span> _Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> _Matrix &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">_Matrix b;</span><br><span class="line">R <span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=n;++k)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">b.a[i][j]=<span class="built_in">std</span>::min(b.a[i][j],a[i][k]+another.a[k][j]);</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125; </span><br><span class="line">&#125;A;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="function">lxl <span class="title">x</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=x*<span class="number">10</span>+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> _<span class="function">Matrix <span class="title">FastPow</span><span class="params">(_Matrix A,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_Matrix I;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;n;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;n;++j)</span><br><span class="line">I.a[i][j]=edge[i][j];</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,A=A*A)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)I=I*A;</span><br><span class="line"><span class="keyword">return</span> I;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(edge,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> edge);</span><br><span class="line">n=read(),m=read(),k=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)e[i].u=read(),e[i].v=read(),e[i].w=read(),edge[e[i].u][e[i].v]=e[i].w;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)edge[i][i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(<span class="number">1</span>);k&lt;=n;++k)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=n;++j)</span><br><span class="line">edge[i][j]=<span class="built_in">std</span>::min(edge[i][j],edge[i][k]+edge[k][j]);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(<span class="number">1</span>);k&lt;=m;++k)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=e[k].u,v=e[k].v,w=e[k].w;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=n;++j)</span><br><span class="line">A.a[i][j]=<span class="built_in">std</span>::min(A.a[i][j],<span class="built_in">std</span>::min(edge[i][u]+edge[v][j]-w,edge[i][j]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!k)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,edge[<span class="number">1</span>][n]);</span><br><span class="line"><span class="keyword">else</span> A=FastPow(A,k),<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,A.a[<span class="number">1</span>][n]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:矩阵优化dp转移&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-矩阵" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/"/>
    
    <category term="图论" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/图论/"/>
    
    <category term="动态规划" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/图论/动态规划/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="动态规划" scheme="https://www.lemir3.red/tags/动态规划/"/>
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="矩阵" scheme="https://www.lemir3.red/tags/矩阵/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」CF576D Flights for Regular Customers</title>
    <link href="https://www.lemir3.red/2020/09/19/jie-ti-bao-gao-cf576d-flights-for-regular-customers/"/>
    <id>https://www.lemir3.red/2020/09/19/jie-ti-bao-gao-cf576d-flights-for-regular-customers/</id>
    <published>2020-09-19T09:07:10.000Z</published>
    <updated>2020-09-19T09:17:25.499Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:邻接矩阵的应用</p><a id="more"></a><h1 id="CF576D-Flights-for-Regular-Customers"><a href="#CF576D-Flights-for-Regular-Customers" class="headerlink" title="CF576D Flights for Regular Customers"></a>CF576D Flights for Regular Customers</h1><p><a href="http://codeforces.com/problemset/problem/576/D" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>边的开放有时间的限制,很好想到对边按照时间进行排序.</p><p>一条限制为$t$的边开放后能够在经过恰好$t$条边的到达的点可以通过邻接矩阵直接乘出来,然后对这些点进行bfs更新答案即可.</p><p>矩阵的大小很大但元素都是01,所以可以使用<code>bitset</code>进行优化.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"bitset"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">151</span>;</span><br><span class="line">lxl n,m,t,ans=INF;</span><br><span class="line">lxl dis[big];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;big&gt;v;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;lxl&gt;q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl u,v,w;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Edge &amp;another)<span class="keyword">const</span>&#123;<span class="keyword">return</span> w&lt;another.w;&#125;</span><br><span class="line">&#125;e[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;big&gt;a[big];</span><br><span class="line"><span class="keyword">inline</span> _Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> _Matrix &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">_Matrix b;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;n;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;n;++j)</span><br><span class="line"><span class="keyword">if</span>(a[i][j])b.a[i]|=another.a[j];</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;A;</span><br><span class="line"><span class="keyword">inline</span> <span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;big&gt; BitsetMul(<span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;big&gt; a,_Matrix b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;big&gt; c;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;n;++i)c[i]=(a&amp;b.a[i]).any();</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FastPow</span><span class="params">(_Matrix A,lxl b,<span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;big&gt; &amp;c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,A=A*A)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)c=BitsetMul(c,A);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)e[i].u=read()<span class="number">-1</span>,e[i].v=read()<span class="number">-1</span>,e[i].w=read();</span><br><span class="line"><span class="built_in">std</span>::sort(e+<span class="number">1</span>,e+<span class="number">1</span>+m);</span><br><span class="line">v[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e[i].w&gt;=ans)<span class="keyword">break</span>;</span><br><span class="line">lxl times=e[i].w-t;</span><br><span class="line">FastPow(A,times,v);</span><br><span class="line">A.a[e[i].v][e[i].u]=<span class="number">1</span>;</span><br><span class="line">t=e[i].w;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> x(<span class="number">1</span>);x&lt;=n;++x)</span><br><span class="line"><span class="keyword">if</span>(v[x<span class="number">-1</span>])q.push(x),dis[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> dis[x]=INF;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">lxl u=q.front();q.pop();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> to(<span class="number">1</span>);to&lt;=n;++to)</span><br><span class="line"><span class="keyword">if</span>(A.a[to<span class="number">-1</span>][u<span class="number">-1</span>]&amp;&amp;dis[to]==INF)dis[to]=dis[u]+<span class="number">1</span>,q.push(to);</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="built_in">std</span>::min(ans,t+dis[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans==INF)<span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:邻接矩阵的应用&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-矩阵" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/"/>
    
    <category term="图论" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/图论/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="矩阵" scheme="https://www.lemir3.red/tags/矩阵/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」「HNOI2011」数学作业</title>
    <link href="https://www.lemir3.red/2020/09/18/jie-ti-bao-gao-hnoi2011-shu-xue-zuo-ye/"/>
    <id>https://www.lemir3.red/2020/09/18/jie-ti-bao-gao-hnoi2011-shu-xue-zuo-ye/</id>
    <published>2020-09-18T13:49:46.000Z</published>
    <updated>2020-09-18T13:58:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:矩阵表示转移</p><a id="more"></a><h1 id="「HNOI2011」数学作业"><a href="#「HNOI2011」数学作业" class="headerlink" title="「HNOI2011」数学作业"></a>「HNOI2011」数学作业</h1><p><a href="https://www.luogu.com.cn/problem/P3216" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>设$f_i$为第$i$个题目中要求的数,构造出转移矩阵:</p><script type="math/tex; mode=display">\begin{bmatrix}f_{n-1},n-1,1\end{bmatrix}\times\begin{bmatrix}10^k,0,0\\1,1,0\\1,1,1\end{bmatrix}=\begin{bmatrix}f_n,n,1\end{bmatrix}</script><p>建出18个转移矩阵然后矩阵快速幂即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">3</span>;</span><br><span class="line">lxl n,mod;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl a[big][big];</span><br><span class="line">_Matrix()&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);&#125;</span><br><span class="line"><span class="keyword">inline</span> _Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> _Matrix &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">_Matrix b;</span><br><span class="line">int i(0),j(0),k(0);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;big;++i)</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;big;++k)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;big;++j)</span><br><span class="line">b.a[i][j]=(b.a[i][j]+a[i][k]*another.a[k][j]%mod+mod)%mod;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;A[<span class="number">18</span>],I,T;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPowZ</span><span class="params">(lxl a,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%mod)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a%mod);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">FastPowZ2</span><span class="params">(lxl a,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a)(b&amp;<span class="number">1</span>)&amp;&amp;(sum=sum*a);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> _<span class="function">Matrix <span class="title">FastPowM</span><span class="params">(_Matrix A,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_Matrix sum=I;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,A=A*A)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)sum=sum*A;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;big;++i)I.a[i][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;<span class="number">18</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">A[i].a[<span class="number">0</span>][<span class="number">0</span>]=FastPowZ(<span class="number">10</span>,i+<span class="number">1</span>);</span><br><span class="line">A[i].a[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>,A[i].a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">A[i].a[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">1</span>,A[i].a[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">1</span>,A[i].a[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">T.a[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>,T.a[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span>,T.a[<span class="number">0</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),mod=read();</span><br><span class="line">prework();</span><br><span class="line"><span class="keyword">for</span>(R lxl i(<span class="number">1</span>),cnt(<span class="number">1</span>);i&lt;=n;++cnt,i*=<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl calc=FastPowZ2(<span class="number">10</span>,cnt)-i,calc2=n-i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)--calc2,--calc;</span><br><span class="line"><span class="keyword">if</span>(i+calc&gt;n)&#123;T=T*FastPowM(A[cnt<span class="number">-1</span>],calc2);<span class="keyword">break</span>;&#125;</span><br><span class="line">T=T*FastPowM(A[cnt<span class="number">-1</span>],calc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,T.a[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:矩阵表示转移&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-矩阵" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="矩阵" scheme="https://www.lemir3.red/tags/矩阵/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」「TJOI2017」可乐</title>
    <link href="https://www.lemir3.red/2020/09/18/jie-ti-bao-gao-tjoi2017-ke-le/"/>
    <id>https://www.lemir3.red/2020/09/18/jie-ti-bao-gao-tjoi2017-ke-le/</id>
    <published>2020-09-18T11:41:18.000Z</published>
    <updated>2020-09-18T12:05:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:邻接矩阵解决图论问题</p><a id="more"></a><h1 id="「TJOI2017」可乐"><a href="#「TJOI2017」可乐" class="headerlink" title="「TJOI2017」可乐"></a>「TJOI2017」可乐</h1><p><a href="https://www.luogu.com.cn/problem/P3758" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>看完题目后脑补了一下邻接矩阵但是不知道怎么用,<del>于是这位没有数理基础的选手打开了题解看性质</del>.</p><p>考虑邻接矩阵的性质,比如题中的样例:</p><script type="math/tex; mode=display">A=\begin{bmatrix}0,1,0\\1,0,1\\0,1,0\end{bmatrix}</script><p>它包含了图的联通性的信息,如果将其的信息视为从一个起点走一步达到其他点的方案数,将其自乘一遍便可以得到从一个点走两步达到其他点的方案数:</p><script type="math/tex; mode=display">A\times A=\begin{bmatrix}1,0,1\\0,2,0\\1,0,1\end{bmatrix}</script><p>这启发我们使用矩阵快速幂解决在走$t$步后到达其他点的方案数.</p><p>但是题目中还有在一个点停下和在一个点结束的限制,对于在一个点停下,向自己连边即可,对于在一个点结束,向虚点$0$号点连一条有向边即可表示.</p><p>最后统计一遍$\sum_{i=0}^{n}a_{1,i}$得到答案.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">31</span>,mod=<span class="number">2017</span>;</span><br><span class="line">lxl n,m,t,ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl a[big][big];</span><br><span class="line">_Matrix()&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);&#125;</span><br><span class="line"><span class="keyword">inline</span> _Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> _Matrix &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">_Matrix b;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;big;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> k(<span class="number">0</span>);k&lt;big;++k)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;big;++j)</span><br><span class="line">b.a[i][j]=(b.a[i][j]+a[i][k]*another.a[k][j])%mod;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;edge,I;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;big;++i)I.a[i][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> _<span class="function">Matrix <span class="title">FastPow</span><span class="params">(_Matrix a,lxl b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_Matrix A=I;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)A=a*A;</span><br><span class="line"><span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">init();</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;=n;++i)edge.a[i][i]=<span class="number">1</span>,edge.a[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read();</span><br><span class="line">edge.a[u][v]=edge.a[v][u]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">t=read();</span><br><span class="line">edge=FastPow(edge,t);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;=n;<span class="built_in">endl</span>,++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">0</span>);j&lt;=n;++j)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld "</span>,edge.a[i][j]);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;=n;++i)ans=(ans+edge.a[<span class="number">1</span>][i])%mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:邻接矩阵解决图论问题&lt;/p&gt;</summary>
    
    
    
    <category term="数学" scheme="https://www.lemir3.red/categories/数学/"/>
    
    <category term="数学-矩阵" scheme="https://www.lemir3.red/categories/数学/数学-矩阵/"/>
    
    
    <category term="数学" scheme="https://www.lemir3.red/tags/数学/"/>
    
    <category term="矩阵" scheme="https://www.lemir3.red/tags/矩阵/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu5251[LnOI2019]第二代图灵机</title>
    <link href="https://www.lemir3.red/2020/09/18/jie-ti-bao-gao-luogu5251-lnoi2019-di-er-dai-tu-ling-ji/"/>
    <id>https://www.lemir3.red/2020/09/18/jie-ti-bao-gao-luogu5251-lnoi2019-di-er-dai-tu-ling-ji/</id>
    <published>2020-09-18T06:07:48.000Z</published>
    <updated>2020-09-21T12:58:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:珂朵莉树上进行尺取法</p><a id="more"></a><h1 id="luogu5251-LnOI2019-第二代图灵机"><a href="#luogu5251-LnOI2019-第二代图灵机" class="headerlink" title="luogu5251[LnOI2019]第二代图灵机"></a>luogu5251[LnOI2019]第二代图灵机</h1><p><a href="https://www.luogu.com.cn/problem/P5251" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p><del>《高中没学过图灵机,写过了第二代图灵机的信息题,可以去拿图灵奖吗》</del></p><p>维护颜色段的信息,大胆一点直接想出珂朵莉树.</p><p>对于修改操作的维护就非常简单了,单点修改区间求和数值可以使用树状数组,区间修改颜色段在珂朵莉树上分裂后再插入即可.</p><p>操作3是求区间内包含所有颜色的数字和最小的子区间,显然这个操作可以进行<strong>尺取法</strong>,在当前区间还未包含所有颜色之前,将区间的右端点向右移,一旦满足了包含所有颜色,更新答案后将左端点向右移动以保证答案最小,因为在珂朵莉树上做所以这样就可以$O(\sqrt n)$地遍历出所有有可能成为最优子区间的区间.</p><p>操作4是求区间内不包含重复颜色的数字和最大子区间,同样使用尺取法,在未出现重复颜色之前将区间右端点向右移使得答案更大,一旦出现了重复的颜色,就将区间的左端点向右移来满足条件.</p><p>根据珂朵莉树的性质,进行操作4时如果有长度大于一的节点那么就对这个节点的操作就只能取左端点后更新答案然后在右端点重新开始尺取法,并且算上中间的单点最大值,单点最大值预先用线段树将整个查询区间处理好即可.</p><p>具体实现特别恶心,看代码吧.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IT std::set<span class="meta-string">&lt;_Chtholly&gt;::iterator</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>,small=<span class="number">110</span>;</span><br><span class="line">lxl n,m,_c,ColorCnt;</span><br><span class="line">lxl a[big],b[big],rem[small],t[big];</span><br><span class="line">lxl root,NodeCnt;</span><br><span class="line">lxl c[<span class="number">2</span>][big&lt;&lt;<span class="number">2</span>],max[big&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Chtholly</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl l,r;</span><br><span class="line"><span class="keyword">mutable</span> lxl v;</span><br><span class="line">_Chtholly(lxl _l,lxl _r=<span class="number">-1</span>,lxl _v=<span class="number">0</span>):l(_l),r(_r),v(_v)&#123;&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Chtholly &amp;another)<span class="keyword">const</span>&#123;<span class="keyword">return</span> l&lt;another.l;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">set</span>&lt;_Chtholly&gt;s;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> IT <span class="title">spilt</span><span class="params">(lxl pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IT it=s.lower_bound(_Chtholly(pos));</span><br><span class="line"><span class="keyword">if</span>(it!=s.end()&amp;&amp;it-&gt;l==pos)<span class="keyword">return</span> it;</span><br><span class="line">--it;</span><br><span class="line">lxl _l=it-&gt;l,_r=it-&gt;r;</span><br><span class="line">lxl _v=it-&gt;v;</span><br><span class="line">s.erase(it);</span><br><span class="line">s.insert(_Chtholly(_l,pos<span class="number">-1</span>,_v));</span><br><span class="line"><span class="keyword">return</span> s.insert(_Chtholly(pos,_r,_v)).first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">assign</span><span class="params">(lxl l,lxl r,lxl val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IT it2=spilt(r+<span class="number">1</span>),it1=spilt(l);</span><br><span class="line">s.erase(it1,it2);</span><br><span class="line">s.insert(_Chtholly(l,r,val));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl x,lxl val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;x&lt;big;x+=lowbit(x))t[x]+=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">ask</span><span class="params">(lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(;x;x-=lowbit(x))sum+=t[x];</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">query</span><span class="params">(lxl l,lxl r)</span></span>&#123;<span class="keyword">return</span> ask(r)-ask(l<span class="number">-1</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(lxl &amp;t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t)t=++NodeCnt;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;max[t]=a[l];<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">BuildTree(c[<span class="number">0</span>][t],l,mid),BuildTree(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r);</span><br><span class="line">max[t]=<span class="built_in">std</span>::max(max[c[<span class="number">0</span>][t]],max[c[<span class="number">1</span>][t]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;max[t]=k;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)change(c[<span class="number">0</span>][t],l,mid,x,k);</span><br><span class="line"><span class="keyword">else</span> change(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,k);</span><br><span class="line">max[t]=<span class="built_in">std</span>::max(max[c[<span class="number">0</span>][t]],max[c[<span class="number">1</span>][t]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">SegMax</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)<span class="keyword">return</span> max[t];</span><br><span class="line">lxl tmax(-INF),mid((l+r)&gt;&gt;1);</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)tmax=<span class="built_in">std</span>::max(tmax,SegMax(c[<span class="number">0</span>][t],l,mid,x,y));</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid)tmax=<span class="built_in">std</span>::max(tmax,SegMax(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y));</span><br><span class="line"><span class="keyword">return</span> tmax;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">GetMin</span><span class="params">(lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IT itl=s.upper_bound(_Chtholly(l)),itr=s.upper_bound(_Chtholly(r));</span><br><span class="line">--itl,--itr;</span><br><span class="line"><span class="keyword">return</span> query(itl-&gt;r,itr-&gt;l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">GetMax</span><span class="params">(lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> query(l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read(),_c=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)a[i]=read(),modify(i,a[i]);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)b[i]=read();</span><br><span class="line">BuildTree(root,<span class="number">1</span>,n);</span><br><span class="line">s.insert(_Chtholly(n+<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">0</span>)),s.insert(_Chtholly(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> l(<span class="number">1</span>);l&lt;=n;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">lxl <span class="title">r</span><span class="params">(l)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(b[r]==b[r+<span class="number">1</span>]&amp;&amp;r&lt;=n)++r;</span><br><span class="line">s.insert((_Chtholly)&#123;l,r,b[l]&#125;),l=r+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl opt=read();</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl x=read(),y=read();</span><br><span class="line">modify(x,-a[x]),modify(x,a[x]=y);</span><br><span class="line">change(root,<span class="number">1</span>,n,x,a[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">lxl l=read(),r=read(),color=read();</span><br><span class="line">assign(l,r,color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(rem,<span class="number">0</span>,<span class="keyword">sizeof</span> rem),ColorCnt=<span class="number">0</span>;</span><br><span class="line">lxl x=read(),y=read(),ans(INF);</span><br><span class="line">lxl l(x),r(x);</span><br><span class="line">spilt(y+<span class="number">1</span>),spilt(x);</span><br><span class="line"><span class="keyword">while</span>(r&lt;=y)</span><br><span class="line">&#123;</span><br><span class="line">IT it=s.lower_bound(_Chtholly(r));</span><br><span class="line"><span class="comment">// debug(it-&gt;l),debug(it-&gt;r),debug(l),debug(r),endl;</span></span><br><span class="line"><span class="keyword">if</span>(!rem[it-&gt;v])++ColorCnt;</span><br><span class="line">++rem[it-&gt;v],r=it-&gt;r;</span><br><span class="line"><span class="keyword">if</span>(ColorCnt&lt;_c)&#123;++r;<span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">IT it2=s.upper_bound(_Chtholly(l));--it2;</span><br><span class="line"><span class="keyword">while</span>(ColorCnt==_c)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="built_in">std</span>::min(GetMin(l,r),ans);</span><br><span class="line"><span class="keyword">if</span>(!(rem[it2-&gt;v]<span class="number">-1</span>))--ColorCnt;</span><br><span class="line">--rem[it2-&gt;v],l=it2-&gt;r+<span class="number">1</span>;</span><br><span class="line">++it2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(it2-&gt;l!=it2-&gt;r)l=it2-&gt;r;</span><br><span class="line">++r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans==INF)<span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(rem,<span class="number">0</span>,<span class="keyword">sizeof</span> rem),ColorCnt=<span class="number">0</span>;</span><br><span class="line">lxl x=read(),y=read(),ans=SegMax(root,<span class="number">1</span>,n,x,y);</span><br><span class="line">lxl l(x),r(x);</span><br><span class="line">spilt(y+<span class="number">1</span>),spilt(x);</span><br><span class="line"><span class="keyword">while</span>(r&lt;=y)</span><br><span class="line">&#123;</span><br><span class="line">IT it=s.lower_bound(_Chtholly(r));</span><br><span class="line"><span class="keyword">if</span>(!(rem[it-&gt;v]<span class="number">-1</span>))++ColorCnt;</span><br><span class="line">++rem[it-&gt;v];</span><br><span class="line"><span class="keyword">if</span>(!ColorCnt)ans=<span class="built_in">std</span>::max(ans,GetMax(l,r));</span><br><span class="line"><span class="comment">// debug(it-&gt;l),debug(it-&gt;r),debug(l),debug(r),debug(rem[2]),endl;</span></span><br><span class="line"><span class="keyword">if</span>(it-&gt;l==it-&gt;r&amp;&amp;rem[it-&gt;v]==<span class="number">1</span>)r=it-&gt;r+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">IT it2=s.upper_bound(_Chtholly(l));--it2;</span><br><span class="line"><span class="comment">// debug(it2-&gt;l),debug(it2-&gt;r),debug(l),endl;</span></span><br><span class="line"><span class="keyword">while</span>(ColorCnt)</span><br><span class="line">&#123;</span><br><span class="line">--rem[it2-&gt;v];</span><br><span class="line"><span class="keyword">if</span>(!(rem[it2-&gt;v]<span class="number">-1</span>))--ColorCnt;</span><br><span class="line"><span class="comment">// debug(l),debug(ColorCnt),debug(rem[it2-&gt;v]);</span></span><br><span class="line">l=it2-&gt;r+<span class="number">1</span>,++it2;</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="built_in">std</span>::max(ans,GetMax(l,r));</span><br><span class="line"><span class="keyword">if</span>(it-&gt;l!=it-&gt;r)</span><br><span class="line">&#123;</span><br><span class="line">l=it-&gt;r,r=l+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(rem,<span class="number">0</span>,<span class="keyword">sizeof</span> rem),ColorCnt=<span class="number">0</span>;</span><br><span class="line">++rem[it-&gt;v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> r=it-&gt;r+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">8 1 4</span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 </span></span><br><span class="line"><span class="comment">2 3 1 2 3 4 1 2</span></span><br><span class="line"><span class="comment">4 2 8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:珂朵莉树上进行尺取法&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/数据结构/"/>
    
    <category term="数据结构-珂朵莉树" scheme="https://www.lemir3.red/categories/数据结构/数据结构-珂朵莉树/"/>
    
    <category term="其他" scheme="https://www.lemir3.red/categories/数据结构/数据结构-珂朵莉树/其他/"/>
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="其他" scheme="https://www.lemir3.red/tags/其他/"/>
    
    <category term="珂朵莉树" scheme="https://www.lemir3.red/tags/珂朵莉树/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」luogu3765总统选举</title>
    <link href="https://www.lemir3.red/2020/09/17/jie-ti-bao-gao-luogu3765-zong-tong-xuan-ju/"/>
    <id>https://www.lemir3.red/2020/09/17/jie-ti-bao-gao-luogu3765-zong-tong-xuan-ju/</id>
    <published>2020-09-17T02:39:46.000Z</published>
    <updated>2020-09-17T03:01:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:线段树维护出信息后平衡树判断合法</p><a id="more"></a><h1 id="luogu3765总统选举"><a href="#luogu3765总统选举" class="headerlink" title="luogu3765总统选举"></a>luogu3765总统选举</h1><p><a href="https://www.luogu.com.cn/problem/P3765" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>可以看到题目要求维护的是区间众数且要求众数的数量超过区间长度的一半.</p><p>这个信息其实比区间众数弱了不少,因为假设这样的总数存在,我们将区间中的数两两取出,若不一样则消去,那么最后一定会剩下这个众数.</p><p>这就启发我们用线段树来维护区间的数互相消去后的信息,仅记录消去后的数和它剩下的出现次数即可.</p><p>但现在的问题是区间内不一定存在这样的众数,所以需要将求得的众数进行检查.</p><p>朴素思路是将每一个数出现的每个位置分别存下来,然后用二分求出求得的众数在这个区间内有多少个.</p><p>对每一个数建立一颗平衡树就可以完成这个操作,节点键值为在原序列上的位置,对于一个区间,我们找到它的左端点在树上的后继,右端点在树上的前驱,然后后继的排名减去前驱的排名即可.</p><p>注意这里的前驱后继是需要包含这个点本身的,也就是<strong>小于/大于等于</strong>这个值的最大/小的数.</p><p>一开始是写了棵splay,然后因为直接暴力插入被卡成了链tle了2个点(不知道其他的点是怎么过的),按理来说把原序列上每个数字对应的所有位置处理好然后直接递归建树就没事了,但反正维护的东西很简单就重新写了棵sbt.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">500010</span>;</span><br><span class="line">lxl n,m,cnt,l,r,s,k,newn,rcnt;</span><br><span class="line">lxl a[big],change[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> SegmentTree</span><br><span class="line">&#123;</span><br><span class="line">lxl root(0),NodeCnt(0);</span><br><span class="line">lxl c[<span class="number">2</span>][big&lt;&lt;<span class="number">2</span>],tim[big&lt;&lt;<span class="number">2</span>],num[big&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(lxl t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num[c[<span class="number">0</span>][t]]==num[c[<span class="number">1</span>][t]])tim[t]=tim[c[<span class="number">0</span>][t]]+tim[c[<span class="number">1</span>][t]],num[t]=num[c[<span class="number">0</span>][t]];</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">if</span>(tim[c[<span class="number">0</span>][t]]&gt;tim[c[<span class="number">1</span>][t]])num[t]=num[c[<span class="number">0</span>][t]],tim[t]=tim[c[<span class="number">0</span>][t]]-tim[c[<span class="number">1</span>][t]];</span><br><span class="line"><span class="keyword">else</span> num[t]=num[c[<span class="number">1</span>][t]],tim[t]=tim[c[<span class="number">1</span>][t]]-tim[c[<span class="number">0</span>][t]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildTree</span><span class="params">(lxl &amp;t,lxl l,lxl r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t)t=++NodeCnt;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;num[t]=a[l],tim[t]=<span class="number">1</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line">BuildTree(c[<span class="number">0</span>][t],l,mid),BuildTree(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r);</span><br><span class="line">PushUp(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::pair&lt;lxl,lxl&gt; query(lxl t,lxl l,lxl r,lxl x,lxl y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)<span class="keyword">return</span> <span class="built_in">std</span>::make_pair(num[t],tim[t]);</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(y&lt;=mid)<span class="keyword">return</span> query(c[<span class="number">0</span>][t],l,mid,x,y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x&gt;mid)<span class="keyword">return</span> query(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::pair&lt;lxl,lxl&gt; lp=query(c[<span class="number">0</span>][t],l,mid,x,y),rp=query(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,y);</span><br><span class="line"><span class="keyword">if</span>(lp.first==rp.first)lp.second+=rp.second;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span>(lp.second&gt;rp.second)lp.second-=rp.second;</span><br><span class="line"><span class="keyword">else</span> lp.first=rp.first,lp.second=rp.second-lp.second;</span><br><span class="line"><span class="keyword">return</span> lp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(lxl t,lxl l,lxl r,lxl x,lxl k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;num[t]=k,tim[t]=<span class="number">1</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="function">lxl <span class="title">mid</span><span class="params">((l+r)&gt;&gt;<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)modify(c[<span class="number">0</span>][t],l,mid,x,k);</span><br><span class="line"><span class="keyword">else</span> modify(c[<span class="number">1</span>][t],mid+<span class="number">1</span>,r,x,k);</span><br><span class="line">PushUp(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> SBT</span><br><span class="line">&#123;</span><br><span class="line">lxl NodeCnt=<span class="number">0</span>;</span><br><span class="line">lxl root[big],rec[big],size[big*<span class="number">3</span>],left[big*<span class="number">3</span>],right[big*<span class="number">3</span>],key[big*<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">LeftRotate</span><span class="params">(lxl &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">k</span><span class="params">(right[t])</span></span>;</span><br><span class="line">right[t]=left[k];</span><br><span class="line">left[k]=t;</span><br><span class="line">size[k]=size[t];</span><br><span class="line">size[t]=size[left[t]]+size[right[t]]+<span class="number">1</span>;</span><br><span class="line">t=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">RightRotate</span><span class="params">(lxl &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">k</span><span class="params">(left[t])</span></span>;</span><br><span class="line">left[t]=right[k];</span><br><span class="line">right[k]=t;</span><br><span class="line">size[k]=size[t];</span><br><span class="line">size[t]=size[left[t]]+size[right[t]]+<span class="number">1</span>;</span><br><span class="line">t=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">(lxl &amp;t,<span class="keyword">bool</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(size[left[left[t]]]&gt;size[right[t]])RightRotate(t);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(size[right[left[t]]]&gt;size[right[t]])</span><br><span class="line">LeftRotate(left[t]),RightRotate(t);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(size[right[right[t]]]&gt;size[left[t]])LeftRotate(t);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(size[left[right[t]]]&gt;size[left[t]])</span><br><span class="line">RightRotate(right[t]),LeftRotate(t);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">maintain(left[t],<span class="literal">false</span>),maintain(right[t],<span class="literal">true</span>);</span><br><span class="line">maintain(t,<span class="literal">true</span>),maintain(t,<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(lxl &amp;t,lxl val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// debugi(rec[0]),debugi(rec[rec[0]]);</span></span><br><span class="line"><span class="keyword">if</span>(rec[<span class="number">0</span>])t=rec[rec[<span class="number">0</span>]--];</span><br><span class="line"><span class="keyword">else</span> t=++NodeCnt;</span><br><span class="line">key[t]=val,size[t]=<span class="number">1</span>,left[t]=right[t]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">++size[t];</span><br><span class="line"><span class="keyword">if</span>(val&lt;key[t])insert(left[t],val);</span><br><span class="line"><span class="keyword">else</span> insert(right[t],val);</span><br><span class="line">maintain(t,val&gt;=key[t]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">erase</span><span class="params">(lxl &amp;t,lxl val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">lxl <span class="title">tmp</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">--size[t];</span><br><span class="line"><span class="keyword">if</span>(val==key[t]||(val&lt;key[t])&amp;&amp;(!left[t])||(val&gt;key[t])&amp;&amp;(!right[t]))</span><br><span class="line">&#123;</span><br><span class="line">tmp=key[t],rec[++rec[<span class="number">0</span>]]=t;</span><br><span class="line"><span class="keyword">if</span>(!left[t]||!right[t])t=left[t]+right[t];</span><br><span class="line"><span class="keyword">else</span> key[t]=erase(left[t],key[t]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(val&lt;key[t])<span class="keyword">return</span> erase(left[t],val);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> erase(right[t],val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">rank</span><span class="params">(lxl &amp;t,lxl val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!t)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(val&lt;=key[t])<span class="keyword">return</span> rank(left[t],val);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> size[left[t]]+<span class="number">1</span>+rank(right[t],val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">find</span><span class="params">(lxl &amp;t,lxl x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==size[left[t]]+<span class="number">1</span>)<span class="keyword">return</span> key[t];</span><br><span class="line"><span class="keyword">if</span>(x&lt;=size[left[t]])<span class="keyword">return</span> find(left[t],x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> find(right[t],x<span class="number">-1</span>-size[left[t]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">pre</span><span class="params">(lxl &amp;t,lxl val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl tmp;</span><br><span class="line"><span class="keyword">if</span>(!t)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(val&lt;key[t])<span class="keyword">return</span> pre(left[t],val);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">tmp=pre(right[t],val);</span><br><span class="line"><span class="keyword">if</span>(!(~tmp))tmp=key[t];</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">aft</span><span class="params">(lxl &amp;t,lxl val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lxl tmp;</span><br><span class="line"><span class="keyword">if</span>(!t)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(val&gt;key[t])<span class="keyword">return</span> aft(right[t],val);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">tmp=aft(left[t],val);</span><br><span class="line"><span class="keyword">if</span>(!(~tmp))tmp=key[t];</span><br><span class="line"> <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">get</span><span class="params">(lxl l,lxl r,lxl id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// debugi(l);</span></span><br><span class="line">l=aft(root[id],l),r=pre(root[id],r);</span><br><span class="line"><span class="comment">// debugi(l),debugi(r),debugi(id);</span></span><br><span class="line"><span class="comment">// debugi(root[5]),debugi(key[5]);</span></span><br><span class="line"><span class="comment">// debugi(left[5]),debugi(right[5]);</span></span><br><span class="line"><span class="comment">// debugi(l),debugi(r),debugi(id);</span></span><br><span class="line">l=rank(root[id],l),r=rank(root[id],r);</span><br><span class="line"><span class="keyword">return</span> r-l+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"P3765_9.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"test.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">double</span> st=clock();</span><br><span class="line"><span class="comment">// for(R int i(1);i&lt;big;++i)SBT::insert(SBT::root[i],-INF),SBT::insert(SBT::root[i],INF);</span></span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line">SBT::insert(SBT::root[a[i]=read()],i);</span><br><span class="line">SegmentTree::BuildTree(SegmentTree::root,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;cnt+=k,++i)</span><br><span class="line">&#123;</span><br><span class="line">l=read(),r=read(),s=read(),k=read();</span><br><span class="line"><span class="keyword">if</span>(cnt+k&gt;big)cnt=<span class="number">0</span>,<span class="built_in">memset</span>(change,<span class="number">0</span>,<span class="keyword">sizeof</span> change);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=k;change[cnt+j]=read(),++j);</span><br><span class="line">lxl sroot=SegmentTree::root,now=SegmentTree::query(sroot,<span class="number">1</span>,n,l,r).first;</span><br><span class="line">lxl times=SBT::get(l,r,now);</span><br><span class="line"><span class="keyword">if</span>(times+times&lt;=r-l+<span class="number">1</span>)now=s;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,now);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=k;++j)</span><br><span class="line">SegmentTree::modify(sroot,<span class="number">1</span>,n,change[cnt+j],now)</span><br><span class="line">,SBT::erase(SBT::root[a[change[cnt+j]]],change[cnt+j])</span><br><span class="line">,SBT::insert(SBT::root[now],change[cnt+j]),a[change[cnt+j]]=now;</span><br><span class="line">&#125;</span><br><span class="line">lxl last=SegmentTree::query(SegmentTree::root,<span class="number">1</span>,n,<span class="number">1</span>,n).first,times=SBT::get(<span class="number">1</span>,n,last);</span><br><span class="line"><span class="keyword">if</span>(times+times&lt;=n)<span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,last);</span><br><span class="line"><span class="keyword">double</span> ed=clock();<span class="built_in">printf</span>(<span class="string">"using time:%lfms\n"</span>,ed-st);</span><br><span class="line"><span class="comment">// debugi(rcnt);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:线段树维护出信息后平衡树判断合法&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/categories/数据结构/"/>
    
    <category term="数据结构-线段树" scheme="https://www.lemir3.red/categories/数据结构/数据结构-线段树/"/>
    
    <category term="数据结构-平衡树" scheme="https://www.lemir3.red/categories/数据结构/数据结构-线段树/数据结构-平衡树/"/>
    
    
    <category term="数据结构" scheme="https://www.lemir3.red/tags/数据结构/"/>
    
    <category term="线段树" scheme="https://www.lemir3.red/tags/线段树/"/>
    
    <category term="平衡树" scheme="https://www.lemir3.red/tags/平衡树/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」CF437D The Child and Zoo</title>
    <link href="https://www.lemir3.red/2020/09/12/jie-ti-bao-gao-cf437d-the-child-and-zoo/"/>
    <id>https://www.lemir3.red/2020/09/12/jie-ti-bao-gao-cf437d-the-child-and-zoo/</id>
    <published>2020-09-12T09:00:26.000Z</published>
    <updated>2020-09-12T09:18:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:建最大生成树中考虑贡献</p><a id="more"></a><h1 id="CF437D-The-Child-and-Zoo"><a href="#CF437D-The-Child-and-Zoo" class="headerlink" title="CF437D The Child and Zoo"></a>CF437D The Child and Zoo</h1><p><a href="http://codeforces.com/problemset/problem/437/D" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题意相当于是一张点权图,对于任意一对点$(u,v)$,选择一条经过的点中$\min\{a_i\}$最大的路径,设这个值为$f(u,v)$,求:</p><script type="math/tex; mode=display">\frac{\sum_{u,v\in V,u \neq v}f(u,v)}{n(n-1)}</script><p>如果是边权图的话反证法易证得点对间的这条路径一定在最大生成树中.</p><p>点权图做一个转化,将边权赋为连接的两个点中权值较小的那一个,因为选这条边就一定经过这两个点.</p><p>将边按边权单减排序,考虑kruskal算法的过程,我们加入一条新边时,经过这条边两边的连通块的路径均会以这条边作为最小值,所以可以直接统计贡献.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl n,m,ConCnt;</span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line">lxl val[big],fa[big],size[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl u,v,w;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Edge &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> w&gt;another.w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;e[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">find</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">return</span> x==fa[x]?x:find(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(lxl x,lxl y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(size[y]&gt;size[x])size[y]+=size[x],fa[x]=y;</span><br><span class="line"><span class="keyword">else</span> size[x]+=size[y],fa[y]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;val[i]=read(),fa[i]=i,size[i]=<span class="number">1</span>,++i);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl u=read(),v=read(),w=<span class="built_in">std</span>::min(val[u],val[v]);</span><br><span class="line">e[i]=(_Edge)&#123;u,v,w&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::sort(e+<span class="number">1</span>,e+<span class="number">1</span>+m);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl x=e[i].u,y=e[i].v,w=e[i].w;</span><br><span class="line">lxl FaX=find(x),FaY=find(y);</span><br><span class="line"><span class="keyword">if</span>(FaX!=FaY)</span><br><span class="line">&#123;</span><br><span class="line">ans+=size[FaX]*size[FaY]*w;</span><br><span class="line">merge(FaX,FaY);</span><br><span class="line"><span class="keyword">if</span>(++ConCnt==n<span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,<span class="number">2</span>*ans/(<span class="keyword">double</span>)(n*(n<span class="number">-1</span>)));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:建最大生成树中考虑贡献&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="图论-生成树" scheme="https://www.lemir3.red/categories/图论/图论-生成树/"/>
    
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="生成树" scheme="https://www.lemir3.red/tags/生成树/"/>
    
  </entry>
  
  <entry>
    <title>「总结」09122020机房赛</title>
    <link href="https://www.lemir3.red/2020/09/12/zong-jie-09122020-ji-fang-sai/"/>
    <id>https://www.lemir3.red/2020/09/12/zong-jie-09122020-ji-fang-sai/</id>
    <published>2020-09-12T07:03:41.000Z</published>
    <updated>2020-09-12T07:13:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:出了场水赛拿给机房神仙做 /kk</p><a id="more"></a><h1 id="09122020机房赛"><a href="#09122020机房赛" class="headerlink" title="09122020机房赛"></a>09122020机房赛</h1><p>说是赛后总结其实赛前就写了.</p><p>话说出题人能不能参赛混一波rating啊 (笑)</p><h1 id="T1-「MZOI2020」快速班号变换"><a href="#T1-「MZOI2020」快速班号变换" class="headerlink" title="T1 「MZOI2020」快速班号变换"></a>T1 「MZOI2020」快速班号变换</h1><h2 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h2><p>忘了说明数字不能重复变换实在是抱歉.</p><p>被syc猜中是dp了,预言题目做法程度的能力吗…</p><p>想着是t1所以数据放了点水,反正本来定位就是个签到题.</p><p>正解$O(n^2)$的dp,但是$n \leq 1000$的数据$O(n^2logn)$的诡异做法应该也能过了.</p><p>样例很草生但愿你们不要考场上笑出来.</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>设计状态$f_{i,j}$表示仅考虑字符串$a$的前$i$位和字符串$b$的前$j$位完成变换的最小花费.</p><p>那么转移其实就很显然:</p><script type="math/tex; mode=display">f_{i,j}=\min(f_{i-1,j}+a,f_{i,j-1}+b,f_{i-1,j-1}+LeeDistance)</script><p>分别表示在这个位置删除一个数,插入一个数,替换一个数.</p><p>分别讲一下,删除当前数,就从$f_{i-1,j}$这个状态转移,相当于这个位置作废不计,加上转移的花费.</p><p>插入一个数同理.</p><p>替换数的话就从$f_{i-1,j-1}$这个状态转移,直接加上让两个字符串下一位相等的花费即可,这个花费即为替换需要的李距离.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>见下发文件.</p><h1 id="T2-「MZOI2020」魔导书"><a href="#T2-「MZOI2020」魔导书" class="headerlink" title="T2 「MZOI2020」魔导书"></a>T2 「MZOI2020」魔导书</h1><h2 id="杂谈-1"><a href="#杂谈-1" class="headerlink" title="杂谈"></a>杂谈</h2><p>这个题之前自己都只有状压思路而且这个状压写起来特别鬼怪.</p><p>这周一早上把题发给绵实机房他们证出来可以贪心,然后我中午回去想了想把贪心过程做成了数据结构.</p><p>所以搜索就没给分,把状压调到了最低档,希望康康蛙能给出奇怪的搜索做法.</p><p>其实有个强一点的样例,不过在我笔记本上所以就用了原先的一个.</p><p><a href="https://www.tv-tokyo.co.jp/anime/dantalian/index.html/" target="_blank" rel="noopener">关于模数</a>.</p><h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="solution0"><a href="#solution0" class="headerlink" title="solution0"></a>solution0</h3><p>这题好不可做啊！交个$ans=\sum_{i=1}^{n}a_i$跑路吧.</p><p>期望得分0.</p><h3 id="solution1"><a href="#solution1" class="headerlink" title="solution1"></a>solution1</h3><p>写个诡异的状压,因为可以确定的是对于每一个书的集合都有一种最优情况来放,记录当前书堆在最优情况下最多还能放几本即可.</p><p>期望得分30.</p><h3 id="solution2"><a href="#solution2" class="headerlink" title="solution2"></a>solution2</h3><p>首先有一个贪心的模型:如果放了一本书在最底层,只用再在下面加上一本$b$比它大的书,状态仍然合法,但答案更优.</p><p>所以把能放书最多的书$i$放上去,然后把剩下的书$j$的$b[j]$改成$\min(b[j],b[i]-1)$,然后按$b$为第一关键字排序,$a$为第二关键字排序,找到第一个,一直循环即可.</p><p>期望得分60.</p><p>另外这里的$a_i \leq 10^3$只是拿来唬人的不会真的有人去想吧 (</p><h3 id="solution3"><a href="#solution3" class="headerlink" title="solution3"></a>solution3</h3><p><strong>solution2</strong>修改的过程考虑使用数据结构维护,把$b_i$相同的书放在一个堆,堆内维护$a$,因为每次是取最大的$b$,所以$\min(b[i],maxb-1)$这个操作仅会影响最大的$b$对应的堆,然后这个堆的$b$改变到和第二大的相同了就合并这两个堆.</p><p>不断地取出最大的$b$对应的堆的堆顶,再合并即可.</p><p>所以需要用到一种支持合并的堆,std用到了左偏树,<a href="https://oi-wiki.org/ds/leftist-tree/" target="_blank" rel="noopener">参考</a>.</p><p>期望得分100.</p><h3 id="solution4"><a href="#solution4" class="headerlink" title="solution4"></a>solution4</h3><p>赛后才知道把$b$序列排序后倒着插入一个普通的堆就能做了,因为在合并之前在最大值之前的$b$是无效的,所以在减到的时候再插入就可以了…</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p>见下发文件.</p><h1 id="T3-「MZOI2020」遗传因子"><a href="#T3-「MZOI2020」遗传因子" class="headerlink" title="T3 「MZOI2020」遗传因子"></a>T3 「MZOI2020」遗传因子</h1><h2 id="杂谈-2"><a href="#杂谈-2" class="headerlink" title="杂谈"></a>杂谈</h2><p>周五早上lyc把”橙队”打成”成对”我还以为泄题了 (</p><p>数据可能有点水,因为要让串长尽量长短不一产生答案.</p><p>第一档分防爆零,不过先为大王默哀三秒…</p><h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先我们将模型简化一下,将$|p|+|q|$视为$1$来做.</p><p>那就是求字符串集中一个串作为其他串的子串出现的次数.</p><p>考虑使用<code>AC自动机</code>解决这个问题,由<code>AC自动机</code>的性质可得,trie树上的一个点对应一个串的前缀,反构的fail树上的一个点对应了后缀的关系,也就是一个点的父亲代表的节点都是它的后缀.</p><p>先在反构的fail树上进行一次递归,求得一个点的父亲中有多少个点有end标记,存入cnt数组.</p><p>然后在trie树上进行递归,递归地累加上之前求得的cnt数组,到有end标记的点就加进答案,就求出了一个点的前缀中包含了多少个有end标记的后缀,就是这个点代表的串包含的其他子串的出现个数了.</p><p>注意这里说的是出现次数,比如串aa在串aaabb中出现了2次.</p><p>然后考虑算上$|p|+|q|$怎么更新答案,发现就是两个串长度的差值,所以我们在记录cnt时,顺带记录一个有end标记的点的长度和leng,然后递归trie树时同样发生累加,更新答案时用当前串的长度乘上包含的子串的出现个数减去累加得的长度和即可.</p><p>期望得分100.</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><p>见下发文件.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:出了场水赛拿给机房神仙做 /kk&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.lemir3.red/categories/总结/"/>
    
    
    <category term="总结" scheme="https://www.lemir3.red/tags/总结/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」「PA2014」Kuglarz</title>
    <link href="https://www.lemir3.red/2020/09/11/jie-ti-bao-gao-pa2014-kuglarz/"/>
    <id>https://www.lemir3.red/2020/09/11/jie-ti-bao-gao-pa2014-kuglarz/</id>
    <published>2020-09-11T09:19:39.000Z</published>
    <updated>2020-09-11T23:27:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:生成树模型转化</p><a id="more"></a><h1 id="「PA2014」Kuglarz"><a href="#「PA2014」Kuglarz" class="headerlink" title="「PA2014」Kuglarz"></a>「PA2014」Kuglarz</h1><p><a href="https://www.luogu.com.cn/problem/P5994" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>给出了部分和关系,可以考虑转化成前缀和关系来做.</p><p>也就是设每个位置藏球数量的前缀和奇偶性为$f_i$,那么确定所有藏球的情况必须要确定所有$f_i$才行.</p><p>那么对于一次询问$(i,j)$,相当于确定了$f_{i-1}$和$f_j$的关系(异或),已知一个就可以推出另一个.</p><p>又因为我们已知$f_0$的奇偶性,所以只要将每一个询问进行连边,建出的生成树就可以推出所有$f_i$了.</p><p>求得的最小生成树的权值和即为答案.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">2010</span>;</span><br><span class="line">lxl n,EdgeSize,ans,ConCnt;</span><br><span class="line">lxl fa[big];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">lxl u,v,w;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> _Edge &amp;another)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> w&lt;another.w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;e[big*big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">lxl <span class="title">find</span><span class="params">(lxl x)</span></span>&#123;<span class="keyword">return</span> x==fa[x]?x:fa[x]=find(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">0</span>);i&lt;=n;fa[i]=i,++i);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> j(i);j&lt;=n;++j)</span><br><span class="line">&#123;</span><br><span class="line">lxl w=read();</span><br><span class="line">e[++EdgeSize]=(_Edge)&#123;i<span class="number">-1</span>,j,w&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::sort(e+<span class="number">1</span>,e+<span class="number">1</span>+EdgeSize);</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=EdgeSize;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl x=e[i].u,y=e[i].v,w=e[i].w;</span><br><span class="line">lxl fax=find(x),fay=find(y);</span><br><span class="line"><span class="keyword">if</span>(fax!=fay)</span><br><span class="line">&#123;</span><br><span class="line">fa[fax]=fay,ans+=w;</span><br><span class="line"><span class="keyword">if</span>(++ConCnt==n)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:生成树模型转化&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="https://www.lemir3.red/categories/图论/"/>
    
    <category term="图论-生成树" scheme="https://www.lemir3.red/categories/图论/图论-生成树/"/>
    
    
    <category term="图论" scheme="https://www.lemir3.red/tags/图论/"/>
    
    <category term="生成树" scheme="https://www.lemir3.red/tags/生成树/"/>
    
  </entry>
  
  <entry>
    <title>「解题报告」「六省联考2017」期末考试</title>
    <link href="https://www.lemir3.red/2020/09/10/jie-ti-bao-gao-liu-sheng-lian-kao-2017-qi-mo-kao-shi/"/>
    <id>https://www.lemir3.red/2020/09/10/jie-ti-bao-gao-liu-sheng-lian-kao-2017-qi-mo-kao-shi/</id>
    <published>2020-09-10T01:05:48.000Z</published>
    <updated>2020-09-10T01:15:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:转化性质进行贪心</p><a id="more"></a><h1 id="「六省联考2017」期末考试"><a href="#「六省联考2017」期末考试" class="headerlink" title="「六省联考2017」期末考试"></a>「六省联考2017」期末考试</h1><p><a href="https://www.luogu.com.cn/problem/P3745" target="_blank" rel="noopener">题面</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>看到这个问题在稿纸上写了两点思路:</p><ul><li>已知每个学生的安格瑞程度仅与最后一科出成绩的有关.</li><li>枚举最后出成绩在那一天.</li></ul><p>考虑枚举最后出成绩在那一天如何实现,显然我们需要把出成绩在那一天之后的全部操作到在这一天之前.</p><p>用前缀和处理一下出成绩的原始时间,得出比某一天大和比某一天小的数目.</p><p>进行操作时,若$B&lt;A$,那么用$B$操作肯定更优,全部都用$B$操作即可.</p><p>不然,则在能够使用的范围内用$A$操作,剩下的用$B$操作,能够使用的范围即为比这一天大的值的数目和比这一天小的值的数目的最小值,剩下的用$B$操作的就是比这一天大的数目减去比这一天小的数目与0取较大值.</p><p>然后对于每个时间更新答案即可.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdlib"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cmath"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cctype"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ctime"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iomanip"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"set"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"deque"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) printf(<span class="meta-string">"debug:%lld\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugi(x) printf(<span class="meta-string">"debug:%d\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debugf(x) printf(<span class="meta-string">"debug:%llf\n"</span>,x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> lxl;</span><br><span class="line"><span class="keyword">const</span> lxl big=<span class="number">100010</span>;</span><br><span class="line">lxl A,B,C,n,m,ans;</span><br><span class="line">lxl t[big],b[big],pret[big],preb[big],nxtb[big],prek[big],nxtk[big],sum[big];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> lxl <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">lxl f(1),x(0);</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);(c==<span class="string">'-'</span>)&amp;&amp;(f=<span class="number">-1</span>),c=getchar());</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>),c=getchar());</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A=read(),B=read(),C=read();</span><br><span class="line">n=read(),m=read();</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;++i)t[i]=read(),++pret[t[i]];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;++i)b[i]=read(),++preb[b[i]],++nxtb[b[i]];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;big;++i)pret[i]+=pret[i<span class="number">-1</span>],sum[i]=sum[i<span class="number">-1</span>]+pret[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;big;++i)prek[i]=prek[i<span class="number">-1</span>]+preb[i<span class="number">-1</span>],preb[i]+=preb[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(big<span class="number">-2</span>);i;--i)nxtk[i]=nxtk[i+<span class="number">1</span>]+nxtb[i+<span class="number">1</span>],nxtb[i]+=nxtb[i+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(R <span class="keyword">int</span> i(<span class="number">1</span>);i&lt;big;++i)</span><br><span class="line">&#123;</span><br><span class="line">lxl tmp=C*sum[i];</span><br><span class="line"><span class="keyword">if</span>(tmp&gt;ans&amp;&amp;ans)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(A&lt;B)tmp+=<span class="built_in">std</span>::min(nxtk[i],prek[i])*A,nxtk[i]-=prek[i],tmp+=<span class="built_in">std</span>::max((lxl)<span class="number">0</span>,nxtk[i])*B;</span><br><span class="line"><span class="keyword">else</span> tmp+=nxtk[i]*B;</span><br><span class="line"><span class="keyword">if</span>(!ans)ans=tmp;</span><br><span class="line">ans=<span class="built_in">std</span>::min(ans,tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;摘要:转化性质进行贪心&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://www.lemir3.red/categories/其他/"/>
    
    <category term="其他-贪心" scheme="https://www.lemir3.red/categories/其他/其他-贪心/"/>
    
    
    <category term="贪心" scheme="https://www.lemir3.red/tags/贪心/"/>
    
    <category term="其他" scheme="https://www.lemir3.red/tags/其他/"/>
    
  </entry>
  
</feed>
